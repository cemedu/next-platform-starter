[
    {
        "title": "What is a closure in JavaScript?",
        "category": "JavaScript",
        "description": "A closure is a function that has access to its own scope, the scope of the outer function, and the global scope.",
        "tags": "closure,function,scope",
        "paid": true,
        "answer": "A closure is created when a function is defined within another function and has access to the outer function's variables. Closures allow functions to retain access to the scope in which they were created, even when called outside of that scope.",
        "example": "function outer() {\n  var outerVar = 'I am outside!';\n  function inner() {\n    console.log(outerVar); // 'I am outside!'\n  }\n  return inner;\n}\nconst innerFunc = outer();\ninnerFunc();"
    },
    {
        "title": "Explain the difference between `let`, `const`, and `var` in JavaScript.",
        "category": "JavaScript",
        "description": "Differences between `let`, `const`, and `var` in terms of scope, re-assignment, and hoisting.",
        "tags": "let,const,var,scope,hoisting",
        "paid": true,
        "answer": "`var` is function-scoped and can be re-assigned and re-declared. `let` is block-scoped and can be re-assigned but not re-declared. `const` is block-scoped and cannot be re-assigned or re-declared.",
        "example": "// var example\nfunction exampleVar() {\n  var x = 1;\n  if (true) {\n    var x = 2; // Same variable!\n    console.log(x); // 2\n  }\n  console.log(x); // 2\n}\nexampleVar();\n\n// let example\nfunction exampleLet() {\n  let x = 1;\n  if (true) {\n    let x = 2; // Different variable\n    console.log(x); // 2\n  }\n  console.log(x); // 1\n}\nexampleLet();\n\n// const example\nconst y = 1;\n// y = 2; // Error: Assignment to constant variable."
    },
    {
        "title": "What is the `this` keyword in JavaScript?",
        "category": "JavaScript",
        "description": "`this` refers to the object it belongs to.",
        "tags": "this,context,object",
        "paid": true,
        "answer": "`this` is a reference to the object that is currently executing the function. The value of `this` depends on the context in which the function is called.",
        "example": "const person = {\n  name: 'John',\n  greet() {\n    console.log(`Hello, my name is ${this.name}`);\n  }\n};\nperson.greet(); // Hello, my name is John\n\nconst greet = person.greet;\ngreet(); // Hello, my name is undefined (or window object in non-strict mode)"
    },
    {
        "title": "What are Promises in JavaScript?",
        "category": "JavaScript",
        "description": "A promise is an object that represents the eventual completion or failure of an asynchronous operation.",
        "tags": "promise,asynchronous,callback",
        "paid": true,
        "answer": "Promises are used to handle asynchronous operations in JavaScript. A promise can be in one of three states: pending, fulfilled, or rejected. Promises allow chaining of operations using `.then()` for success and `.catch()` for errors.",
        "example": "const promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('Success!');\n  }, 1000);\n});\n\npromise.then(result => {\n  console.log(result); // 'Success!'\n}).catch(error => {\n  console.error(error);\n});"
    },
    {
        "title": "What is the event loop in JavaScript?",
        "category": "JavaScript",
        "description": "The event loop is a mechanism that allows JavaScript to perform non-blocking operations.",
        "tags": "event loop,asynchronous,call stack",
        "paid": true,
        "answer": "The event loop is responsible for handling asynchronous operations in JavaScript. It continuously checks the call stack to see if it is empty and if there are any callbacks waiting to be executed in the task queue. If the call stack is empty, the event loop pushes the first callback in the task queue to the call stack.",
        "example": "console.log('Start');\n\nsetTimeout(() => {\n  console.log('Timeout callback');\n}, 0);\n\nconsole.log('End');\n\n// Output:\n// Start\n// End\n// Timeout callback"
    },
    {
        "title": "How does hoisting work in JavaScript?",
        "category": "JavaScript",
        "description": "Hoisting refers to the behavior where variable and function declarations are moved to the top of their scope.",
        "tags": "hoisting,var,function,let,const",
        "paid": true,
        "answer": "In JavaScript, hoisting moves declarations (not initializations) to the top of their scope. This means variables declared with `var` can be used before they are declared, though they will be `undefined`. `let` and `const` declarations are also hoisted but not initialized, resulting in a `ReferenceError` if accessed before declaration.",
        "example": "console.log(a); // undefined\nvar a = 5;\n\n// console.log(b); // ReferenceError: Cannot access 'b' before initialization\nlet b = 10;\n\nfoo(); // 'Hello'\nfunction foo() {\n  console.log('Hello');\n}"
    },
    {
        "title": "What is a callback function in JavaScript?",
        "category": "JavaScript",
        "description": "A callback function is a function passed as an argument to another function.",
        "tags": "callback,function,higher-order",
        "paid": true,
        "answer": "A callback function is a function that is passed as an argument to another function and is executed after some operation has been completed. Callbacks are often used in asynchronous operations to handle results after an operation finishes.",
        "example": "function fetchData(callback) {\n  setTimeout(() => {\n    const data = 'Some data';\n    callback(data);\n  }, 1000);\n}\n\nfetchData((data) => {\n  console.log(data); // 'Some data'\n});"
    },
    {
        "title": "What are arrow functions in JavaScript?",
        "category": "JavaScript",
        "description": "Arrow functions are a concise way to write functions in JavaScript.",
        "tags": "arrow function,ES6,function",
        "paid": true,
        "answer": "Arrow functions provide a shorter syntax for writing functions in JavaScript. They do not have their own `this`, arguments, or super, and cannot be used as constructors. They are particularly useful for writing concise callbacks.",
        "example": "const add = (a, b) => a + b;\nconsole.log(add(2, 3)); // 5\n\nconst numbers = [1, 2, 3];\nconst doubled = numbers.map(n => n * 2);\nconsole.log(doubled); // [2, 4, 6]"
    },
    {
        "title": "What is the difference between `==` and `===` in JavaScript?",
        "category": "JavaScript",
        "description": "`==` checks for value equality, while `===` checks for both value and type equality.",
        "tags": "equality,comparison,strict equality",
        "paid": true,
        "answer": "`==` (loose equality) compares two values for equality, after converting both values to a common type. `===` (strict equality) compares both the value and the type, without type conversion. This makes `===` more predictable and safer to use in most cases.",
        "example": "console.log(5 == '5'); // true (type conversion)\nconsole.log(5 === '5'); // false (no type conversion)\n\nconsole.log(null == undefined); // true (both are considered 'empty')\nconsole.log(null === undefined); // false (different types)"
    },
    {
        "title": "What is the difference between `null` and `undefined` in JavaScript?",
        "category": "JavaScript",
        "description": "`null` represents the intentional absence of any object value, while `undefined` indicates a variable has been declared but not yet assigned a value.",
        "tags": "null,undefined,type",
        "paid": true,
        "answer": "`null` is an assignment value that represents the intentional absence of any object value. It is often used to reset or clear a variable. `undefined` means that a variable has been declared but has not yet been assigned a value. JavaScript will automatically assign `undefined` to variables that are declared but not initialized.",
        "example": "let x;\nconsole.log(x); // undefined\n\nlet y = null;\nconsole.log(y); // null\n\nconsole.log(typeof null); // 'object'\nconsole.log(typeof undefined); // 'undefined'"
    },
    {
        "title": "What is the difference between synchronous and asynchronous JavaScript?",
        "category": "JavaScript",
        "description": "Synchronous operations block the execution of subsequent code, while asynchronous operations allow code to run without waiting for previous operations to complete.",
        "tags": "synchronous,asynchronous,event loop,blocking",
        "paid": true,
        "answer": "In synchronous JavaScript, operations are executed one after another, meaning each operation must complete before the next one begins. This can lead to blocking if an operation takes a long time to complete. Asynchronous JavaScript allows for operations to run in the background, freeing up the main thread to continue executing other code. Callbacks, Promises, and async/await are common ways to handle asynchronous operations.",
        "example": "// Synchronous example\nconsole.log('Start');\nfor (let i = 0; i < 1000000000; i++) {} // Blocking loop\nconsole.log('End');\n\n// Asynchronous example\nconsole.log('Start');\nsetTimeout(() => console.log('Async operation complete'), 1000);\nconsole.log('End');"
    },
    {
        "title": "What is the use of the `bind` method in JavaScript?",
        "category": "JavaScript",
        "description": "The `bind` method creates a new function with a specific `this` value.",
        "tags": "bind,this,method,context",
        "paid": true,
        "answer": "The `bind` method creates a new function that, when called, has its `this` keyword set to the provided value. It also allows you to preset arguments for the function, which are prepended to the arguments passed when the function is called. This is particularly useful when you want to pass a method as a callback but need to ensure it uses the correct `this` context.",
        "example": "const person = {\n  name: 'Alice',\n  greet() {\n    console.log(`Hello, ${this.name}`);\n  }\n};\n\nconst greet = person.greet.bind(person);\ngreet(); // Hello, Alice\n\nconst greetAnother = person.greet.bind({ name: 'Bob' });\ngreetAnother(); // Hello, Bob"
    },
    {
        "title": "What are JavaScript modules?",
        "category": "JavaScript",
        "description": "Modules are reusable pieces of code that can be exported from one script and imported for use in another script.",
        "tags": "modules,import,export,ES6",
        "paid": true,
        "answer": "JavaScript modules allow you to encapsulate code in separate files that can be imported and reused in other parts of your application. This helps in organizing code and avoiding global namespace pollution. You can export functions, objects, or variables from one module and import them into another using the `import` and `export` keywords.",
        "example": "// math.js\nexport function add(a, b) {\n  return a + b;\n}\n\n// main.js\nimport { add } from './math.js';\nconsole.log(add(2, 3)); // 5"
    },
    {
        "title": "What is the spread operator in JavaScript?",
        "category": "JavaScript",
        "description": "The spread operator allows an iterable to be expanded in places where multiple elements are expected.",
        "tags": "spread operator,ES6,array,object",
        "paid": true,
        "answer": "The spread operator (`...`) allows an iterable (such as an array or object) to be expanded into individual elements. It is commonly used to copy arrays or objects, combine multiple arrays or objects, or pass elements of an array as arguments to a function.",
        "example": "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\nconsole.log(combined); // [1, 2, 3, 4, 5, 6]\n\nconst obj1 = { a: 1, b: 2 };\nconst obj2 = { c: 3, d: 4 };\nconst combinedObj = { ...obj1, ...obj2 };\nconsole.log(combinedObj); // { a: 1, b: 2, c: 3, d: 4 }"
    },
    {
        "title": "What is destructuring in JavaScript?",
        "category": "JavaScript",
        "description": "Destructuring is a syntax that allows you to extract values from arrays or properties from objects into distinct variables.",
        "tags": "destructuring,ES6,array,object",
        "paid": true,
        "answer": "Destructuring is a convenient way to extract multiple properties from an object or elements from an array into separate variables. This can make your code cleaner and more readable, especially when dealing with complex data structures.",
        "example": "// Array destructuring\nconst [a, b] = [1, 2];\nconsole.log(a, b); // 1 2\n\n// Object destructuring\nconst { name, age } = { name: 'Alice', age: 25 };\nconsole.log(name, age); // Alice 25"
    },
    {
        "title": "What is a higher-order function in JavaScript?",
        "category": "JavaScript",
        "description": "A higher-order function is a function that takes another function as an argument or returns a function as a result.",
        "tags": "higher-order function,callback,function",
        "paid": true,
        "answer": "Higher-order functions are functions that can take other functions as arguments, return them, or both. This allows for functional programming techniques such as function composition, currying, and creating reusable utility functions like `map`, `filter`, and `reduce`.",
        "example": "function higherOrderFunction(callback) {\n  return function(x) {\n    return callback(x);\n  };\n}\n\nconst double = higherOrderFunction(x => x * 2);\nconsole.log(double(5)); // 10"
    },
    {
        "title": "What is `NaN` in JavaScript?",
        "category": "JavaScript",
        "description": "`NaN` stands for 'Not-a-Number' and is a value that results from an invalid or undefined mathematical operation.",
        "tags": "NaN,type,number",
        "paid": true,
        "answer": "`NaN` is a special value in JavaScript that represents a value that is not a legal number. It is returned when a mathematical operation fails or when a function that expects a number receives a non-numeric value. Interestingly, `NaN` is the only value in JavaScript that is not equal to itself, making it easy to check if a value is `NaN` using `Number.isNaN()`.",
        "example": "console.log(0 / 0); // NaN\nconsole.log(parseInt('abc')); // NaN\n\nconsole.log(NaN === NaN); // false\nconsole.log(Number.isNaN(NaN)); // true"
    },
    {
        "title": "How does JavaScript handle floating-point precision?",
        "category": "JavaScript",
        "description": "JavaScript uses double-precision floating-point format, which can lead to precision issues.",
        "tags": "floating-point,precision,number",
        "paid": true,
        "answer": "JavaScript uses the IEEE 754 double-precision floating-point format to represent numbers. This can lead to precision issues when performing arithmetic operations with decimals. For example, adding 0.1 and 0.2 in JavaScript results in a value slightly different from 0.3. To avoid such issues, developers often use techniques like rounding to a fixed number of decimal places.",
        "example": "console.log(0.1 + 0.2); // 0.30000000000000004\n\nconsole.log((0.1 + 0.2).toFixed(1)); // '0.3'"
    },
    {
        "title": "What is the difference between `call`, `apply`, and `bind`?",
        "category": "JavaScript",
        "description": "`call`, `apply`, and `bind` are methods to set the `this` context of a function.",
        "tags": "call,apply,bind,this",
        "paid": true,
        "answer": "`call` and `apply` are used to invoke functions with a specific `this` context. The difference is that `call` takes arguments separately, while `apply` takes them as an array. `bind` creates a new function with a bound `this` context that can be invoked later.",
        "example": "function greet(greeting) {\n  console.log(`${greeting}, ${this.name}`);\n}\n\nconst person = { name: 'Alice' };\n\n// Using call\ngreet.call(person, 'Hello'); // Hello, Alice\n\n// Using apply\ngreet.apply(person, ['Hi']); // Hi, Alice\n\n// Using bind\nconst boundGreet = greet.bind(person, 'Hey');\nboundGreet(); // Hey, Alice"
    },
    {
        "title": "What is the purpose of the `typeof` operator in JavaScript?",
        "category": "JavaScript",
        "description": "`typeof` is used to determine the type of a variable or expression.",
        "tags": "typeof,type,operator",
        "paid": true,
        "answer": "The `typeof` operator returns a string indicating the type of the operand. It can be used to check if a variable is a string, number, boolean, object, function, or undefined. However, it has some quirks, such as returning 'object' for null values.",
        "example": "console.log(typeof 'Hello'); // 'string'\nconsole.log(typeof 42); // 'number'\nconsole.log(typeof true); // 'boolean'\nconsole.log(typeof {}); // 'object'\nconsole.log(typeof function() {}); // 'function'\nconsole.log(typeof null); // 'object'"
    },
    {
        "title": "What is the event loop in JavaScript?",
        "category": "JavaScript",
        "description": "The event loop is responsible for managing the execution of code, event handling, and asynchronous operations.",
        "tags": "event loop,asynchronous,callback,concurrency",
        "paid": true,
        "answer": "The event loop is a core mechanism of JavaScript that handles asynchronous operations. It continuously checks the call stack to see if there is any function that needs to run. If the call stack is empty, the event loop will look at the task queue to see if there are any pending tasks (like callbacks from asynchronous operations) that need to be executed. This allows JavaScript to perform non-blocking operations despite being single-threaded.",
        "example": "console.log('Start');\n\nsetTimeout(() => {\n  console.log('Timeout');\n}, 0);\n\nconsole.log('End');\n\n// Output:\n// Start\n// End\n// Timeout"
    },
    {
        "title": "What is a promise in JavaScript?",
        "category": "JavaScript",
        "description": "A promise is an object representing the eventual completion or failure of an asynchronous operation.",
        "tags": "promise,asynchronous,callback",
        "paid": true,
        "answer": "A promise is an object that represents the eventual outcome of an asynchronous operation. It can be in one of three states: pending, fulfilled, or rejected. Promises allow you to write asynchronous code in a more synchronous-like manner, avoiding callback hell. You can chain `.then()` and `.catch()` methods to handle the results of a promise.",
        "example": "const promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('Success!');\n  }, 1000);\n});\n\npromise.then(result => {\n  console.log(result); // 'Success!'\n}).catch(error => {\n  console.log(error);\n});"
    },
    {
        "title": "What is the difference between `==` and `===` in JavaScript?",
        "category": "JavaScript",
        "description": "`==` checks for value equality, while `===` checks for both value and type equality.",
        "tags": "equality,comparison,==,===",
        "paid": true,
        "answer": "`==` is the loose equality operator, which performs type coercion before comparing values. This means that it tries to convert the operands to the same type before making the comparison. `===` is the strict equality operator, which does not perform type coercion and only returns true if both the value and type are the same.",
        "example": "console.log(2 == '2'); // true (type coercion)\nconsole.log(2 === '2'); // false (different types)\nconsole.log(null == undefined); // true\nconsole.log(null === undefined); // false"
    },
    {
        "title": "What is a callback function in JavaScript?",
        "category": "JavaScript",
        "description": "A callback function is a function passed as an argument to another function to be executed later.",
        "tags": "callback,function,asynchronous",
        "paid": true,
        "answer": "A callback function is a function that is passed as an argument to another function and is executed after some operation has been completed. Callbacks are commonly used in asynchronous programming, such as when handling events or performing operations like reading files or making network requests.",
        "example": "function fetchData(callback) {\n  setTimeout(() => {\n    callback('Data fetched!');\n  }, 1000);\n}\n\nfetchData(result => {\n  console.log(result); // 'Data fetched!'\n});"
    },
    {
        "title": "What is the purpose of the `async` and `await` keywords?",
        "category": "JavaScript",
        "description": "`async` and `await` simplify working with promises by allowing asynchronous code to be written in a synchronous style.",
        "tags": "async,await,promise,asynchronous",
        "paid": true,
        "answer": "`async` is used to declare an asynchronous function, which automatically returns a promise. The `await` keyword is used inside `async` functions to pause execution until a promise is resolved or rejected, making asynchronous code easier to read and write. This approach avoids the need for chaining `.then()` and `.catch()` methods.",
        "example": "async function fetchData() {\n  try {\n    const data = await fetch('https://api.example.com/data');\n    const json = await data.json();\n    console.log(json);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n\nfetchData();"
    },
    {
        "title": "What is hoisting in JavaScript?",
        "category": "JavaScript",
        "description": "Hoisting refers to the behavior of moving variable and function declarations to the top of their containing scope.",
        "tags": "hoisting,variable,function,scope",
        "paid": true,
        "answer": "Hoisting is JavaScript's default behavior of moving variable and function declarations to the top of their containing scope during the compilation phase. This means you can use functions and variables before they are actually declared in the code. However, only the declarations are hoisted, not the initializations. `let` and `const` are hoisted as well, but they are not initialized, leading to a `ReferenceError` if accessed before declaration.",
        "example": "console.log(hoistedVar); // undefined\nvar hoistedVar = 'I am hoisted!';\n\nhoistedFunction(); // 'I am hoisted!'\nfunction hoistedFunction() {\n  console.log('I am hoisted!');\n}\n\nconsole.log(notHoistedVar); // ReferenceError: notHoistedVar is not defined\nlet notHoistedVar = 'I am not hoisted!';"
    },
    {
        "title": "What is the `this` keyword in JavaScript?",
        "category": "JavaScript",
        "description": "`this` refers to the object that is executing the current function.",
        "tags": "this,context,function,object",
        "paid": true,
        "answer": "In JavaScript, the `this` keyword refers to the object that is currently executing the function. The value of `this` depends on how a function is called. In a method, `this` refers to the owner object. In a regular function or arrow function, `this` refers to the global object (`window` in browsers), unless in strict mode, where it is `undefined`. In event handlers, `this` refers to the element that received the event.",
        "example": "const obj = {\n  name: 'Alice',\n  greet() {\n    console.log(`Hello, ${this.name}`);\n  }\n};\n\nobj.greet(); // 'Hello, Alice'\n\nfunction sayName() {\n  console.log(this.name);\n}\n\nconst anotherObj = { name: 'Bob' };\nsayName.call(anotherObj); // 'Bob'"
    },
    {
        "title": "What is the `new` keyword in JavaScript?",
        "category": "JavaScript",
        "description": "`new` is used to create an instance of an object that has a constructor function.",
        "tags": "new,constructor,function,object",
        "paid": true,
        "answer": "The `new` keyword in JavaScript is used to create an instance of an object that is defined by a constructor function. When you use `new`, it creates a new object, sets the `this` context of the constructor function to the new object, and returns the new object if the constructor doesn't return anything else explicitly.",
        "example": "function Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nconst person = new Person('Alice', 25);\nconsole.log(person.name); // 'Alice'\nconsole.log(person.age); // 25"
    },
    {
        "title": "What is the difference between `null` and `undefined`?",
        "category": "JavaScript",
        "description": "`null` is an assigned value representing no value, while `undefined` means a variable has been declared but not assigned a value.",
        "tags": "null,undefined,type",
        "paid": true,
        "answer": "`null` is an assigned value that represents the intentional absence of any object value. It is often used to signify 'no value' or 'empty.' On the other hand, `undefined` means that a variable has been declared but has not yet been assigned a value. `undefined` is the default value for uninitialized variables.",
        "example": "let a;\nconsole.log(a); // undefined\n\nlet b = null;\nconsole.log(b); // null"
    },
    {
        "title": "What is the `prototype` in JavaScript?",
        "category": "JavaScript",
        "description": "The `prototype` is an object from which other objects inherit properties and methods.",
        "tags": "prototype,inheritance,object",
        "paid": true,
        "answer": "In JavaScript, every function has a `prototype` property, which is an object that is shared among all instances created by that function. The `prototype` object is used to implement inheritance, allowing objects to inherit properties and methods from other objects. When you access a property or method on an object, JavaScript first looks at the object itself, and if it doesn't find the property or method, it looks at the object's prototype chain.",
        "example": "function Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.sayHello = function() {\n  console.log(`Hello, my name is ${this.name}`);\n};\n\nconst alice = new Person('Alice');\nalice.sayHello(); // 'Hello, my name is Alice'"
    },
    {
        "title": "What is an Immediately Invoked Function Expression (IIFE)?",
        "category": "JavaScript",
        "description": "An IIFE is a function that is executed immediately after it is defined.",
        "tags": "IIFE,function,scope",
        "paid": true,
        "answer": "An Immediately Invoked Function Expression (IIFE) is a function that is defined and executed immediately after its creation. IIFEs are often used to create a private scope, avoiding polluting the global namespace. This pattern is commonly used in JavaScript to encapsulate code and create modular code structures.",
        "example": "(function() {\n  console.log('This is an IIFE');\n})();"
    },
    {
        "title": "What are arrow functions in JavaScript?",
        "category": "JavaScript",
        "description": "Arrow functions are a shorthand syntax for writing functions in JavaScript.",
        "tags": "arrow function,ES6,this",
        "paid": true,
        "answer": "Arrow functions are a concise way to write functions in JavaScript introduced in ES6. They use the `=>` syntax and have some differences from regular functions, such as not having their own `this`, `arguments`, `super`, or `new.target` bindings. Arrow functions are often used in situations where a shorter syntax is desirable, and they are especially useful for callbacks.",
        "example": "const add = (a, b) => a + b;\nconsole.log(add(2, 3)); // 5\n\nconst greet = name => `Hello, ${name}`;\nconsole.log(greet('Alice')); // 'Hello, Alice'"
    },
    {
        "title": "What is the `arguments` object in JavaScript?",
        "category": "JavaScript",
        "description": "The `arguments` object is an array-like object that contains the arguments passed to a function.",
        "tags": "arguments,function,array-like",
        "paid": true,
        "answer": "The `arguments` object is an array-like object accessible inside all non-arrow functions. It contains the values of the arguments passed to that function. Although it behaves like an array, it does not have all the methods of an array, such as `forEach` or `map`. The `arguments` object is useful when you need to work with a function's parameters but don't know how many will be passed.",
        "example": "function sum() {\n  let total = 0;\n  for (let i = 0; i < arguments.length; i++) {\n    total += arguments[i];\n  }\n  return total;\n}\n\nconsole.log(sum(1, 2, 3, 4)); // 10"
    },
    {
        "title": "What is the `fetch` API?",
        "category": "JavaScript",
        "description": "`fetch` is a modern API for making network requests in JavaScript.",
        "tags": "fetch,API,network,asynchronous",
        "paid": true,
        "answer": "The `fetch` API is a modern interface that allows you to make network requests similar to `XMLHttpRequest` but with a more powerful and flexible feature set. It returns a promise that resolves to the `Response` object representing the response to the request. The `fetch` API is widely used for making HTTP requests and handling responses in a more readable and manageable way.",
        "example": "fetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));"
    },
    {
        "title": "What is the difference between `Array.map()` and `Array.forEach()`?",
        "category": "JavaScript",
        "description": "`map` returns a new array with transformed elements, while `forEach` simply iterates over the array without returning a value.",
        "tags": "map,forEach,array,iteration",
        "paid": true,
        "answer": "`Array.map()` creates a new array with the results of calling a provided function on every element in the array. It is used when you want to transform the elements of an array and obtain a new array with the transformed values. `Array.forEach()`, on the other hand, executes a provided function once for each array element but does not return a new array. It is used when you want to perform side effects or operations without needing a new array.",
        "example": "const numbers = [1, 2, 3, 4];\n\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6, 8]\n\nnumbers.forEach(num => console.log(num * 2));\n// Output: 2 4 6 8"
    },
    {
        "title": "What is the `reduce` method in JavaScript?",
        "category": "JavaScript",
        "description": "`reduce` is a method that reduces an array to a single value by iterating over the elements and applying a callback.",
        "tags": "reduce,array,iteration,accumulator",
        "paid": true,
        "answer": "`reduce` is a powerful method that allows you to reduce an array to a single value by executing a reducer function on each element of the array. The reducer function takes an accumulator and the current value as arguments and returns a new accumulator value. This method is often used for operations like summing all the elements of an array or building an object from an array of data.",
        "example": "const numbers = [1, 2, 3, 4];\n\nconst sum = numbers.reduce((acc, num) => acc + num, 0);\nconsole.log(sum); // 10\n\nconst product = numbers.reduce((acc, num) => acc * num, 1);\nconsole.log(product); // 24"
    },
    {
        "title": "What are template literals in JavaScript?",
        "category": "JavaScript",
        "description": "Template literals are string literals that allow embedded expressions and multi-line strings.",
        "tags": "template literals,ES6,string,interpolation",
        "paid": true,
        "answer": "Template literals are a feature introduced in ES6 that allow for easier string creation and embedding of expressions. They are enclosed by backticks (``) instead of quotes, and they allow for multi-line strings as well as embedding expressions using `${}`. This makes string concatenation more readable and easier to manage.",
        "example": "const name = 'Alice';\nconst greeting = `Hello, ${name}!`;\nconsole.log(greeting); // 'Hello, Alice!'\n\nconst multiLineString = `This is a string\nthat spans multiple lines.`;\nconsole.log(multiLineString);\n// 'This is a string\n// that spans multiple lines.'"
    },
    {
        "title": "What is the `Object.assign()` method?",
        "category": "JavaScript",
        "description": "`Object.assign()` is used to copy the values of all enumerable properties from one or more source objects to a target object.",
        "tags": "Object.assign,object,copy,merge",
        "paid": true,
        "answer": "`Object.assign()` is a method used to copy the values of all enumerable properties from one or more source objects to a target object. It returns the target object, which is now modified to include the properties from the source objects. This method is commonly used for cloning objects or merging multiple objects into one.",
        "example": "const target = { a: 1 };\nconst source1 = { b: 2 };\nconst source2 = { c: 3 };\n\nconst result = Object.assign(target, source1, source2);\nconsole.log(result); // { a: 1, b: 2, c: 3 }\nconsole.log(target); // { a: 1, b: 2, c: 3 }"
    },
    {
        "title": "What is `destructuring` in JavaScript?",
        "category": "JavaScript",
        "description": "Destructuring is a syntax for unpacking values from arrays or properties from objects into distinct variables.",
        "tags": "destructuring,array,object,ES6",
        "paid": true,
        "answer": "Destructuring is a syntax introduced in ES6 that allows you to unpack values from arrays or properties from objects into distinct variables. This makes it easier to work with complex data structures and extract specific values or properties in a concise and readable manner. Destructuring can be applied to arrays, objects, and function parameters.",
        "example": "const [a, b] = [1, 2];\nconsole.log(a); // 1\nconsole.log(b); // 2\n\nconst { name, age } = { name: 'Alice', age: 25 };\nconsole.log(name); // 'Alice'\nconsole.log(age); // 25"
    },
    {
        "title": "What is the `setTimeout()` function in JavaScript?",
        "category": "JavaScript",
        "description": "`setTimeout()` is used to execute a function after a specified delay.",
        "tags": "setTimeout,asynchronous,timer",
        "paid": true,
        "answer": "`setTimeout()` is a function that allows you to execute a callback function after a specified delay, measured in milliseconds. It is commonly used for delaying the execution of code, simulating asynchronous operations, or creating timed events. The function returns a unique identifier that can be used to cancel the timeout with `clearTimeout()`.",
        "example": "setTimeout(() => {\n  console.log('This message is displayed after 2 seconds');\n}, 2000);"
    },
    {
        "title": "What is the `setInterval()` function in JavaScript?",
        "category": "JavaScript",
        "description": "`setInterval()` is used to repeatedly execute a function at specified intervals.",
        "tags": "setInterval,asynchronous,timer",
        "paid": true,
        "answer": "`setInterval()` is a function that allows you to repeatedly execute a callback function at a specified interval, measured in milliseconds. It continues to execute the function at the given intervals until it is explicitly stopped with `clearInterval()`. This function is useful for creating recurring events or polling operations.",
        "example": "const intervalId = setInterval(() => {\n  console.log('This message is displayed every 2 seconds');\n}, 2000);\n\n// To stop the interval\nclearInterval(intervalId);"
    },
    {
        "title": "What is `JSON.stringify()`?",
        "category": "JavaScript",
        "description": "`JSON.stringify()` is used to convert a JavaScript object or value to a JSON string.",
        "tags": "JSON,stringify,serialization",
        "paid": true,
        "answer": "`JSON.stringify()` is a method that converts a JavaScript object or value to a JSON string. It is commonly used for sending data to a server or saving data in a storage format. The method can also take additional arguments for controlling the stringification process, such as a replacer function or an array of properties to include, and a space parameter for formatting.",
        "example": "const obj = { name: 'Alice', age: 25 };\nconst jsonString = JSON.stringify(obj);\nconsole.log(jsonString); // '{\"name\":\"Alice\",\"age\":25}'"
    },
    {
        "title": "What is `JSON.parse()`?",
        "category": "JavaScript",
        "description": "`JSON.parse()` is used to convert a JSON string to a JavaScript object.",
        "tags": "JSON,parse,deserialization",
        "paid": true,
        "answer": "`JSON.parse()` is a method that parses a JSON string and converts it to a JavaScript object or value. It is commonly used for receiving and processing JSON data from a server. The method can also take a reviver function as an argument, which allows you to transform the values before they are returned.",
        "example": "const jsonString = '{\"name\":\"Alice\",\"age\":25}';\nconst obj = JSON.parse(jsonString);\nconsole.log(obj); // { name: 'Alice', age: 25 }"
    },
    {
        "title": "What is the difference between `var`, `let`, and `const`?",
        "category": "JavaScript",
        "description": "`var` is function-scoped, while `let` and `const` are block-scoped; `const` also requires an initial value and prevents reassignment.",
        "tags": "var,let,const,scope",
        "paid": true,
        "answer": "`var` is function-scoped, meaning it is scoped to the nearest function block, and can be redeclared and reassigned. `let` and `const` are block-scoped, meaning they are scoped to the nearest enclosing block, such as a loop or conditional statement. `let` can be reassigned but not redeclared, while `const` must be initialized at the time of declaration and cannot be reassigned. These differences are important for managing variable scope and avoiding bugs in your code.",
        "example": "function example() {\n  var x = 1;\n  if (true) {\n    var x = 2; // Same variable\n    console.log(x); // 2\n  }\n  console.log(x); // 2\n}\n\nfunction example() {\n  let y = 1;\n  if (true) {\n    let y = 2; // Different variable\n    console.log(y); // 2\n  }\n  console.log(y); // 1\n}\n\nconst z = 3;\nz = 4; // Error: Assignment to constant variable."
    },
    {
        "title": "What is the difference between synchronous and asynchronous code?",
        "category": "JavaScript",
        "description": "Synchronous code is executed sequentially, while asynchronous code allows other operations to continue while waiting for tasks to complete.",
        "tags": "synchronous,asynchronous,event loop",
        "paid": true,
        "answer": "Synchronous code is executed line by line, with each operation waiting for the previous one to complete before proceeding. Asynchronous code, on the other hand, allows certain operations to continue running in the background without blocking the execution of subsequent code. This is typically managed with callbacks, promises, or async/await, enabling more efficient use of time, especially for operations like network requests, file I/O, or timers.",
        "example": "console.log('Synchronous');\n\nsetTimeout(() => {\n  console.log('Asynchronous');\n}, 1000);\n\nconsole.log('Still synchronous');\n\n// Output:\n// Synchronous\n// Still synchronous\n// Asynchronous (after 1 second)"
    },
    {
        "title": "What is the `call` method in JavaScript?",
        "category": "JavaScript",
        "description": "`call` is used to invoke a function with a specific `this` value and individual arguments.",
        "tags": "call,function,this",
        "paid": true,
        "answer": "The `call` method is used to invoke a function with a specific `this` value and individual arguments. It allows you to call a function and explicitly set what `this` should refer to within the function. This is particularly useful for borrowing methods from other objects or functions.",
        "example": "function greet() {\n  console.log(`Hello, ${this.name}`);\n}\n\nconst person = { name: 'Alice' };\ngreet.call(person); // 'Hello, Alice'"
    },
    {
        "title": "What is the `apply` method in JavaScript?",
        "category": "JavaScript",
        "description": "`apply` is similar to `call`, but it takes an array of arguments instead of individual arguments.",
        "tags": "apply,function,this",
        "paid": true,
        "answer": "The `apply` method is similar to `call`, but it takes an array of arguments instead of individual arguments. This method is useful when you want to pass an array of arguments to a function while explicitly setting the `this` value. It's particularly useful for functions that accept multiple arguments, as you can pass them in a single array.",
        "example": "function sum(a, b, c) {\n  return a + b + c;\n}\n\nconst numbers = [1, 2, 3];\n const result = sum.apply(null, numbers);\nconsole.log(result); // 6"
    },
    {
        "title": "What is `bind` in JavaScript?",
        "category": "JavaScript",
        "description": "`bind` is used to create a new function with a specific `this` value and optional initial arguments.",
        "tags": "bind,function,this",
        "paid": true,
        "answer": "The `bind` method creates a new function that, when called, has its `this` keyword set to the provided value. You can also provide initial arguments that will be prepended to any arguments passed when the function is called. Unlike `call` and `apply`, which invoke the function immediately, `bind` returns a new function that can be invoked later with the bound context and arguments.",
        "example": "const module = {\n  x: 42,\n  getX: function() {\n    return this.x;\n  }\n};\n\nconst retrieveX = module.getX;\nconsole.log(retrieveX()); // undefined, because `this` is not bound\n\nconst boundGetX = retrieveX.bind(module);\nconsole.log(boundGetX()); // 42, because `this` is now bound to `module`"
    },
    {
        "title": "What is the `typeof` operator in JavaScript?",
        "category": "JavaScript",
        "description": "`typeof` is an operator that returns the type of a variable or expression.",
        "tags": "typeof,type,operator",
        "paid": true,
        "answer": "`typeof` is an operator in JavaScript that returns a string indicating the type of a given variable or expression. It is often used for type-checking and debugging. The `typeof` operator can identify various types, including `undefined`, `object`, `function`, `string`, `number`, `boolean`, and `symbol`. However, it has some quirks, such as returning `object` for `null`, which should be noted when using it.",
        "example": "console.log(typeof 'hello'); // 'string'\nconsole.log(typeof 42); // 'number'\nconsole.log(typeof true); // 'boolean'\nconsole.log(typeof undefined); // 'undefined'\nconsole.log(typeof {}); // 'object'\nconsole.log(typeof null); // 'object' (quirk)"
    },
    {
        "title": "What is the `instanceof` operator in JavaScript?",
        "category": "JavaScript",
        "description": "`instanceof` checks whether an object is an instance of a specific class or constructor.",
        "tags": "instanceof,object,class,constructor",
        "paid": true,
        "answer": "`instanceof` is an operator in JavaScript that checks whether an object is an instance of a specific class or constructor function. It returns `true` if the object is an instance of the class or constructor, and `false` otherwise. This operator is useful for checking the prototype chain and determining if an object inherits from a particular class or constructor.",
        "example": "function Person(name) {\n  this.name = name;\n}\n\nconst alice = new Person('Alice');\nconsole.log(alice instanceof Person); // true\nconsole.log(alice instanceof Object); // true\nconsole.log(alice instanceof Array); // false"
    },
    {
        "title": "What is the difference between synchronous and asynchronous JavaScript?",
        "category": "JavaScript",
        "description": "Synchronous operations block the execution of subsequent code, while asynchronous operations allow code to run without waiting for previous operations to complete.",
        "tags": "synchronous,asynchronous,event loop,blocking",
        "paid": true,
        "answer": "In synchronous JavaScript, operations are executed one after another, meaning each operation must complete before the next one begins. This can lead to blocking if an operation takes a long time to complete. Asynchronous JavaScript allows for operations to run in the background, freeing up the main thread to continue executing other code. Callbacks, Promises, and async/await are common ways to handle asynchronous operations.",
        "example": "// Synchronous example\nconsole.log('Start');\nfor (let i = 0; i < 1000000000; i++) {} // Blocking loop\nconsole.log('End');\n\n// Asynchronous example\nconsole.log('Start');\nsetTimeout(() => console.log('Async operation complete'), 1000);\nconsole.log('End');"
    },
    {
        "title": "What is the use of the `bind` method in JavaScript?",
        "category": "JavaScript",
        "description": "The `bind` method creates a new function with a specific `this` value.",
        "tags": "bind,this,method,context",
        "paid": true,
        "answer": "The `bind` method creates a new function that, when called, has its `this` keyword set to the provided value. It also allows you to preset arguments for the function, which are prepended to the arguments passed when the function is called. This is particularly useful when you want to pass a method as a callback but need to ensure it uses the correct `this` context.",
        "example": "const person = {\n  name: 'Alice',\n  greet() {\n    console.log(`Hello, ${this.name}`);\n  }\n};\n\nconst greet = person.greet.bind(person);\ngreet(); // Hello, Alice\n\nconst greetAnother = person.greet.bind({ name: 'Bob' });\ngreetAnother(); // Hello, Bob"
    },
    {
        "title": "What are JavaScript modules?",
        "category": "JavaScript",
        "description": "Modules are reusable pieces of code that can be exported from one script and imported for use in another script.",
        "tags": "modules,import,export,ES6",
        "paid": true,
        "answer": "JavaScript modules allow you to encapsulate code in separate files that can be imported and reused in other parts of your application. This helps in organizing code and avoiding global namespace pollution. You can export functions, objects, or variables from one module and import them into another using the `import` and `export` keywords.",
        "example": "// math.js\nexport function add(a, b) {\n  return a + b;\n}\n\n// main.js\nimport { add } from './math.js';\nconsole.log(add(2, 3)); // 5"
    },
    {
        "title": "What is the spread operator in JavaScript?",
        "category": "JavaScript",
        "description": "The spread operator allows an iterable to be expanded in places where multiple elements are expected.",
        "tags": "spread operator,ES6,array,object",
        "paid": true,
        "answer": "The spread operator (`...`) allows an iterable (such as an array or object) to be expanded into individual elements. It is commonly used to copy arrays or objects, combine multiple arrays or objects, or pass elements of an array as arguments to a function.",
        "example": "const arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst combined = [...arr1, ...arr2];\nconsole.log(combined); // [1, 2, 3, 4, 5, 6]\n\nconst obj1 = { a: 1, b: 2 };\nconst obj2 = { c: 3, d: 4 };\nconst combinedObj = { ...obj1, ...obj2 };\nconsole.log(combinedObj); // { a: 1, b: 2, c: 3, d: 4 }"
    },
    {
        "title": "What is destructuring in JavaScript?",
        "category": "JavaScript",
        "description": "Destructuring is a syntax that allows you to extract values from arrays or properties from objects into distinct variables.",
        "tags": "destructuring,ES6,array,object",
        "paid": true,
        "answer": "Destructuring is a convenient way to extract multiple properties from an object or elements from an array into separate variables. This can make your code cleaner and more readable, especially when dealing with complex data structures.",
        "example": "// Array destructuring\nconst [a, b] = [1, 2];\nconsole.log(a, b); // 1 2\n\n// Object destructuring\nconst { name, age } = { name: 'Alice', age: 25 };\nconsole.log(name, age); // Alice 25"
    },
    {
        "title": "What is a higher-order function in JavaScript?",
        "category": "JavaScript",
        "description": "A higher-order function is a function that takes another function as an argument or returns a function as a result.",
        "tags": "higher-order function,callback,function",
        "paid": true,
        "answer": "Higher-order functions are functions that can take other functions as arguments, return them, or both. This allows for functional programming techniques such as function composition, currying, and creating reusable utility functions like `map`, `filter`, and `reduce`.",
        "example": "function higherOrderFunction(callback) {\n  return function(x) {\n    return callback(x);\n  };\n}\n\nconst double = higherOrderFunction(x => x * 2);\nconsole.log(double(5)); // 10"
    },
    {
        "title": "What is `NaN` in JavaScript?",
        "category": "JavaScript",
        "description": "`NaN` stands for 'Not-a-Number' and is a value that results from an invalid or undefined mathematical operation.",
        "tags": "NaN,type,number",
        "paid": true,
        "answer": "`NaN` is a special value in JavaScript that represents a value that is not a legal number. It is returned when a mathematical operation fails or when a function that expects a number receives a non-numeric value. Interestingly, `NaN` is the only value in JavaScript that is not equal to itself, making it easy to check if a value is `NaN` using `Number.isNaN()`.",
        "example": "console.log(0 / 0); // NaN\nconsole.log(parseInt('abc')); // NaN\n\nconsole.log(NaN === NaN); // false\nconsole.log(Number.isNaN(NaN)); // true"
    },
    {
        "title": "How does JavaScript handle floating-point precision?",
        "category": "JavaScript",
        "description": "JavaScript uses double-precision floating-point format, which can lead to precision issues.",
        "tags": "floating-point,precision,number",
        "paid": true,
        "answer": "JavaScript uses the IEEE 754 double-precision floating-point format to represent numbers. This can lead to precision issues when performing arithmetic operations with decimals. For example, adding 0.1 and 0.2 in JavaScript results in a value slightly different from 0.3. To avoid such issues, developers often use techniques like rounding to a fixed number of decimal places.",
        "example": "console.log(0.1 + 0.2); // 0.30000000000000004\n\nconsole.log((0.1 + 0.2).toFixed(1)); // '0.3'"
    },
    {
        "title": "What is the difference between `call`, `apply`, and `bind`?",
        "category": "JavaScript",
        "description": "`call`, `apply`, and `bind` are methods to set the `this` context of a function.",
        "tags": "call,apply,bind,this",
        "paid": true,
        "answer": "`call` and `apply` are used to invoke functions with a specific `this` context. The difference is that `call` takes arguments separately, while `apply` takes them as an array. `bind` creates a new function with a bound `this` context that can be invoked later.",
        "example": "function greet(greeting) {\n  console.log(`${greeting}, ${this.name}`);\n}\n\nconst person = { name: 'Alice' };\n\n// Using call\ngreet.call(person, 'Hello'); // Hello, Alice\n\n// Using apply\ngreet.apply(person, ['Hi']); // Hi, Alice\n\n// Using bind\nconst boundGreet = greet.bind(person, 'Hey');\nboundGreet(); // Hey, Alice"
    },
    {
        "title": "What is the purpose of the `typeof` operator in JavaScript?",
        "category": "JavaScript",
        "description": "`typeof` is used to determine the type of a variable or expression.",
        "tags": "typeof,type,operator",
        "paid": true,
        "answer": "The `typeof` operator returns a string indicating the type of the operand. It can be used to check if a variable is a string, number, boolean, object, function, or undefined. However, it has some quirks, such as returning 'object' for null values.",
        "example": "console.log(typeof 'Hello'); // 'string'\nconsole.log(typeof 42); // 'number'\nconsole.log(typeof true); // 'boolean'\nconsole.log(typeof {}); // 'object'\nconsole.log(typeof function() {}); // 'function'\nconsole.log(typeof null); // 'object'"
    },
    {
        "title": "What is the event loop in JavaScript?",
        "category": "JavaScript",
        "description": "The event loop is responsible for managing the execution of code, event handling, and asynchronous operations.",
        "tags": "event loop,asynchronous,callback,concurrency",
        "paid": true,
        "answer": "The event loop is a core mechanism of JavaScript that handles asynchronous operations. It continuously checks the call stack to see if there is any function that needs to run. If the call stack is empty, the event loop will look at the task queue to see if there are any pending tasks (like callbacks from asynchronous operations) that need to be executed. This allows JavaScript to perform non-blocking operations despite being single-threaded.",
        "example": "console.log('Start');\n\nsetTimeout(() => {\n  console.log('Timeout');\n}, 0);\n\nconsole.log('End');\n\n// Output:\n// Start\n// End\n// Timeout"
    },
    {
        "title": "What is a promise in JavaScript?",
        "category": "JavaScript",
        "description": "A promise is an object representing the eventual completion or failure of an asynchronous operation.",
        "tags": "promise,asynchronous,callback",
        "paid": true,
        "answer": "A promise is an object that represents the eventual outcome of an asynchronous operation. It can be in one of three states: pending, fulfilled, or rejected. Promises allow you to write asynchronous code in a more synchronous-like manner, avoiding callback hell. You can chain `.then()` and `.catch()` methods to handle the results of a promise.",
        "example": "const promise = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('Success!');\n  }, 1000);\n});\n\npromise.then(result => {\n  console.log(result); // 'Success!'\n}).catch(error => {\n  console.log(error);\n});"
    },
    {
        "title": "What is the difference between `==` and `===` in JavaScript?",
        "category": "JavaScript",
        "description": "`==` checks for value equality, while `===` checks for both value and type equality.",
        "tags": "equality,comparison,==,===",
        "paid": true,
        "answer": "`==` is the loose equality operator, which performs type coercion before comparing values. This means that it tries to convert the operands to the same type before making the comparison. `===` is the strict equality operator, which does not perform type coercion and only returns true if both the value and type are the same.",
        "example": "console.log(2 == '2'); // true (type coercion)\nconsole.log(2 === '2'); // false (different types)\nconsole.log(null == undefined); // true\nconsole.log(null === undefined); // false"
    },
    {
        "title": "What is a callback function in JavaScript?",
        "category": "JavaScript",
        "description": "A callback function is a function passed as an argument to another function to be executed later.",
        "tags": "callback,function,asynchronous",
        "paid": true,
        "answer": "A callback function is a function that is passed as an argument to another function and is executed after some operation has been completed. Callbacks are commonly used in asynchronous programming, such as when handling events or performing operations like reading files or making network requests.",
        "example": "function fetchData(callback) {\n  setTimeout(() => {\n    callback('Data fetched!');\n  }, 1000);\n}\n\nfetchData(result => {\n  console.log(result); // 'Data fetched!'\n});"
    },
    {
        "title": "What is the purpose of the `async` and `await` keywords?",
        "category": "JavaScript",
        "description": "`async` and `await` simplify working with promises by allowing asynchronous code to be written in a synchronous style.",
        "tags": "async,await,promise,asynchronous",
        "paid": true,
        "answer": "`async` is used to declare an asynchronous function, which automatically returns a promise. The `await` keyword is used inside `async` functions to pause execution until a promise is resolved or rejected, making asynchronous code easier to read and write. This approach avoids the need for chaining `.then()` and `.catch()` methods.",
        "example": "async function fetchData() {\n  try {\n    const data = await fetch('https://api.example.com/data');\n    const json = await data.json();\n    console.log(json);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n}\n\nfetchData();"
    },
    {
        "title": "What is hoisting in JavaScript?",
        "category": "JavaScript",
        "description": "Hoisting refers to the behavior of moving variable and function declarations to the top of their containing scope.",
        "tags": "hoisting,variable,function,scope",
        "paid": true,
        "answer": "Hoisting is JavaScript's default behavior of moving variable and function declarations to the top of their containing scope during the compilation phase. This means you can use functions and variables before they are actually declared in the code. However, only the declarations are hoisted, not the initializations. `let` and `const` are hoisted as well, but they are not initialized, leading to a `ReferenceError` if accessed before declaration.",
        "example": "console.log(hoistedVar); // undefined\nvar hoistedVar = 'I am hoisted!';\n\nhoistedFunction(); // 'I am hoisted!'\nfunction hoistedFunction() {\n  console.log('I am hoisted!');\n}\n\nconsole.log(notHoistedVar); // ReferenceError: notHoistedVar is not defined\nlet notHoistedVar = 'I am not hoisted!';"
    },
    {
        "title": "What is the `this` keyword in JavaScript?",
        "category": "JavaScript",
        "description": "`this` refers to the object that is executing the current function.",
        "tags": "this,context,function,object",
        "paid": true,
        "answer": "In JavaScript, the `this` keyword refers to the object that is currently executing the function. The value of `this` depends on how a function is called. In a method, `this` refers to the owner object. In a regular function or arrow function, `this` refers to the global object (`window` in browsers), unless in strict mode, where it is `undefined`. In event handlers, `this` refers to the element that received the event.",
        "example": "const obj = {\n  name: 'Alice',\n  greet() {\n    console.log(`Hello, ${this.name}`);\n  }\n};\n\nobj.greet(); // 'Hello, Alice'\n\nfunction sayName() {\n  console.log(this.name);\n}\n\nconst anotherObj = { name: 'Bob' };\nsayName.call(anotherObj); // 'Bob'"
    },
    {
        "title": "What is the `new` keyword in JavaScript?",
        "category": "JavaScript",
        "description": "`new` is used to create an instance of an object that has a constructor function.",
        "tags": "new,constructor,function,object",
        "paid": true,
        "answer": "The `new` keyword in JavaScript is used to create an instance of an object that is defined by a constructor function. When you use `new`, it creates a new object, sets the `this` context of the constructor function to the new object, and returns the new object if the constructor doesn't return anything else explicitly.",
        "example": "function Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\nconst person = new Person('Alice', 25);\nconsole.log(person.name); // 'Alice'\nconsole.log(person.age); // 25"
    },
    {
        "title": "What is the difference between `null` and `undefined`?",
        "category": "JavaScript",
        "description": "`null` is an assigned value representing no value, while `undefined` means a variable has been declared but not assigned a value.",
        "tags": "null,undefined,type",
        "paid": true,
        "answer": "`null` is an assigned value that represents the intentional absence of any object value. It is often used to signify 'no value' or 'empty.' On the other hand, `undefined` means that a variable has been declared but has not yet been assigned a value. `undefined` is the default value for uninitialized variables.",
        "example": "let a;\nconsole.log(a); // undefined\n\nlet b = null;\nconsole.log(b); // null"
    },
    {
        "title": "What is the `prototype` in JavaScript?",
        "category": "JavaScript",
        "description": "The `prototype` is an object from which other objects inherit properties and methods.",
        "tags": "prototype,inheritance,object",
        "paid": true,
        "answer": "In JavaScript, every function has a `prototype` property, which is an object that is shared among all instances created by that function. The `prototype` object is used to implement inheritance, allowing objects to inherit properties and methods from other objects. When you access a property or method on an object, JavaScript first looks at the object itself, and if it doesn't find the property or method, it looks at the object's prototype chain.",
        "example": "function Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.sayHello = function() {\n  console.log(`Hello, my name is ${this.name}`);\n};\n\nconst alice = new Person('Alice');\nalice.sayHello(); // 'Hello, my name is Alice'"
    },
    {
        "title": "What is an Immediately Invoked Function Expression (IIFE)?",
        "category": "JavaScript",
        "description": "An IIFE is a function that is executed immediately after it is defined.",
        "tags": "IIFE,function,scope",
        "paid": true,
        "answer": "An Immediately Invoked Function Expression (IIFE) is a function that is defined and executed immediately after its creation. IIFEs are often used to create a private scope, avoiding polluting the global namespace. This pattern is commonly used in JavaScript to encapsulate code and create modular code structures.",
        "example": "(function() {\n  console.log('This is an IIFE');\n})();"
    },
    {
        "title": "What are arrow functions in JavaScript?",
        "category": "JavaScript",
        "description": "Arrow functions are a shorthand syntax for writing functions in JavaScript.",
        "tags": "arrow function,ES6,this",
        "paid": true,
        "answer": "Arrow functions are a concise way to write functions in JavaScript introduced in ES6. They use the `=>` syntax and have some differences from regular functions, such as not having their own `this`, `arguments`, `super`, or `new.target` bindings. Arrow functions are often used in situations where a shorter syntax is desirable, and they are especially useful for callbacks.",
        "example": "const add = (a, b) => a + b;\nconsole.log(add(2, 3)); // 5\n\nconst greet = name => `Hello, ${name}`;\nconsole.log(greet('Alice')); // 'Hello, Alice'"
    },
    {
        "title": "What is the `arguments` object in JavaScript?",
        "category": "JavaScript",
        "description": "The `arguments` object is an array-like object that contains the arguments passed to a function.",
        "tags": "arguments,function,array-like",
        "paid": true,
        "answer": "The `arguments` object is an array-like object accessible inside all non-arrow functions. It contains the values of the arguments passed to that function. Although it behaves like an array, it does not have all the methods of an array, such as `forEach` or `map`. The `arguments` object is useful when you need to work with a function's parameters but don't know how many will be passed.",
        "example": "function sum() {\n  let total = 0;\n  for (let i = 0; i < arguments.length; i++) {\n    total += arguments[i];\n  }\n  return total;\n}\n\nconsole.log(sum(1, 2, 3, 4)); // 10"
    },
    {
        "title": "What is the `fetch` API?",
        "category": "JavaScript",
        "description": "`fetch` is a modern API for making network requests in JavaScript.",
        "tags": "fetch,API,network,asynchronous",
        "paid": true,
        "answer": "The `fetch` API is a modern interface that allows you to make network requests similar to `XMLHttpRequest` but with a more powerful and flexible feature set. It returns a promise that resolves to the `Response` object representing the response to the request. The `fetch` API is widely used for making HTTP requests and handling responses in a more readable and manageable way.",
        "example": "fetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));"
    },
    {
        "title": "What is the difference between `Array.map()` and `Array.forEach()`?",
        "category": "JavaScript",
        "description": "`map` returns a new array with transformed elements, while `forEach` simply iterates over the array without returning a value.",
        "tags": "map,forEach,array,iteration",
        "paid": true,
        "answer": "`Array.map()` creates a new array with the results of calling a provided function on every element in the array. It is used when you want to transform the elements of an array and obtain a new array with the transformed values. `Array.forEach()`, on the other hand, executes a provided function once for each array element but does not return a new array. It is used when you want to perform side effects or operations without needing a new array.",
        "example": "const numbers = [1, 2, 3, 4];\n\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6, 8]\n\nnumbers.forEach(num => console.log(num * 2));\n// Output: 2 4 6 8"
    },
    {
        "title": "What is the `reduce` method in JavaScript?",
        "category": "JavaScript",
        "description": "`reduce` is a method that reduces an array to a single value by iterating over the elements and applying a callback.",
        "tags": "reduce,array,iteration,accumulator",
        "paid": true,
        "answer": "`reduce` is a powerful method that allows you to reduce an array to a single value by executing a reducer function on each element of the array. The reducer function takes an accumulator and the current value as arguments and returns a new accumulator value. This method is often used for operations like summing all the elements of an array or building an object from an array of data.",
        "example": "const numbers = [1, 2, 3, 4];\n\nconst sum = numbers.reduce((acc, num) => acc + num, 0);\nconsole.log(sum); // 10\n\nconst product = numbers.reduce((acc, num) => acc * num, 1);\nconsole.log(product); // 24"
    },
    {
        "title": "What are template literals in JavaScript?",
        "category": "JavaScript",
        "description": "Template literals are string literals that allow embedded expressions and multi-line strings.",
        "tags": "template literals,ES6,string,interpolation",
        "paid": true,
        "answer": "Template literals are a feature introduced in ES6 that allow for easier string creation and embedding of expressions. They are enclosed by backticks (``) instead of quotes, and they allow for multi-line strings as well as embedding expressions using `${}`. This makes string concatenation more readable and easier to manage.",
        "example": "const name = 'Alice';\nconst greeting = `Hello, ${name}!`;\nconsole.log(greeting); // 'Hello, Alice!'\n\nconst multiLineString = `This is a string\nthat spans multiple lines.`;\nconsole.log(multiLineString);\n// 'This is a string\n// that spans multiple lines.'"
    },
    {
        "title": "What is the `Object.assign()` method?",
        "category": "JavaScript",
        "description": "`Object.assign()` is used to copy the values of all enumerable properties from one or more source objects to a target object.",
        "tags": "Object.assign,object,copy,merge",
        "paid": true,
        "answer": "`Object.assign()` is a method used to copy the values of all enumerable properties from one or more source objects to a target object. It returns the target object, which is now modified to include the properties from the source objects. This method is commonly used for cloning objects or merging multiple objects into one.",
        "example": "const target = { a: 1 };\nconst source1 = { b: 2 };\nconst source2 = { c: 3 };\n\nconst result = Object.assign(target, source1, source2);\nconsole.log(result); // { a: 1, b: 2, c: 3 }\nconsole.log(target); // { a: 1, b: 2, c: 3 }"
    },
    {
        "title": "What is `destructuring` in JavaScript?",
        "category": "JavaScript",
        "description": "Destructuring is a syntax for unpacking values from arrays or properties from objects into distinct variables.",
        "tags": "destructuring,array,object,ES6",
        "paid": true,
        "answer": "Destructuring is a syntax introduced in ES6 that allows you to unpack values from arrays or properties from objects into distinct variables. This makes it easier to work with complex data structures and extract specific values or properties in a concise and readable manner. Destructuring can be applied to arrays, objects, and function parameters.",
        "example": "const [a, b] = [1, 2];\nconsole.log(a); // 1\nconsole.log(b); // 2\n\nconst { name, age } = { name: 'Alice', age: 25 };\nconsole.log(name); // 'Alice'\nconsole.log(age); // 25"
    },
    {
        "title": "What is the `setTimeout()` function in JavaScript?",
        "category": "JavaScript",
        "description": "`setTimeout()` is used to execute a function after a specified delay.",
        "tags": "setTimeout,asynchronous,timer",
        "paid": true,
        "answer": "`setTimeout()` is a function that allows you to execute a callback function after a specified delay, measured in milliseconds. It is commonly used for delaying the execution of code, simulating asynchronous operations, or creating timed events. The function returns a unique identifier that can be used to cancel the timeout with `clearTimeout()`.",
        "example": "setTimeout(() => {\n  console.log('This message is displayed after 2 seconds');\n}, 2000);"
    },
    {
        "title": "What is the `setInterval()` function in JavaScript?",
        "category": "JavaScript",
        "description": "`setInterval()` is used to repeatedly execute a function at specified intervals.",
        "tags": "setInterval,asynchronous,timer",
        "paid": true,
        "answer": "`setInterval()` is a function that allows you to repeatedly execute a callback function at a specified interval, measured in milliseconds. It continues to execute the function at the given intervals until it is explicitly stopped with `clearInterval()`. This function is useful for creating recurring events or polling operations.",
        "example": "const intervalId = setInterval(() => {\n  console.log('This message is displayed every 2 seconds');\n}, 2000);\n\n// To stop the interval\nclearInterval(intervalId);"
    },
    {
        "title": "What is `JSON.stringify()`?",
        "category": "JavaScript",
        "description": "`JSON.stringify()` is used to convert a JavaScript object or value to a JSON string.",
        "tags": "JSON,stringify,serialization",
        "paid": true,
        "answer": "`JSON.stringify()` is a method that converts a JavaScript object or value to a JSON string. It is commonly used for sending data to a server or saving data in a storage format. The method can also take additional arguments for controlling the stringification process, such as a replacer function or an array of properties to include, and a space parameter for formatting.",
        "example": "const obj = { name: 'Alice', age: 25 };\nconst jsonString = JSON.stringify(obj);\nconsole.log(jsonString); // '{\"name\":\"Alice\",\"age\":25}'"
    },
    {
        "title": "What is `JSON.parse()`?",
        "category": "JavaScript",
        "description": "`JSON.parse()` is used to convert a JSON string to a JavaScript object.",
        "tags": "JSON,parse,deserialization",
        "paid": true,
        "answer": "`JSON.parse()` is a method that parses a JSON string and converts it to a JavaScript object or value. It is commonly used for receiving and processing JSON data from a server. The method can also take a reviver function as an argument, which allows you to transform the values before they are returned.",
        "example": "const jsonString = '{\"name\":\"Alice\",\"age\":25}';\nconst obj = JSON.parse(jsonString);\nconsole.log(obj); // { name: 'Alice', age: 25 }"
    },
    {
        "title": "What is the difference between `var`, `let`, and `const`?",
        "category": "JavaScript",
        "description": "`var` is function-scoped, while `let` and `const` are block-scoped; `const` also requires an initial value and prevents reassignment.",
        "tags": "var,let,const,scope",
        "paid": true,
        "answer": "`var` is function-scoped, meaning it is scoped to the nearest function block, and can be redeclared and reassigned. `let` and `const` are block-scoped, meaning they are scoped to the nearest enclosing block, such as a loop or conditional statement. `let` can be reassigned but not redeclared, while `const` must be initialized at the time of declaration and cannot be reassigned. These differences are important for managing variable scope and avoiding bugs in your code.",
        "example": "function example() {\n  var x = 1;\n  if (true) {\n    var x = 2; // Same variable\n    console.log(x); // 2\n  }\n  console.log(x); // 2\n}\n\nfunction example() {\n  let y = 1;\n  if (true) {\n    let y = 2; // Different variable\n    console.log(y); // 2\n  }\n  console.log(y); // 1\n}\n\nconst z = 3;\nz = 4; // Error: Assignment to constant variable."
    },
    {
        "title": "What is the difference between synchronous and asynchronous code?",
        "category": "JavaScript",
        "description": "Synchronous code is executed sequentially, while asynchronous code allows other operations to continue while waiting for tasks to complete.",
        "tags": "synchronous,asynchronous,event loop",
        "paid": true,
        "answer": "Synchronous code is executed line by line, with each operation waiting for the previous one to complete before proceeding. Asynchronous code, on the other hand, allows certain operations to continue running in the background without blocking the execution of subsequent code. This is typically managed with callbacks, promises, or async/await, enabling more efficient use of time, especially for operations like network requests, file I/O, or timers.",
        "example": "console.log('Synchronous');\n\nsetTimeout(() => {\n  console.log('Asynchronous');\n}, 1000);\n\nconsole.log('Still synchronous');\n\n// Output:\n// Synchronous\n// Still synchronous\n// Asynchronous (after 1 second)"
    },
    {
        "title": "What is the `call` method in JavaScript?",
        "category": "JavaScript",
        "description": "`call` is used to invoke a function with a specific `this` value and individual arguments.",
        "tags": "call,function,this",
        "paid": true,
        "answer": "The `call` method is used to invoke a function with a specific `this` value and individual arguments. It allows you to call a function and explicitly set what `this` should refer to within the function. This is particularly useful for borrowing methods from other objects or functions.",
        "example": "function greet() {\n  console.log(`Hello, ${this.name}`);\n}\n\nconst person = { name: 'Alice' };\ngreet.call(person); // 'Hello, Alice'"
    },
    {
        "title": "What is the `apply` method in JavaScript?",
        "category": "JavaScript",
        "description": "`apply` is similar to `call`, but it takes an array of arguments instead of individual arguments.",
        "tags": "apply,function,this",
        "paid": true,
        "answer": "The `apply` method is similar to `call`, but it takes an array of arguments instead of individual arguments. This method is useful when you want to pass an array of arguments to a function while explicitly setting the `this` value. It's particularly useful for functions that accept multiple arguments, as you can pass them in a single array.",
        "example": "function sum(a, b, c) {\n  return a + b + c;\n}\n\nconst numbers = [1, 2, 3];\nconst result = sum.apply(null, numbers);\nconsole.log(result); // 6"
    },
    {
        "title": "What is `bind` in JavaScript?",
        "category": "JavaScript",
        "description": "`bind` is used to create a new function with a specific `this` value and optional initial arguments.",
        "tags": "bind,function,this",
        "paid": true,
        "answer": "The `bind` method creates a new function that, when called, has its `this` keyword set to the provided value. You can also provide initial arguments that will be prepended to any arguments passed when the function is called. Unlike `call` and `apply`, which invoke the function immediately, `bind` returns a new function that can be invoked later with the bound context and arguments.",
        "example": "const module = {\n  x: 42,\n  getX: function() {\n    return this.x;\n  }\n};\n\nconst retrieveX = module.getX;\nconsole.log(retrieveX()); // undefined, because `this` is not bound\n\nconst boundGetX = retrieveX.bind(module);\nconsole.log(boundGetX()); // 42, because `this` is now bound to `module`"
    },
    {
        "title": "What is the `typeof` operator in JavaScript?",
        "category": "JavaScript",
        "description": "`typeof` is an operator that returns the type of a variable or expression.",
        "tags": "typeof,type,operator",
        "paid": true,
        "answer": "`typeof` is an operator in JavaScript that returns a string indicating the type of a given variable or expression. It is often used for type-checking and debugging. The `typeof` operator can identify various types, including `undefined`, `object`, `function`, `string`, `number`, `boolean`, and `symbol`. However, it has some quirks, such as returning `object` for `null`, which should be noted when using it.",
        "example": "console.log(typeof 'hello'); // 'string'\nconsole.log(typeof 42); // 'number'\nconsole.log(typeof true); // 'boolean'\nconsole.log(typeof undefined); // 'undefined'\nconsole.log(typeof {}); // 'object'\nconsole.log(typeof null); // 'object' (quirk)"
    },
    {
        "title": "What is the `instanceof` operator in JavaScript?",
        "category": "JavaScript",
        "description": "`instanceof` checks whether an object is an instance of a specific class or constructor.",
        "tags": "instanceof,object,class,constructor",
        "paid": true,
        "answer": "`instanceof` is an operator in JavaScript that checks whether an object is an instance of a specific class or constructor function. It returns `true` if the object is an instance of the class or constructor, and `false` otherwise. This operator is useful for checking the prototype chain and determining if an object inherits from a particular class or constructor.",
        "example": "function Person(name) {\n  this.name = name;\n}\n\nconst alice = new Person('Alice');\nconsole.log(alice instanceof Person); // true\nconsole.log(alice instanceof Object); // true\nconsole.log(alice instanceof Array); // false"
    },
    {
        "title": "What is the `map` method in JavaScript?",
        "category": "JavaScript",
        "description": "`map` creates a new array by applying a function to each element of an existing array.",
        "tags": "map,array,higher-order function",
        "paid": true,
        "answer": "The `map` method is a higher-order function in JavaScript that creates a new array by applying a provided function to each element of the existing array. The function you pass to `map` is called for each element, and the result of this function is added to the new array. The original array is not modified.",
        "example": "const numbers = [1, 2, 3, 4];\nconst doubled = numbers.map(n => n * 2);\nconsole.log(doubled); // [2, 4, 6, 8]"
    },
    {
        "title": "What is the `filter` method in JavaScript?",
        "category": "JavaScript",
        "description": "`filter` creates a new array with elements that pass a specific test.",
        "tags": "filter,array,higher-order function",
        "paid": true,
        "answer": "The `filter` method is a higher-order function in JavaScript that creates a new array containing all elements of the original array that pass a test implemented by a provided function. The function is called for each element in the array, and if it returns `true`, the element is included in the new array. The original array is not modified.",
        "example": "const numbers = [1, 2, 3, 4];\nconst evenNumbers = numbers.filter(n => n % 2 === 0);\nconsole.log(evenNumbers); // [2, 4]"
    },
    {
        "title": "What is the `reduce` method in JavaScript?",
        "category": "JavaScript",
        "description": "`reduce` applies a function to each element of an array to reduce it to a single value.",
        "tags": "reduce,array,higher-order function",
        "paid": true,
        "answer": "The `reduce` method is a higher-order function in JavaScript that applies a function against an accumulator and each element of the array to reduce it to a single value. The function takes four arguments: the accumulator, the current value, the current index, and the array itself. The result of the function is stored in the accumulator, which is returned as the final result.",
        "example": "const numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, current) => acc + current, 0);\nconsole.log(sum); // 10"
    },
    {
        "title": "What is the `forEach` method in JavaScript?",
        "category": "JavaScript",
        "description": "`forEach` executes a provided function once for each array element.",
        "tags": "forEach,array,iteration",
        "paid": true,
        "answer": "The `forEach` method is a higher-order function in JavaScript that executes a provided function once for each element in an array. It is commonly used for iterating over arrays and performing side effects, such as logging or modifying elements. Unlike `map`, `filter`, or `reduce`, `forEach` does not return a new array; instead, it returns `undefined`.",
        "example": "const numbers = [1, 2, 3, 4];\nnumbers.forEach(n => console.log(n));\n// Output:\n// 1\n// 2\n// 3\n// 4"
    },
    {
        "title": "What is the `find` method in JavaScript?",
        "category": "JavaScript",
        "description": "`find` returns the first element in an array that satisfies a provided test function.",
        "tags": "find,array,higher-order function",
        "paid": true,
        "answer": "The `find` method is a higher-order function in JavaScript that returns the first element in an array that satisfies a provided test function. If no element passes the test, `find` returns `undefined`. This method is useful when you need to locate a specific element in an array.",
        "example": "const numbers = [1, 2, 3, 4];\nconst firstEven = numbers.find(n => n % 2 === 0);\nconsole.log(firstEven); // 2"
    },
    {
        "title": "What is the `findIndex` method in JavaScript?",
        "category": "JavaScript",
        "description": "`findIndex` returns the index of the first element in an array that satisfies a provided test function.",
        "tags": "findIndex,array,higher-order function",
        "paid": true,
        "answer": "The `findIndex` method is a higher-order function in JavaScript that returns the index of the first element in an array that satisfies a provided test function. If no element passes the test, `findIndex` returns `-1`. This method is useful for finding the position of a specific element in an array.",
        "example": "const numbers = [1, 2, 3, 4];\nconst firstEvenIndex = numbers.findIndex(n => n % 2 === 0);\nconsole.log(firstEvenIndex); // 1"
    },
    {
        "title": "What is the `some` method in JavaScript?",
        "category": "JavaScript",
        "description": "`some` checks if at least one element in an array passes a provided test function.",
        "tags": "some,array,higher-order function",
        "paid": true,
        "answer": "The `some` method is a higher-order function in JavaScript that checks if at least one element in an array passes a provided test function. It returns `true` if any element satisfies the test and `false` otherwise. This method is useful for checking the existence of elements that meet certain criteria in an array.",
        "example": "const numbers = [1, 2, 3, 4];\nconst hasEven = numbers.some(n => n % 2 === 0);\nconsole.log(hasEven); // true"
    },
    {
        "title": "What is the `every` method in JavaScript?",
        "category": "JavaScript",
        "description": "`every` checks if all elements in an array pass a provided test function.",
        "tags": "every,array,higher-order function",
        "paid": true,
        "answer": "The `every` method is a higher-order function in JavaScript that checks if all elements in an array pass a provided test function. It returns `true` if every element satisfies the test and `false` otherwise. This method is useful for verifying that all elements in an array meet certain criteria.",
        "example": "const numbers = [2, 4, 6, 8];\nconst allEven = numbers.every(n => n % 2 === 0);\nconsole.log(allEven); // true"
    },
    {
        "title": "What is the `includes` method in JavaScript?",
        "category": "JavaScript",
        "description": "`includes` checks if an array or string contains a specified element or substring.",
        "tags": "includes,array,string,search",
        "paid": true,
        "answer": "The `includes` method is used to determine whether an array or string contains a specified element or substring. It returns `true` if the element or substring is found and `false` otherwise. This method is commonly used for searching within arrays or strings.",
        "example": "const numbers = [1, 2, 3, 4];\nconst hasTwo = numbers.includes(2);\nconsole.log(hasTwo); // true\n\nconst text = 'Hello, world!';\nconst hasHello = text.includes('Hello');\nconsole.log(hasHello); // true"
    },
    {
        "title": "What is the `slice` method in JavaScript?",
        "category": "JavaScript",
        "description": "`slice` returns a shallow copy of a portion of an array or string.",
        "tags": "slice,array,string,copy",
        "paid": true,
        "answer": "The `slice` method returns a shallow copy of a portion of an array or string, based on specified start and end indices. The original array or string is not modified. This method is useful for extracting parts of arrays or strings without altering the original data.",
        "example": "const numbers = [1, 2, 3, 4, 5];\nconst sliced = numbers.slice(1, 3);\nconsole.log(sliced); // [2, 3]\n\nconst text = 'Hello, world!';\nconst slicedText = text.slice(0, 5);\nconsole.log(slicedText); // 'Hello'"
    },
    {
        "title": "What is the `setTimeout` function in JavaScript?",
        "category": "JavaScript",
        "description": "`setTimeout` executes a function after a specified delay.",
        "tags": "setTimeout,asynchronous,timer",
        "paid": true,
        "answer": "The `setTimeout` function is used to execute a function after a specified delay (in milliseconds). It schedules the function to run once after the delay has elapsed. `setTimeout` returns a timeout ID that can be used to cancel the timeout using `clearTimeout`.",
        "example": "setTimeout(() => {\n  console.log('Executed after 2 seconds');\n}, 2000);"
    },
    {
        "title": "What is the `setInterval` function in JavaScript?",
        "category": "JavaScript",
        "description": "`setInterval` repeatedly executes a function at specified intervals.",
        "tags": "setInterval,asynchronous,timer",
        "paid": true,
        "answer": "The `setInterval` function repeatedly executes a function at specified intervals (in milliseconds). It schedules the function to run continuously at the given interval. `setInterval` returns an interval ID that can be used to stop the interval using `clearInterval`.",
        "example": "const intervalId = setInterval(() => {\n  console.log('Executed every 2 seconds');\n}, 2000);\n// To stop the interval:\n// clearInterval(intervalId);"
    },
    {
        "title": "What is a JavaScript Promise?",
        "category": "JavaScript",
        "description": "A Promise represents a value that may be available now, or in the future, or never.",
        "tags": "promise,asynchronous,callback",
        "paid": true,
        "answer": "A JavaScript Promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. Promises are used to handle asynchronous operations in a more manageable way compared to traditional callback methods. A Promise can be in one of three states: pending, fulfilled, or rejected.",
        "example": "const promise = new Promise((resolve, reject) => {\n  setTimeout(() => resolve('Success!'), 1000);\n});\n\npromise.then(result => {\n  console.log(result); // 'Success!'\n});"
    },
    {
        "title": "What is the `fetch` API in JavaScript?",
        "category": "JavaScript",
        "description": "`fetch` is used to make network requests and returns a Promise.",
        "tags": "fetch,api,network",
        "paid": true,
        "answer": "The `fetch` API is used to make network requests and returns a Promise that resolves to the Response object representing the response to the request. It provides a more powerful and flexible feature set compared to the older `XMLHttpRequest` method. `fetch` supports various methods such as GET, POST, PUT, DELETE, etc.",
        "example": "fetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));"
    },
    {
        "title": "What is a JavaScript Closure?",
        "category": "JavaScript",
        "description": "A closure is a function that retains access to its lexical scope even after the function has finished executing.",
        "tags": "closure,function,scope",
        "paid": true,
        "answer": "A closure is a function that retains access to its lexical scope even after the function has finished executing. This means that the function can still access variables and parameters from its outer scope. Closures are useful for creating private variables and encapsulating functionality.",
        "example": "function createCounter() {\n  let count = 0;\n  return function() {\n    count += 1;\n    return count;\n  };\n}\n\nconst counter = createCounter();\nconsole.log(counter()); // 1\nconsole.log(counter()); // 2"
    },
    {
        "title": "What is `this` in JavaScript?",
        "category": "JavaScript",
        "description": "`this` refers to the object that is currently executing the code.",
        "tags": "this,context,object",
        "paid": true,
        "answer": "`this` is a keyword in JavaScript that refers to the object that is currently executing the code. The value of `this` can vary depending on the context in which it is used, such as in a method, function, or class. It allows methods and functions to refer to their owning object and its properties.",
        "example": "const person = {\n  name: 'Alice',\n  greet() {\n    console.log('Hello, ' + this.name);\n  }\n};\n\nperson.greet(); // 'Hello, Alice'"
    },
    {
        "title": "What is `new` in JavaScript?",
        "category": "JavaScript",
        "description": "`new` creates a new instance of an object or a class.",
        "tags": "new,constructor,class",
        "paid": true,
        "answer": "`new` is an operator used to create a new instance of an object or class. It constructs an instance of a function or class, which usually serves as a constructor. When using `new`, the constructor function is called with a newly created object as its context, and it returns this new object.",
        "example": "function Person(name) {\n  this.name = name;\n}\n\nconst alice = new Person('Alice');\nconsole.log(alice.name); // 'Alice'"
    },
    {
        "title": "What is the `super` keyword in JavaScript?",
        "category": "JavaScript",
        "description": "`super` is used to call methods on an object's parent class.",
        "tags": "super,class,inheritance",
        "paid": true,
        "answer": "`super` is a keyword in JavaScript used within a class to call methods on an object's parent class. It allows you to invoke functions from a parent class within a subclass and access the parent class's properties and methods.",
        "example": "class Animal {\n  speak() {\n    console.log('Animal speaks');\n  }\n}\n\nclass Dog extends Animal {\n  speak() {\n    super.speak();\n    console.log('Dog barks');\n  }\n}\n\nconst dog = new Dog();\n dog.speak();\n// Output:\n// 'Animal speaks'\n// 'Dog barks'"
    },
    {
        "title": "What is the `class` syntax in JavaScript?",
        "category": "JavaScript",
        "description": "`class` is a syntax for creating objects and handling inheritance in JavaScript.",
        "tags": "class,syntax,object-oriented",
        "paid": true,
        "answer": "`class` is a syntax introduced in ECMAScript 6 for creating objects and handling inheritance in JavaScript. It provides a more traditional and straightforward way to define object constructors and methods, similar to classes in other object-oriented languages. Classes use the `constructor` method to initialize objects and can extend other classes using the `extends` keyword.",
        "example": "class Person {\n  constructor(name) {\n    this.name = name;\n  }\n  greet() {\n    console.log('Hello, ' + this.name);\n  }\n}\n\nconst alice = new Person('Alice');\nalice.greet(); // 'Hello, Alice'"
    },
    {
        "title": "What is method chaining in JavaScript?",
        "category": "JavaScript",
        "description": "Method chaining is a technique where multiple methods are called on the same object in a single statement.",
        "tags": "method chaining,object-oriented,fluent interface",
        "paid": true,
        "answer": "Method chaining is a technique in JavaScript where multiple methods are called on the same object in a single statement. This is often achieved by having each method return the object itself, allowing for a chain of method calls. It is commonly used to create a fluent interface and to write more concise and readable code.",
        "example": "class Calculator {\n  constructor() {\n    this.value = 0;\n  }\n  add(num) {\n    this.value += num;\n    return this;\n  }\n  multiply(num) {\n    this.value *= num;\n    return this;\n  }\n  getResult() {\n    return this.value;\n  }\n}\n\nconst result = new Calculator()\n  .add(5)\n  .multiply(2)\n  .getResult();\nconsole.log(result); // 10"
    },
    {
        "title": "What is the `constructor` method in JavaScript classes?",
        "category": "JavaScript",
        "description": "`constructor` initializes a new object created with a class.",
        "tags": "constructor,class,initialization",
        "paid": true,
        "answer": "The `constructor` method in JavaScript classes is a special method used for initializing new objects created with the class. It is automatically called when a new instance of the class is created. The `constructor` method can take parameters and initialize properties or perform any setup required for the instance.",
        "example": "class Person {\n  constructor(name) {\n    this.name = name;\n  }\n}\n\nconst alice = new Person('Alice');\nconsole.log(alice.name); // 'Alice'"
    },
    {
        "title": "What is the `Object.create` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.create` creates a new object with the specified prototype object.",
        "tags": "Object.create,prototype,inheritance",
        "paid": true,
        "answer": "`Object.create` creates a new object with the specified prototype object and properties. This method allows you to create an object that inherits from another object, setting up a prototype chain. It is useful for creating objects with a specific prototype and optional properties.",
        "example": "const proto = { greet() { console.log('Hello'); } };\nconst obj = Object.create(proto);\nobj.greet(); // 'Hello'"
    },
    {
        "title": "What is the `Object.assign` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.assign` copies properties from one or more source objects to a target object.",
        "tags": "Object.assign,copy,merge",
        "paid": true,
        "answer": "`Object.assign` copies properties from one or more source objects to a target object. It merges the properties into the target object, overwriting existing properties with the same key. This method can be used to clone objects or merge multiple objects into one.",
        "example": "const target = { a: 1 };\nconst source = { b: 2 };\nconst merged = Object.assign(target, source);\nconsole.log(merged); // { a: 1, b: 2 }"
    },
    {
        "title": "What is the `Object.freeze` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.freeze` prevents modifications to an object.",
        "tags": "Object.freeze,immutability,object",
        "paid": true,
        "answer": "`Object.freeze` prevents modifications to an object, including adding, deleting, or changing properties. It makes the object immutable, meaning its properties cannot be changed. The object and its properties become read-only, although nested objects are not recursively frozen.",
        "example": "const obj = { name: 'Alice' };\nObject.freeze(obj);\nobj.name = 'Bob';\nconsole.log(obj.name); // 'Alice'"
    },
    {
        "title": "What is the `Object.keys` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.keys` returns an array of a given object's own enumerable property names.",
        "tags": "Object.keys,object,properties",
        "paid": true,
        "answer": "`Object.keys` returns an array of a given object's own enumerable property names. This method provides a way to iterate over the keys of an object. It only includes properties that are directly on the object itself, not inherited properties.",
        "example": "const obj = { a: 1, b: 2 };\nconst keys = Object.keys(obj);\nconsole.log(keys); // ['a', 'b']"
    },
    {
        "title": "What is the `Object.values` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.values` returns an array of a given object's own enumerable property values.",
        "tags": "Object.values,object,properties",
        "paid": true,
        "answer": "`Object.values` returns an array of a given object's own enumerable property values. This method provides a way to iterate over the values of an object. It only includes values from properties that are directly on the object itself, not inherited values.",
        "example": "const obj = { a: 1, b: 2 };\nconst values = Object.values(obj);\nconsole.log(values); // [1, 2]"
    },
    {
        "title": "What is the `Object.entries` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.entries` returns an array of a given object's own enumerable property [key, value] pairs.",
        "tags": "Object.entries,object,properties",
        "paid": true,
        "answer": "`Object.entries` returns an array of a given object's own enumerable property [key, value] pairs. This method allows you to iterate over both keys and values of an object, providing an array of arrays where each inner array contains a key-value pair.",
        "example": "const obj = { a: 1, b: 2 };\nconst entries = Object.entries(obj);\nconsole.log(entries); // [['a', 1], ['b', 2]]"
    },
    {
        "title": "What is the `Symbol` data type in JavaScript?",
        "category": "JavaScript",
        "description": "`Symbol` is a primitive data type used for unique identifiers.",
        "tags": "Symbol,primitive,unique",
        "paid": true,
        "answer": "`Symbol` is a primitive data type in JavaScript used for creating unique identifiers. Each `Symbol` value is unique and immutable, making it useful for creating object properties that cannot be accidentally overwritten or accessed. Symbols are often used to avoid name collisions in objects.",
        "example": "const sym = Symbol('description');\nconsole.log(sym); // Symbol(description)"
    },
    {
        "title": "What is the `Proxy` object in JavaScript?",
        "category": "JavaScript",
        "description": "`Proxy` allows you to create a handler for interactions with objects.",
        "tags": "Proxy,handler,object",
        "paid": true,
        "answer": "`Proxy` is an object that allows you to create a handler for interactions with other objects. It enables you to intercept and customize operations performed on an object, such as property access, assignment, and function calls. Proxies are useful for implementing custom behavior and monitoring object interactions.",
        "example": "const target = {};\nconst handler = {\n  get: (obj, prop) => 'Property: ' + prop\n};\nconst proxy = new Proxy(target, handler);\nconsole.log(proxy.foo); // 'Property: foo'"
    },
    {
        "title": "What is the `Reflect` object in JavaScript?",
        "category": "JavaScript",
        "description": "`Reflect` is a built-in object that provides methods for interceptable operations on objects.",
        "tags": "Reflect,object,intercept",
        "paid": true,
        "answer": "`Reflect` is a built-in object that provides methods for interceptable operations on objects, such as property access, assignment, and method invocation. It is designed to work with `Proxy` objects and provides a way to perform these operations in a more controlled and consistent manner.",
        "example": "const obj = { a: 1 };\nconst value = Reflect.get(obj, 'a');\nconsole.log(value); // 1"
    },
    {
        "title": "What is the `Intl` object in JavaScript?",
        "category": "JavaScript",
        "description": "`Intl` provides internationalization support for formatting numbers, dates, and strings.",
        "tags": "Intl,internationalization,formatting",
        "paid": true,
        "answer": "`Intl` is an object that provides internationalization support for formatting numbers, dates, and strings according to locale-specific conventions. It includes constructors such as `Intl.NumberFormat`, `Intl.DateTimeFormat`, and `Intl.Collator` for working with different languages and regions.",
        "example": "const number = 123456.789;\nconst formatter = new Intl.NumberFormat('de-DE');\nconsole.log(formatter.format(number)); // '123.456,789'"
    },
    {
        "title": "What is the `Math` object in JavaScript?",
        "category": "JavaScript",
        "description": "`Math` provides mathematical constants and functions.",
        "tags": "Math,mathematics,constants",
        "paid": true,
        "answer": "`Math` is a built-in object in JavaScript that provides mathematical constants and functions, such as `Math.PI`, `Math.sqrt`, and `Math.random`. It includes methods for performing mathematical operations and generating random numbers.",
        "example": "const result = Math.sqrt(16);\nconsole.log(result); // 4"
    },
    {
        "title": "What is the `eval` function in JavaScript?",
        "category": "JavaScript",
        "description": "`eval` executes a string of JavaScript code.",
        "tags": "eval,code,execution",
        "paid": true,
        "answer": "`eval` is a function in JavaScript that executes a string of JavaScript code. It takes a string as input and evaluates it as JavaScript code. While it can be powerful, `eval` is generally considered dangerous and should be avoided due to security risks and performance issues.",
        "example": "const code = 'console.log(2 + 2)';\neval(code); // 4"
    },
    {
        "title": "What is the `with` statement in JavaScript?",
        "category": "JavaScript",
        "description": "`with` extends the scope chain for a block of code.",
        "tags": "with,scope,block",
        "paid": true,
        "answer": "`with` is a statement in JavaScript that extends the scope chain for a block of code. It allows you to work with a specified object without needing to qualify its properties. `with` is generally discouraged because it can make code harder to understand and maintain, and it is not recommended in strict mode.",
        "example": "const obj = { a: 1, b: 2 };\nwith (obj) {\n  console.log(a + b);\n}\n// Output: 3"
    },
    {
        "title": "What is the `typeof` operator in JavaScript?",
        "category": "JavaScript",
        "description": "`typeof` returns a string indicating the type of a variable.",
        "tags": "typeof,type,operator",
        "paid": true,
        "answer": "`typeof` is an operator in JavaScript that returns a string indicating the type of a variable or expression. It can be used to determine the data type of a value and is often used for type checking and debugging.",
        "example": "const value = 42;\nconsole.log(typeof value); // 'number'"
    },
    {
        "title": "What is the `instanceof` operator in JavaScript?",
        "category": "JavaScript",
        "description": "`instanceof` checks if an object is an instance of a particular class or constructor.",
        "tags": "instanceof,object,class",
        "paid": true,
        "answer": "`instanceof` is an operator used to check if an object is an instance of a particular class or constructor function. It tests whether the prototype property of a constructor appears in the prototype chain of an object.",
        "example": "class Person {}\nconst alice = new Person();\nconsole.log(alice instanceof Person); // true"
    },
    {
        "title": "What is the `delete` operator in JavaScript?",
        "category": "JavaScript",
        "description": "`delete` removes a property from an object.",
        "tags": "delete,object,property",
        "paid": true,
        "answer": "`delete` is an operator used to remove a property from an object. It affects the object directly and removes the specified property, returning `true` if the property was successfully deleted or `false` otherwise.",
        "example": "const obj = { a: 1, b: 2 };\ndelete obj.a;\nconsole.log(obj); // { b: 2 }"
    },
    {
        "title": "What is the `in` operator in JavaScript?",
        "category": "JavaScript",
        "description": "`in` checks if a property exists in an object or its prototype chain.",
        "tags": "in,object,property",
        "paid": true,
        "answer": "`in` is an operator used to check if a specified property exists in an object or its prototype chain. It returns `true` if the property is found, otherwise it returns `false`.",
        "example": "const obj = { a: 1 };\nconsole.log('a' in obj); // true\nconsole.log('b' in obj); // false"
    },
    {
        "title": "What is the `for...in` loop in JavaScript?",
        "category": "JavaScript",
        "description": "`for...in` iterates over enumerable properties of an object.",
        "tags": "for...in,loop,object",
        "paid": true,
        "answer": "`for...in` is a loop used to iterate over enumerable properties of an object, including properties inherited through the prototype chain. It is often used to enumerate the keys of an object.",
        "example": "const obj = { a: 1, b: 2 };\nfor (const key in obj) {\n  console.log(key + ': ' + obj[key]);\n}\n// Output:\n// 'a: 1'\n// 'b: 2'"
    },
    {
        "title": "What is the `for...of` loop in JavaScript?",
        "category": "JavaScript",
        "description": "`for...of` iterates over iterable objects, such as arrays.",
        "tags": "for...of,loop,iteration",
        "paid": true,
        "answer": "`for...of` is a loop used to iterate over iterable objects, such as arrays, strings, maps, and sets. It provides a simpler syntax for accessing values in an iterable object compared to using a traditional `for` loop.",
        "example": "const arr = [1, 2, 3];\nfor (const value of arr) {\n  console.log(value);\n}\n// Output:\n// 1\n// 2\n// 3"
    },
    {
        "title": "What is a JavaScript generator function?",
        "category": "JavaScript",
        "description": "A generator function allows pausing and resuming execution with `yield`.",
        "tags": "generator,functions,yield",
        "paid": true,
        "answer": "A generator function in JavaScript is a special type of function that can be paused and resumed using the `yield` keyword. It returns an iterator object that conforms to the iterable protocol. Generator functions allow you to produce a sequence of values lazily and manage the state between yields.",
        "example": "function* gen() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst iterator = gen();\nconsole.log(iterator.next().value); // 1\nconsole.log(iterator.next().value); // 2"
    },
    {
        "title": "What is the `yield` keyword in JavaScript?",
        "category": "JavaScript",
        "description": "`yield` is used to pause and resume generator functions.",
        "tags": "yield,generator,functions",
        "paid": true,
        "answer": "`yield` is a keyword used inside generator functions to pause execution and return a value. When the generator function is resumed, it continues from where it left off. `yield` allows generators to produce a sequence of values over time.",
        "example": "function* gen() {\n  yield 1;\n  yield 2;\n}\n\nconst iterator = gen();\nconsole.log(iterator.next().value); // 1\nconsole.log(iterator.next().value); // 2"
    },
    {
        "title": "What is the `Map` object in JavaScript?",
        "category": "JavaScript",
        "description": "`Map` is a collection of key-value pairs with unique keys.",
        "tags": "Map,collection,key-value",
        "paid": true,
        "answer": "The `Map` object in JavaScript is a collection of key-value pairs where both keys and values can be any data type. Unlike objects, `Map` maintains the order of elements and allows keys to be of any type, including objects and primitive values.",
        "example": "const map = new Map();\nmap.set('key1', 'value1');\nmap.set('key2', 'value2');\nconsole.log(map.get('key1')); // 'value1'"
    },
    {
        "title": "What is the `Set` object in JavaScript?",
        "category": "JavaScript",
        "description": "`Set` is a collection of unique values.",
        "tags": "Set,collection,unique",
        "paid": true,
        "answer": "The `Set` object in JavaScript is a collection of unique values. It allows you to store values of any type and ensures that each value occurs only once in the collection. `Set` provides methods for adding, deleting, and checking the existence of values.",
        "example": "const set = new Set();\nset.add(1);\nset.add(2);\nset.add(1);\nconsole.log(set); // Set { 1, 2 }"
    },
    {
        "title": "What is the `WeakMap` object in JavaScript?",
        "category": "JavaScript",
        "description": "`WeakMap` is a collection of key-value pairs where keys are objects and values can be any type.",
        "tags": "WeakMap,collection,weak",
        "paid": true,
        "answer": "`WeakMap` is a collection of key-value pairs where keys are objects and values can be any type. Unlike `Map`, the keys in a `WeakMap` are weakly referenced, meaning they can be garbage-collected when there are no other references to them.",
        "example": "const weakMap = new WeakMap();\nconst obj = {};\nweakMap.set(obj, 'value');\nconsole.log(weakMap.get(obj)); // 'value'"
    },
    {
        "title": "What is the `WeakSet` object in JavaScript?",
        "category": "JavaScript",
        "description": "`WeakSet` is a collection of objects where objects are weakly referenced.",
        "tags": "WeakSet,collection,weak",
        "paid": true,
        "answer": "`WeakSet` is a collection of objects where objects are weakly referenced, allowing them to be garbage-collected when there are no other references. It is similar to `Set`, but only stores objects and does not prevent them from being garbage-collected.",
        "example": "const weakSet = new WeakSet();\nconst obj = {};\nweakSet.add(obj);\nconsole.log(weakSet.has(obj)); // true"
    },
    {
        "title": "What is the `Object.prototype.toString` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.prototype.toString` returns a string representing the object.",
        "tags": "Object.prototype.toString,string,object",
        "paid": true,
        "answer": "`Object.prototype.toString` returns a string representing the object. It is commonly used to get a string representation of an object’s type and can be overridden by custom objects for more specific behavior.",
        "example": "const obj = {};\nconsole.log(Object.prototype.toString.call(obj)); // '[object Object]'"
    },
    {
        "title": "What is the `Function.prototype.bind` method in JavaScript?",
        "category": "JavaScript",
        "description": "`bind` creates a new function with a specified `this` value.",
        "tags": "Function.prototype.bind,this,context",
        "paid": true,
        "answer": "`Function.prototype.bind` creates a new function that, when called, has its `this` keyword set to the provided value. It also allows you to preset arguments that will be passed to the function when it is called.",
        "example": "function greet() { return `Hello, ${this.name}`; }\nconst person = { name: 'Alice' };\nconst boundGreet = greet.bind(person);\nconsole.log(boundGreet()); // 'Hello, Alice'"
    },
    {
        "title": "What is the `Function.prototype.call` method in JavaScript?",
        "category": "JavaScript",
        "description": "`call` invokes a function with a specified `this` value and arguments.",
        "tags": "Function.prototype.call,this,arguments",
        "paid": true,
        "answer": "`Function.prototype.call` invokes a function with a specified `this` value and arguments provided individually. It allows you to call a function with a given `this` context and pass arguments as separate parameters.",
        "example": "function greet(greeting) { return `${greeting}, ${this.name}`; }\nconst person = { name: 'Alice' };\nconsole.log(greet.call(person, 'Hello')); // 'Hello, Alice'"
    },
    {
        "title": "What is the `Function.prototype.apply` method in JavaScript?",
        "category": "JavaScript",
        "description": "`apply` invokes a function with a specified `this` value and arguments as an array.",
        "tags": "Function.prototype.apply,this,arguments",
        "paid": true,
        "answer": "`Function.prototype.apply` invokes a function with a specified `this` value and arguments provided as an array. It allows you to call a function with a given `this` context and pass arguments as an array.",
        "example": "function greet(greeting, punctuation) { return `${greeting}, ${this.name}${punctuation}`; }\nconst person = { name: 'Alice' };\nconsole.log(greet.apply(person, ['Hello', '!'])); // 'Hello, Alice!'"
    },
    {
        "title": "What is the `Function.prototype.toString` method in JavaScript?",
        "category": "JavaScript",
        "description": "`toString` returns a string representing the source code of the function.",
        "tags": "Function.prototype.toString,source code,function",
        "paid": true,
        "answer": "`Function.prototype.toString` returns a string representing the source code of the function. It provides a way to get the textual representation of the function’s code, which can be useful for debugging or introspection.",
        "example": "function greet() { return 'Hello'; }\nconsole.log(greet.toString()); // function greet() { return 'Hello'; } "
    },
    {
        "title": "What is the `Function.prototype.length` property in JavaScript?",
        "category": "JavaScript",
        "description": "`length` returns the number of parameters expected by a function.",
        "tags": "Function.prototype.length,parameters,arguments",
        "paid": true,
        "answer": "`Function.prototype.length` returns the number of parameters expected by a function, excluding any parameters that have default values, rest parameters, or are not required. It provides insight into the function’s arity (the number of arguments it expects).",
        "example": "function greet(name, greeting) { return `${greeting}, ${name}`; }\nconsole.log(greet.length); // 2"
    },
    {
        "title": "What is the `Function.prototype.constructor` property in JavaScript?",
        "category": "JavaScript",
        "description": "`constructor` refers to the function that created the instance.",
        "tags": "Function.prototype.constructor,constructor,instance",
        "paid": true,
        "answer": "`Function.prototype.constructor` refers to the function that created the instance of an object. It provides a reference to the constructor function that was used to create the object, allowing you to identify the object’s constructor.",
        "example": "function Person(name) { this.name = name; }\nconst alice = new Person('Alice');\nconsole.log(alice.constructor); // [Function: Person]"
    },
    {
        "title": "What is the `Function.prototype.call` method in JavaScript?",
        "category": "JavaScript",
        "description": "`call` invokes a function with a specified `this` value and arguments provided individually.",
        "tags": "Function.prototype.call,this,arguments",
        "paid": true,
        "answer": "`Function.prototype.call` is used to invoke a function with a specified `this` value and arguments provided individually. It allows you to set the `this` context for the function and pass arguments as separate values.",
        "example": "function sayHello(greeting) { return `${greeting}, ${this.name}`; }\nconst person = { name: 'Alice' };\nconsole.log(sayHello.call(person, 'Hello')); // 'Hello, Alice'"
    },
    {
        "title": "What is the `Function.prototype.apply` method in JavaScript?",
        "category": "JavaScript",
        "description": "`apply` invokes a function with a specified `this` value and arguments as an array.",
        "tags": "Function.prototype.apply,this,arguments",
        "paid": true,
        "answer": "`Function.prototype.apply` is used to invoke a function with a specified `this` value and arguments provided as an array. It allows you to call a function with a given `this` context and pass arguments as an array.",
        "example": "function greet(greeting, punctuation) { return `${greeting}, ${this.name}${punctuation}`; }\nconst person = { name: 'Alice' };\nconsole.log(greet.apply(person, ['Hello', '!'])); // 'Hello, Alice!'"
    },
    {
        "title": "What is the `Function.prototype.toString` method in JavaScript?",
        "category": "JavaScript",
        "description": "`toString` returns a string representing the source code of the function.",
        "tags": "Function.prototype.toString,source code,function",
        "paid": true,
        "answer": "`Function.prototype.toString` returns a string representing the source code of the function. This can be useful for debugging or understanding how a function is implemented.",
        "example": "function add(a, b) { return a + b; }\nconsole.log(add.toString()); // 'function add(a, b) { return a + b; }'"
    },
    {
        "title": "What is the `Object.create` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.create` creates a new object with the specified prototype object.",
        "tags": "Object.create,prototype,object",
        "paid": true,
        "answer": "`Object.create` is used to create a new object with the specified prototype object and optionally, properties. It allows for setting the prototype of a new object and can be useful for implementing inheritance or cloning objects.",
        "example": "const prototype = { greet() { return 'Hello'; } };\nconst obj = Object.create(prototype);\nconsole.log(obj.greet()); // 'Hello'"
    },
    {
        "title": "What is the `Object.assign` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.assign` copies properties from source objects to a target object.",
        "tags": "Object.assign,copy,merge",
        "paid": true,
        "answer": "`Object.assign` is used to copy properties from one or more source objects to a target object. It can be used to merge objects or clone objects by copying their properties. The target object is returned with the merged properties.",
        "example": "const target = { a: 1 };\nconst source = { b: 2 };\nObject.assign(target, source);\nconsole.log(target); // { a: 1, b: 2 }"
    },
    {
        "title": "What is the `Object.freeze` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.freeze` prevents modifications to an object.",
        "tags": "Object.freeze,immutable,object",
        "paid": true,
        "answer": "`Object.freeze` is used to make an object immutable by preventing new properties from being added, existing properties from being removed or altered, and marking all properties as read-only. It effectively locks the object from any modifications.",
        "example": "const obj = { a: 1 };\nObject.freeze(obj);\nobj.a = 2;\nconsole.log(obj.a); // 1"
    },
    {
        "title": "What is the `Object.seal` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.seal` prevents new properties from being added to an object and marks existing properties as non-configurable.",
        "tags": "Object.seal,object,sealing",
        "paid": true,
        "answer": "`Object.seal` is used to prevent new properties from being added to an object and marks all existing properties as non-configurable, meaning they cannot be deleted. However, existing properties can still be modified.",
        "example": "const obj = { a: 1 };\nObject.seal(obj);\nobj.a = 2;\ndelete obj.a;\nconsole.log(obj.a); // 2"
    },
    {
        "title": "What is the `Object.keys` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.keys` returns an array of a given object's own enumerable property names.",
        "tags": "Object.keys,enumerable,object",
        "paid": true,
        "answer": "`Object.keys` returns an array of a given object's own enumerable property names. It provides a way to get all the keys (property names) of an object, which can be useful for iterating over object properties.",
        "example": "const obj = { a: 1, b: 2 };\nconsole.log(Object.keys(obj)); // ['a', 'b']"
    },
    {
        "title": "What is the `Object.values` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.values` returns an array of a given object's own enumerable property values.",
        "tags": "Object.values,values,object",
        "paid": true,
        "answer": "`Object.values` returns an array of a given object's own enumerable property values. It provides a way to get all the values of an object’s properties, which can be useful for processing or displaying object data.",
        "example": "const obj = { a: 1, b: 2 };\nconsole.log(Object.values(obj)); // [1, 2]"
    },
    {
        "title": "What is the `Object.entries` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.entries` returns an array of a given object's own enumerable string-keyed property pairs.",
        "tags": "Object.entries,entries,object",
        "paid": true,
        "answer": "`Object.entries` returns an array of a given object's own enumerable string-keyed property pairs. Each pair is represented as an array of two elements: the key and the value. This method is useful for converting an object into an array of key-value pairs.",
        "example": "const obj = { a: 1, b: 2 };\nconsole.log(Object.entries(obj)); // [['a', 1], ['b', 2]]"
    },
    {
        "title": "What is the `Object.fromEntries` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.fromEntries` converts a list of key-value pairs into an object.",
        "tags": "Object.fromEntries,object,entries",
        "paid": true,
        "answer": "`Object.fromEntries` is used to convert a list of key-value pairs (such as an array of arrays) into an object. This method is useful for creating objects from data structures that contain key-value pairs.",
        "example": "const entries = [['a', 1], ['b', 2]];\nconst obj = Object.fromEntries(entries);\nconsole.log(obj); // { a: 1, b: 2 }"
    },
    {
        "title": "What is the `Object.getPrototypeOf` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.getPrototypeOf` returns the prototype of a specified object.",
        "tags": "Object.getPrototypeOf,prototype,object",
        "paid": true,
        "answer": "`Object.getPrototypeOf` returns the prototype (i.e., the internal prototype property) of a specified object. It provides a way to get the prototype object that is used as the prototype of the specified object.",
        "example": "const obj = {};\nconsole.log(Object.getPrototypeOf(obj)); // [Object: null prototype] {}"
    },
    {
        "title": "What is the `Object.setPrototypeOf` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.setPrototypeOf` sets the prototype (i.e., the internal prototype property) of a specified object.",
        "tags": "Object.setPrototypeOf,prototype,object",
        "paid": true,
        "answer": "`Object.setPrototypeOf` is used to set the prototype (i.e., the internal prototype property) of a specified object. It changes the prototype of the object and allows for dynamic inheritance.",
        "example": "const obj = {};\nconst proto = { a: 1 };\nObject.setPrototypeOf(obj, proto);\nconsole.log(obj.a); // 1"
    },
    {
        "title": "What is the `Object.hasOwn` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Object.hasOwn` checks if an object has a specific property as its own property.",
        "tags": "Object.hasOwn,has,property",
        "paid": true,
        "answer": "`Object.hasOwn` checks if an object has a specific property as its own property, not inherited from the prototype chain. It returns `true` if the object has the specified property, otherwise `false`.",
        "example": "const obj = { a: 1 };\nconsole.log(Object.hasOwn(obj, 'a')); // true\nconsole.log(Object.hasOwn(obj, 'b')); // false"
    },
    {
        "title": "What is the `Symbol` type in JavaScript?",
        "category": "JavaScript",
        "description": "A `Symbol` is a unique and immutable primitive value.",
        "tags": "Symbol,unique,primitive",
        "paid": true,
        "answer": "`Symbol` is a unique and immutable primitive value that can be used as the key of an object property. Each `Symbol` is guaranteed to be unique and is often used to create private or unique property keys.",
        "example": "const sym = Symbol('description');\nconst obj = { [sym]: 'value' };\nconsole.log(obj[sym]); // 'value'"
    },
    {
        "title": "What is the `Symbol.for` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Symbol.for` returns a symbol from the global symbol registry.",
        "tags": "Symbol.for,global symbol,registry",
        "paid": true,
        "answer": "`Symbol.for` is used to access symbols from the global symbol registry. It creates a new symbol if it does not already exist, or returns the existing symbol if it is already registered with the given key.",
        "example": "const sym1 = Symbol.for('key');\nconst sym2 = Symbol.for('key');\nconsole.log(sym1 === sym2); // true"
    },
    {
        "title": "What is the `Symbol.keyFor` method in JavaScript?",
        "category": "JavaScript",
        "description": "`Symbol.keyFor` returns the key for a global symbol.",
        "tags": "Symbol.keyFor,global symbol,key",
        "paid": true,
        "answer": "`Symbol.keyFor` is used to get the key associated with a global symbol in the global symbol registry. It returns the key if the symbol is registered globally, or `undefined` if it is not.",
        "example": "const sym = Symbol.for('key');\nconsole.log(Symbol.keyFor(sym)); // 'key'"
    },
    {
        "title": "What is the `Symbol.iterator` property in JavaScript?",
        "category": "JavaScript",
        "description": "`Symbol.iterator` defines the default iterator for an object.",
        "tags": "Symbol.iterator,iterator,object",
        "paid": true,
        "answer": "`Symbol.iterator` is a well-known symbol that defines the default iterator for an object. It allows objects to be iterated using `for...of` loops and other iteration protocols by providing an iterator method.",
        "example": "const arr = [1, 2, 3];\nconst iterator = arr[Symbol.iterator]();\nconsole.log(iterator.next().value); // 1"
    },
    {
        "title": "What is the `Symbol.toStringTag` property in JavaScript?",
        "category": "JavaScript",
        "description": "`Symbol.toStringTag` specifies the default string description of an object.",
        "tags": "Symbol.toStringTag,string,description",
        "paid": true,
        "answer": "`Symbol.toStringTag` is a well-known symbol that specifies the default string description of an object when `Object.prototype.toString` is called. It allows customization of the string representation of the object.",
        "example": "class CustomClass {}\nCustomClass.prototype[Symbol.toStringTag] = 'Custom';\nconst obj = new CustomClass();\nconsole.log(Object.prototype.toString.call(obj)); // '[object Custom]'"
    },
    {
        "title": "What is the `Symbol.toPrimitive` property in JavaScript?",
        "category": "JavaScript",
        "description": "`Symbol.toPrimitive` defines how an object should be converted to a primitive value.",
        "tags": "Symbol.toPrimitive,conversion,primitive",
        "paid": true,
        "answer": "`Symbol.toPrimitive` is a well-known symbol that defines a method for converting an object to a primitive value. This method allows custom handling of the object when it is converted to a string, number, or default primitive value.",
        "example": "const obj = {\n  [Symbol.toPrimitive](hint) {\n    if (hint === 'number') return 42;\n    if (hint === 'string') return 'foo';\n    return true;\n  }\n};\nconsole.log(+obj); // 42\nconsole.log(`${obj}`); // 'foo'"
    },
    {
        "title": "What is the `Symbol.hasInstance` property in JavaScript?",
        "category": "JavaScript",
        "description": "`Symbol.hasInstance` defines how the `instanceof` operator behaves for a class.",
        "tags": "Symbol.hasInstance,instanceof,operator",
        "paid": true,
        "answer": "`Symbol.hasInstance` is a well-known symbol used to customize the behavior of the `instanceof` operator for a class or constructor function. It allows you to define how objects are checked for instance membership.",
        "example": "class MyClass {\n  static [Symbol.hasInstance](instance) {\n    return instance.customCheck === true;\n  }\n}\nconst obj = { customCheck: true };\nconsole.log(obj instanceof MyClass); // true"
    },
    {
        "title": "What is the `Symbol.toStringTag` property in JavaScript?",
        "category": "JavaScript",
        "description": "`Symbol.toStringTag` is used to customize the default string representation of an object.",
        "tags": "Symbol.toStringTag,string,object",
        "paid": true,
        "answer": "`Symbol.toStringTag` is a well-known symbol that defines a string description of an object when it is converted to a string. It customizes the output of `Object.prototype.toString` for the object.",
        "example": "const obj = {};\nobj[Symbol.toStringTag] = 'MyObject';\nconsole.log(Object.prototype.toString.call(obj)); // '[object MyObject]'"
    },
    {
        "title": "What is the `String.prototype.includes` method in JavaScript?",
        "category": "JavaScript",
        "description": "`includes` determines if a string contains another substring.",
        "tags": "String.prototype.includes,substring,search",
        "paid": true,
        "answer": "`String.prototype.includes` checks if a string contains a specified substring. It returns `true` if the substring is found, otherwise `false`. It is case-sensitive and supports optional starting index.",
        "example": "const str = 'Hello, world!';\nconsole.log(str.includes('world')); // true\nconsole.log(str.includes('World')); // false"
    },
    {
        "title": "What is the `String.prototype.startsWith` method in JavaScript?",
        "category": "JavaScript",
        "description": "`startsWith` checks if a string begins with a specified substring.",
        "tags": "String.prototype.startsWith,substring,starts",
        "paid": true,
        "answer": "`String.prototype.startsWith` checks if a string starts with a specified substring. It returns `true` if the substring is at the start of the string, otherwise `false`. It is case-sensitive and supports optional starting index.",
        "example": "const str = 'Hello, world!';\nconsole.log(str.startsWith('Hello')); // true\nconsole.log(str.startsWith('world')); // false"
    },
    {
        "title": "What is the `String.prototype.endsWith` method in JavaScript?",
        "category": "JavaScript",
        "description": "`endsWith` checks if a string ends with a specified substring.",
        "tags": "String.prototype.endsWith,substring,ends",
        "paid": true,
        "answer": "`String.prototype.endsWith` checks if a string ends with a specified substring. It returns `true` if the substring is at the end of the string, otherwise `false`. It is case-sensitive and supports optional length argument.",
        "example": "const str = 'Hello, world!';\nconsole.log(str.endsWith('world!')); // true\nconsole.log(str.endsWith('Hello')); // false"
    },
    {
        "title": "What is the `String.prototype.repeat` method in JavaScript?",
        "category": "JavaScript",
        "description": "`repeat` returns a new string with a specified number of copies of the original string.",
        "tags": "String.prototype.repeat,repeat,copy",
        "paid": true,
        "answer": "`String.prototype.repeat` returns a new string with a specified number of copies of the original string concatenated together. It takes a single integer argument that specifies how many times to repeat the string.",
        "example": "const str = 'abc';\nconsole.log(str.repeat(3)); // 'abcabcabc'"
    },
    {
        "title": "What is the `String.prototype.trim` method in JavaScript?",
        "category": "JavaScript",
        "description": "`trim` removes whitespace from both ends of a string.",
        "tags": "String.prototype.trim,whitespace,trim",
        "paid": true,
        "answer": "`String.prototype.trim` removes whitespace from both ends of a string. It does not affect whitespace in the middle of the string. It is useful for cleaning up input data or formatting strings.",
        "example": "const str = '   Hello, world!   ';\nconsole.log(str.trim()); // 'Hello, world!'"
    },
    {
        "title": "What is the `String.prototype.split` method in JavaScript?",
        "category": "JavaScript",
        "description": "`split` divides a string into an array of substrings based on a delimiter.",
        "tags": "String.prototype.split,split,delimiter",
        "paid": true,
        "answer": "`String.prototype.split` divides a string into an array of substrings based on a specified delimiter. The delimiter can be a string or a regular expression, and the method returns an array of substrings.",
        "example": "const str = 'a,b,c';\nconsole.log(str.split(',')); // ['a', 'b', 'c']"
    },
    {
        "title": "What is the `String.prototype.concat` method in JavaScript?",
        "category": "JavaScript",
        "description": "`concat` joins two or more strings into one string.",
        "tags": "String.prototype.concat,concatenate,join",
        "paid": true,
        "answer": "`String.prototype.concat` joins two or more strings into a single string. It takes one or more string arguments and returns a new string that is the result of concatenating all the arguments.",
        "example": "const str1 = 'Hello';\nconst str2 = 'World';\nconsole.log(str1.concat(', ', str2)); // 'Hello, World'"
    },
    {
        "title": "What is the `String.prototype.charAt` method in JavaScript?",
        "category": "JavaScript",
        "description": "`charAt` returns the character at a specified index in a string.",
        "tags": "String.prototype.charAt,character,index",
        "paid": true,
        "answer": "`String.prototype.charAt` returns the character at a specified index within a string. If the index is out of range, it returns an empty string.",
        "example": "const str = 'Hello';\nconsole.log(str.charAt(1)); // 'e'\nconsole.log(str.charAt(10)); // ''"
    },
    {
        "title": "What is the `String.prototype.codePointAt` method in JavaScript?",
        "category": "JavaScript",
        "description": "`codePointAt` returns the Unicode code point value of a character at a specified index.",
        "tags": "String.prototype.codePointAt,Unicode,code point",
        "paid": true,
        "answer": "`String.prototype.codePointAt` returns the Unicode code point value of a character at a specified index. It is useful for working with characters outside the Basic Multilingual Plane (BMP).",
        "example": "const str = 'A';\nconsole.log(str.codePointAt(0)); // 65\nconst emoji = '😊';\nconsole.log(emoji.codePointAt(0)); // 128522"
    },
    {
        "title": "What is the `String.prototype.fromCharCode` method in JavaScript?",
        "category": "JavaScript",
        "description": "`fromCharCode` returns a string created from the specified sequence of Unicode values.",
        "tags": "String.fromCharCode,Unicode,character",
        "paid": true,
        "answer": "`String.fromCharCode` returns a string created from the specified sequence of Unicode values. It takes one or more Unicode values and converts them into a string.",
        "example": "console.log(String.fromCharCode(65, 66, 67)); // 'ABC'"
    },
    {
        "title": "What is the `String.prototype.includes` method in JavaScript?",
        "category": "JavaScript",
        "description": "`includes` checks if a string contains a specified substring.",
        "tags": "String.prototype.includes,substring,search",
        "paid": true,
        "answer": "`String.prototype.includes` determines if a string contains a specified substring. It returns `true` if the substring is found, otherwise `false`. It is case-sensitive and supports an optional starting index.",
        "example": "const str = 'Hello, world!';\nconsole.log(str.includes('world')); // true\nconsole.log(str.includes('World')); // false"
    },
    {
        "title": "What is the `String.prototype.replace` method in JavaScript?",
        "category": "JavaScript",
        "description": "`replace` returns a new string with some matches of a pattern replaced by a replacement.",
        "tags": "String.prototype.replace,replace,pattern",
        "paid": true,
        "answer": "`String.prototype.replace` returns a new string where some matches of a pattern (string or regular expression) are replaced by a specified replacement string. The method only replaces the first occurrence unless the global flag is used with a regular expression.",
        "example": "const str = 'Hello, world!';\nconsole.log(str.replace('world', 'there')); // 'Hello, there!'"
    },
    {
        "title": "What is the `String.prototype.slice` method in JavaScript?",
        "category": "JavaScript",
        "description": "`slice` extracts a section of a string and returns it as a new string.",
        "tags": "String.prototype.slice,slice,substring",
        "paid": true,
        "answer": "`String.prototype.slice` extracts a section of a string from a specified start index to an end index and returns it as a new string. It does not modify the original string and supports negative indices to count from the end.",
        "example": "const str = 'Hello, world!';\nconsole.log(str.slice(0, 5)); // 'Hello'\nconsole.log(str.slice(-6)); // 'world!'"
    },
    {
        "title": "What is the `String.prototype.indexOf` method in JavaScript?",
        "category": "JavaScript",
        "description": "`indexOf` returns the index of the first occurrence of a substring.",
        "tags": "String.prototype.indexOf,substring,index",
        "paid": true,
        "answer": "`String.prototype.indexOf` returns the index of the first occurrence of a specified substring within the string. If the substring is not found, it returns `-1`. The method is case-sensitive and supports an optional starting index.",
        "example": "const str = 'Hello, world!';\nconsole.log(str.indexOf('world')); // 7\nconsole.log(str.indexOf('World')); // -1"
    },
    {
        "title": "What is the `String.prototype.lastIndexOf` method in JavaScript?",
        "category": "JavaScript",
        "description": "`lastIndexOf` returns the index of the last occurrence of a substring.",
        "tags": "String.prototype.lastIndexOf,substring,index",
        "paid": true,
        "answer": "`String.prototype.lastIndexOf` returns the index of the last occurrence of a specified substring within the string. If the substring is not found, it returns `-1`. The method is case-sensitive and supports an optional starting index to search backward.",
        "example": "const str = 'Hello, world!';\nconsole.log(str.lastIndexOf('o')); // 8\nconsole.log(str.lastIndexOf"
    },
    {
        "title": "What is the `Set` object in JavaScript?",
        "category": "JavaScript",
        "description": "`Set` is a collection of unique values.",
        "tags": "Set,unique,collection",
        "paid": true,
        "answer": "`Set` is a built-in object that allows you to store unique values of any type. Values in a `Set` are ordered, and duplicate values are automatically removed.",
        "example": "const set = new Set([1, 2, 2, 3]);\nconsole.log([...set]); // [1, 2, 3]"
    },
    {
        "title": "What is the `WeakSet` object in JavaScript?",
        "category": "JavaScript",
        "description": "`WeakSet` is a collection of objects with weak references.",
        "tags": "WeakSet,objects,weaker references",
        "paid": true,
        "answer": "`WeakSet` is similar to `Set`, but it only allows objects as its values and maintains weak references to these objects. This means that objects in a `WeakSet` are garbage-collected when there are no other references to them.",
        "example": "const weakSet = new WeakSet();\nconst obj = {};\nweakSet.add(obj);\nconsole.log(weakSet.has(obj)); // true"
    },
    {
        "title": "What is the `Map` object in JavaScript?",
        "category": "JavaScript",
        "description": "`Map` is a collection of key-value pairs.",
        "tags": "Map,key-value pairs,collection",
        "paid": true,
        "answer": "`Map` is a built-in object that stores key-value pairs where keys can be of any type. It maintains the insertion order of the keys and allows for efficient lookups and modifications.",
        "example": "const map = new Map();\nmap.set('key', 'value');\nconsole.log(map.get('key')); // 'value'"
    },
    {
        "title": "What is the `WeakMap` object in JavaScript?",
        "category": "JavaScript",
        "description": "`WeakMap` is a collection of key-value pairs with weak references to keys.",
        "tags": "WeakMap,key-value pairs,weak references",
        "paid": true,
        "answer": "`WeakMap` is similar to `Map`, but it only allows objects as keys and maintains weak references to these keys. This means that keys in a `WeakMap` are garbage-collected when there are no other references to them.",
        "example": "const weakMap = new WeakMap();\nconst key = {};\nweakMap.set(key, 'value');\nconsole.log(weakMap.get(key)); // 'value'"
    },
    {
        "title": "What is the `Array.prototype.find` method in JavaScript?",
        "category": "JavaScript",
        "description": "`find` returns the first element that satisfies a testing function.",
        "tags": "Array.prototype.find,array,element",
        "paid": true,
        "answer": "`Array.prototype.find` returns the first element in an array that satisfies a provided testing function. If no elements satisfy the function, it returns `undefined`.",
        "example": "const arr = [1, 2, 3, 4];\nconst found = arr.find(x => x > 2);\nconsole.log(found); // 3"
    },
    {
        "title": "What is the `Array.prototype.findIndex` method in JavaScript?",
        "category": "JavaScript",
        "description": "`findIndex` returns the index of the first element that satisfies a testing function.",
        "tags": "Array.prototype.findIndex,array,index",
        "paid": true,
        "answer": "`Array.prototype.findIndex` returns the index of the first element in an array that satisfies a provided testing function. If no elements satisfy the function, it returns `-1`.",
        "example": "const arr = [1, 2, 3, 4];\nconst index = arr.findIndex(x => x > 2);\nconsole.log(index); // 2"
    },
    {
        "title": "What is the `Array.prototype.includes` method in JavaScript?",
        "category": "JavaScript",
        "description": "`includes` determines if an array contains a certain value.",
        "tags": "Array.prototype.includes,array,contains",
        "paid": true,
        "answer": "`Array.prototype.includes` checks if an array contains a certain value among its entries. It returns `true` if the array contains the value, otherwise `false`.",
        "example": "const arr = [1, 2, 3];\nconsole.log(arr.includes(2)); // true\nconsole.log(arr.includes(4)); // false"
    },
    {
        "title": "What is the `Array.prototype.some` method in JavaScript?",
        "category": "JavaScript",
        "description": "`some` tests if at least one element satisfies a testing function.",
        "tags": "Array.prototype.some,array,testing",
        "paid": true,
        "answer": "`Array.prototype.some` tests whether at least one element in an array passes the test implemented by the provided function. It returns `true` if at least one element satisfies the function, otherwise `false`.",
        "example": "const arr = [1, 2, 3];\nconst hasGreaterThan2 = arr.some(x => x > 2);\nconsole.log(hasGreaterThan2); // true"
    },
    {
        "title": "What is the `Array.prototype.every` method in JavaScript?",
        "category": "JavaScript",
        "description": "`every` tests if all elements satisfy a testing function.",
        "tags": "Array.prototype.every,array,testing",
        "paid": true,
        "answer": "`Array.prototype.every` tests whether all elements in an array pass the test implemented by the provided function. It returns `true` if all elements satisfy the function, otherwise `false`.",
        "example": "const arr = [1, 2, 3];\nconst allGreaterThan0 = arr.every(x => x > 0);\nconsole.log(allGreaterThan0); // true"
    },
    {
        "title": "What is the `Array.prototype.reduce` method in JavaScript?",
        "category": "JavaScript",
        "description": "`reduce` executes a reducer function on each element to reduce it to a single value.",
        "tags": "Array.prototype.reduce,array,reduction",
        "paid": true,
        "answer": "`Array.prototype.reduce` executes a reducer function (that you provide) on each element of the array, resulting in a single output value. The reducer function takes an accumulator and the current value as arguments.",
        "example": "const arr = [1, 2, 3];\nconst sum = arr.reduce((acc, val) => acc + val, 0);\nconsole.log(sum); // 6"
    },
    {
        "title": "What is the `Array.prototype.flat` method in JavaScript?",
        "category": "JavaScript",
        "description": "`flat` creates a new array with all sub-array elements concatenated into it.",
        "tags": "Array.prototype.flat,array,concatenation",
        "paid": true,
        "answer": "`Array.prototype.flat` creates a new array with all sub-array elements concatenated into it recursively up to the specified depth. It is useful for flattening nested arrays.",
        "example": "const arr = [1, [2, [3, 4]]];\nconst flatArr = arr.flat(2);\nconsole.log(flatArr); // [1, 2, 3, 4]"
    },
    {
        "title": "What is the `Array.prototype.flatMap` method in JavaScript?",
        "category": "JavaScript",
        "description": "`flatMap` first maps each element using a mapping function, then flattens the result into a new array.",
        "tags": "Array.prototype.flatMap,map,flatten",
        "paid": true,
        "answer": "`Array.prototype.flatMap` first maps each element using a provided function, then flattens the result into a new array. It is useful for combining map and flatten operations in a single method.",
        "example": "const arr = [1, 2, 3];\nconst flatMapped = arr.flatMap(x => [x, x * 2]);\nconsole.log(flatMapped); // [1, 2, 2, 4, 3, 6]"
    },
    {
        "title": "What is the `Array.prototype.sort` method in JavaScript?",
        "category": "JavaScript",
        "description": "`sort` sorts the elements of an array in place.",
        "tags": "Array.prototype.sort,array,sorting",
        "paid": true,
        "answer": "`Array.prototype.sort` sorts the elements of an array in place and returns the sorted array. The sorting is based on string conversion by default, but you can provide a custom comparator function.",
        "example": "const arr = [3, 1, 2];\narr.sort();\nconsole.log(arr); // [1, 2, 3]"
    },
    {
        "title": "What is the `Array.prototype.reverse` method in JavaScript?",
        "category": "JavaScript",
        "description": "`reverse` reverses the elements of an array in place.",
        "tags": "Array.prototype.reverse,array,reversing",
        "paid": true,
        "answer": "`Array.prototype.reverse` reverses the elements of an array in place. It modifies the original array and returns the reversed array.",
        "example": "const arr = [1, 2, 3];\narr.reverse();\nconsole.log(arr); // [3, 2, 1]"
    },
    {
        "title": "What is the `Array.prototype.splice` method in JavaScript?",
        "category": "JavaScript",
        "description": "`splice` changes the contents of an array by removing or replacing elements.",
        "tags": "Array.prototype.splice,array,modification",
        "paid": true,
        "answer": "`Array.prototype.splice` changes the contents of an array by removing or replacing existing elements and/or adding new elements. It can be used to modify an array in place.",
        "example": "const arr = [1, 2, 3];\narr.splice(1, 1, 'a', 'b');\nconsole.log(arr); // [1, 'a', 'b', 3]"
    },
    {
        "title": "What is the `Array.prototype.slice` method in JavaScript?",
        "category": "JavaScript",
        "description": "`slice` returns a shallow copy of a portion of an array into a new array.",
        "tags": "Array.prototype.slice,array,copy",
        "paid": true,
        "answer": "`Array.prototype.slice` returns a shallow copy of a portion of an array into a new array selected from start to end (end not included). It does not modify the original array.",
        "example": "const arr = [1, 2, 3];\nconst newArr = arr.slice(1, 2);\nconsole.log(newArr); // [2]"
    },
    {
        "title": "What is the `Array.prototype.concat` method in JavaScript?",
        "category": "JavaScript",
        "description": "`concat` merges multiple arrays into a single array.",
        "tags": "Array.prototype.concat,array,merging",
        "paid": true,
        "answer": "`Array.prototype.concat` is used to merge two or more arrays into a single array. It does not modify the original arrays but returns a new array containing the combined elements.",
        "example": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst newArr = arr1.concat(arr2);\nconsole.log(newArr); // [1, 2, 3, 4]"
    },
    {
        "title": "What is the `Array.prototype.join` method in JavaScript?",
        "category": "JavaScript",
        "description": "`join` joins all elements of an array into a string.",
        "tags": "Array.prototype.join,array,string",
        "paid": true,
        "answer": "`Array.prototype.join` joins all elements of an array into a single string, separated by a specified separator. If no separator is provided, a comma is used by default.",
        "example": "const arr = ['a', 'b', 'c'];\nconsole.log(arr.join('-')); // 'a-b-c'"
    },
    {
        "title": "What is the `Array.prototype.fill` method in JavaScript?",
        "category": "JavaScript",
        "description": "`fill` fills all elements of an array with a static value.",
        "tags": "Array.prototype.fill,array,static value",
        "paid": true,
        "answer": "`Array.prototype.fill` changes all elements in an array to a static value, from a start index to an end index. It modifies the original array and returns it.",
        "example": "const arr = [1, 2, 3];\narr.fill(0);\nconsole.log(arr); // [0, 0, 0]"
    },
    {
        "title": "What is the `Array.prototype.map` method in JavaScript?",
        "category": "JavaScript",
        "description": "`map` creates a new array with the results of calling a provided function on every element.",
        "tags": "Array.prototype.map,array,transformation",
        "paid": true,
        "answer": "`Array.prototype.map` creates a new array populated with the results of calling a provided function on every element in the calling array. It does not modify the original array.",
        "example": "const arr = [1, 2, 3];\nconst doubled = arr.map(x => x * 2);\nconsole.log(doubled); // [2, 4, 6]"
    },
    {
        "title": "What is the `Array.prototype.reduceRight` method in JavaScript?",
        "category": "JavaScript",
        "description": "`reduceRight` executes a reducer function from right to left on each element.",
        "tags": "Array.prototype.reduceRight,array,reduction",
        "paid": true,
        "answer": "`Array.prototype.reduceRight` executes a reducer function on each element of the array from right to left. It reduces the array to a single value, similar to `reduce`, but processes elements in reverse order.",
        "example": "const arr = [1, 2, 3];\nconst sum = arr.reduceRight((acc, val) => acc + val, 0);\nconsole.log(sum); // 6"
    },
    {
        "title": "What is the `Array.prototype.unshift` method in JavaScript?",
        "category": "JavaScript",
        "description": "`unshift` adds one or more elements to the beginning of an array.",
        "tags": "Array.prototype.unshift,array,modification",
        "paid": true,
        "answer": "`Array.prototype.unshift` adds one or more elements to the beginning of an array and returns the new length of the array. It modifies the original array.",
        "example": "const arr = [2, 3];\narr.unshift(1);\nconsole.log(arr); // [1, 2, 3]"
    },
    {
        "title": "What is the `Array.prototype.shift` method in JavaScript?",
        "category": "JavaScript",
        "description": "`shift` removes the first element from an array.",
        "tags": "Array.prototype.shift,array,modification",
        "paid": true,
        "answer": "`Array.prototype.shift` removes the first element from an array and returns that element. It modifies the original array by shifting all other elements to a lower index.",
        "example": "const arr = [1, 2, 3];\nconst removed = arr.shift();\nconsole.log(removed); // 1\nconsole.log(arr); // [2, 3]"
    },
    {
        "title": "What is the `Array.prototype.map` method in JavaScript?",
        "category": "JavaScript",
        "description": "`map` creates a new array with the results of calling a function on every element of an array.",
        "tags": "Array.prototype.map,transform,iterate",
        "paid": true,
        "answer": "`Array.prototype.map` creates a new array by applying a provided function to each element of the original array. It does not modify the original array and returns a new array with transformed elements.",
        "example": "const numbers = [1, 2, 3];\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6]"
    },
    {
        "title": "What is the `Array.prototype.filter` method in JavaScript?",
        "category": "JavaScript",
        "description": "`filter` creates a new array with all elements that pass a test implemented by a function.",
        "tags": "Array.prototype.filter,filter,test",
        "paid": true,
        "answer": "`Array.prototype.filter` creates a new array with all elements that pass a provided test function. It does not modify the original array and returns a new array with only the elements that satisfy the condition.",
        "example": "const numbers = [1, 2, 3, 4];\nconst evenNumbers = numbers.filter(num => num % 2 === 0);\nconsole.log(evenNumbers); // [2, 4]"
    },
    {
        "title": "What is the `Array.prototype.reduce` method in JavaScript?",
        "category": "JavaScript",
        "description": "`reduce` executes a reducer function on each element of an array, resulting in a single output value.",
        "tags": "Array.prototype.reduce,reduce,accumulate",
        "paid": true,
        "answer": "`Array.prototype.reduce` executes a reducer function on each element of an array, accumulating a single result. It takes a callback function and an optional initial value, and returns the final accumulated result.",
        "example": "const numbers = [1, 2, 3];\nconst sum = numbers.reduce((acc, num) => acc + num, 0);\nconsole.log(sum); // 6"
    },
    {
        "title": "What is the `Array.prototype.find` method in JavaScript?",
        "category": "JavaScript",
        "description": "`find` returns the first element that satisfies a provided testing function.",
        "tags": "Array.prototype.find,find,test",
        "paid": true,
        "answer": "`Array.prototype.find` returns the first element in the array that satisfies the provided testing function. If no elements satisfy the function, it returns `undefined`. It does not modify the original array.",
        "example": "const numbers = [1, 2, 3];\nconst firstEven = numbers.find(num => num % 2 === 0);\nconsole.log(firstEven); // 2"
    },
    {
        "title": "What is the `Array.prototype.some` method in JavaScript?",
        "category": "JavaScript",
        "description": "`some` tests whether at least one element in an array passes a test implemented by a function.",
        "tags": "Array.prototype.some,test,boolean",
        "paid": true,
        "answer": "`Array.prototype.some` tests whether at least one element in the array passes a provided test function. It returns `true` if at least one element passes the test, otherwise `false`. It does not modify the original array.",
        "example": "const numbers = [1, 2, 3];\nconst hasEven = numbers.some(num => num % 2 === 0);\nconsole.log(hasEven); // true"
    },
    {
        "title": "What is the `Array.prototype.every` method in JavaScript?",
        "category": "JavaScript",
        "description": "`every` tests whether all elements in an array pass a test implemented by a function.",
        "tags": "Array.prototype.every,test,boolean",
        "paid": true,
        "answer": "`Array.prototype.every` tests whether all elements in the array pass a provided test function. It returns `true` if all elements pass the test, otherwise `false`. It does not modify the original array.",
        "example": "const numbers = [2, 4, 6];\nconst allEven = numbers.every(num => num % 2 === 0);\nconsole.log(allEven); // true"
    },
    {
        "title": "What is the `Array.prototype.forEach` method in JavaScript?",
        "category": "JavaScript",
        "description": "`forEach` executes a provided function once for each array element.",
        "tags": "Array.prototype.forEach,iterate,function",
        "paid": true,
        "answer": "`Array.prototype.forEach` executes a provided function once for each element in the array. It does not return a value and does not modify the original array, but can be used to perform side effects on each element.",
        "example": "const numbers = [1, 2, 3];\nnumbers.forEach(num => console.log(num)); // 1 2 3"
    },
    {
        "title": "What is the `Array.prototype.sort` method in JavaScript?",
        "category": "JavaScript",
        "description": "`sort` sorts the elements of an array in place and returns the sorted array.",
        "tags": "Array.prototype.sort,sort,order",
        "paid": true,
        "answer": "`Array.prototype.sort` sorts the elements of an array in place and returns the sorted array. The sorting is performed based on the UTF-16 code units of the elements by default, but a custom comparison function can be provided for custom sorting.",
        "example": "const numbers = [3, 1, 2];\nnumbers.sort();\nconsole.log(numbers); // [1, 2, 3]"
    },
    {
        "title": "What is the `Array.prototype.reverse` method in JavaScript?",
        "category": "JavaScript",
        "description": "`reverse` reverses the elements of an array in place.",
        "tags": "Array.prototype.reverse,reverse,array",
        "paid": true,
        "answer": "`Array.prototype.reverse` reverses the elements of an array in place, meaning the original array is modified. It returns the reference to the same array with elements in reverse order.",
        "example": "const numbers = [1, 2, 3];\nnumbers.reverse();\nconsole.log(numbers); // [3, 2, 1]"
    },
    {
        "title": "What is the `Array.prototype.flat` method in JavaScript?",
        "category": "JavaScript",
        "description": "`flat` creates a new array with all sub-array elements concatenated into it recursively up to a specified depth.",
        "tags": "Array.prototype.flat,flatten,array",
        "paid": true,
        "answer": "`Array.prototype.flat` creates a new array with all sub-array elements concatenated into it recursively up to the specified depth. It helps to flatten nested arrays into a single array.",
        "example": "const arr = [1, [2, [3, [4]]]];\nconst flatArr = arr.flat(2);\nconsole.log(flatArr); // [1, 2, 3, [4]]"
    },
    {
        "title": "What is the `Array.prototype.flatMap` method in JavaScript?",
        "category": "JavaScript",
        "description": "`flatMap` first maps each element using a mapping function, then flattens the result into a new array.",
        "tags": "Array.prototype.flatMap,map,flatten",
        "paid": true,
        "answer": "`Array.prototype.flatMap` maps each element using a provided mapping function and then flattens the resulting array into a new array. It combines the map and flat operations into a single method.",
        "example": "const arr = [1, 2, 3];\nconst flatMapArr = arr.flatMap(x => [x, x * 2]);\nconsole.log(flatMapArr); // [1, 2, 2, 4, 3, 6]"
    },
    {
        "title": "What is the `Array.prototype.includes` method in JavaScript?",
        "category": "JavaScript",
        "description": "`includes` determines if an array contains a specified element.",
        "tags": "Array.prototype.includes,search,boolean",
        "paid": true,
        "answer": "`Array.prototype.includes` checks if an array contains a specified element and returns `true` if it is found, otherwise `false`. It is case-sensitive and supports optional starting index.",
        "example": "const arr = [1, 2, 3];\nconsole.log(arr.includes(2)); // true\nconsole.log(arr.includes(4)); // false"
    },
    {
        "title": "What is the `Array.prototype.splice` method in JavaScript?",
        "category": "JavaScript",
        "description": "`splice` changes the contents of an array by removing or replacing existing elements and/or adding new elements.",
        "tags": "Array.prototype.splice,modify,array",
        "paid": true,
        "answer": "`Array.prototype.splice` changes the contents of an array by removing, replacing, or adding elements at a specified index. It modifies the original array and returns an array of removed elements.",
        "example": "const arr = [1, 2, 3];\narr.splice(1, 1, 'a', 'b');\nconsole.log(arr); // [1, 'a', 'b', 3]"
    },
    {
        "title": "What is the `Array.prototype.concat` method in JavaScript?",
        "category": "JavaScript",
        "description": "`concat` merges two or more arrays into a new array.",
        "tags": "Array.prototype.concat,merge,arrays",
        "paid": true,
        "answer": "`Array.prototype.concat` merges two or more arrays into a new array. It does not modify the original arrays and can take any number of arguments, including arrays and values.",
        "example": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst merged = arr1.concat(arr2);\nconsole.log(merged); // [1, 2, 3, 4]"
    },
    {
        "title": "What is the `Array.prototype.join` method in JavaScript?",
        "category": "JavaScript",
        "description": "`join` joins all elements of an array into a string separated by a specified separator.",
        "tags": "Array.prototype.join,join,string",
        "paid": true,
        "answer": "`Array.prototype.join` joins all elements of an array into a string, with elements separated by a specified separator. The default separator is a comma if none is provided.",
        "example": "const arr = ['a', 'b', 'c'];\nconsole.log(arr.join('-')); // 'a-b-c'"
    },
    {
        "title": "What is the `Array.prototype.slice` method in JavaScript?",
        "category": "JavaScript",
        "description": "`slice` returns a shallow copy of a portion of an array into a new array object.",
        "tags": "Array.prototype.slice,copy,shallow",
        "paid": true,
        "answer": "`Array.prototype.slice` returns a shallow copy of a portion of an array into a new array object, selected from start to end (end not included). It does not modify the original array.",
        "example": "const arr = [1, 2, 3, 4];\nconst sliced = arr.slice(1, 3);\nconsole.log(sliced); // [2, 3]"
    },
    {
        "title": "What is the `Array.prototype.findIndex` method in JavaScript?",
        "category": "JavaScript",
        "description": "`findIndex` returns the index of the first element that satisfies a provided testing function.",
        "tags": "Array.prototype.findIndex,index,test",
        "paid": true,
        "answer": "`Array.prototype.findIndex` returns the index of the first element in the array that satisfies a provided test function. If no elements satisfy the function, it returns `-1`. It does not modify the original array.",
        "example": "const arr = [5, 12, 8, 130, 44];\nconst index = arr.findIndex(num => num > 10);\nconsole.log(index); // 1"
    },
    {
        "title": "What is the `Array.prototype.fill` method in JavaScript?",
        "category": "JavaScript",
        "description": "`fill` fills all the elements of an array from a start index to an end index with a static value.",
        "tags": "Array.prototype.fill,fill,value",
        "paid": true,
        "answer": "`Array.prototype.fill` fills all the elements of an array from a specified start index to an end index with a static value. It modifies the original array and returns the updated array.",
        "example": "const arr = [1, 2, 3, 4];\narr.fill(0, 1, 3);\nconsole.log(arr); // [1, 0, 0, 4]"
    },
    {
        "title": "What is the `Array.prototype.reduceRight` method in JavaScript?",
        "category": "JavaScript",
        "description": "`reduceRight` applies a function against an accumulator and each element from right to left.",
        "tags": "Array.prototype.reduceRight,reduce,accumulator",
        "paid": true,
        "answer": "`Array.prototype.reduceRight` applies a function against an accumulator and each element of the array from right to left. It is similar to `reduce`, but processes elements in reverse order.",
        "example": "const arr = [1, 2, 3];\nconst result = arr.reduceRight((acc, num) => acc + num);\nconsole.log(result); // 6"
    },
    {
        "title": "What is the `Array.prototype.sort` method in JavaScript?",
        "category": "JavaScript",
        "description": "`sort` sorts the elements of an array in place and returns the sorted array.",
        "tags": "Array.prototype.sort,sort,order",
        "paid": true,
        "answer": "`Array.prototype.sort` sorts the elements of an array in place and returns the sorted array. The sorting is based on the UTF-16 code units of the elements by default, but can be customized with a comparison function.",
        "example": "const arr = [3, 1, 2];\narr.sort();\nconsole.log(arr); // [1, 2, 3]"
    },
    {
        "title": "What is the `Array.prototype.some` method in JavaScript?",
        "category": "JavaScript",
        "description": "`some` tests whether at least one element in the array passes a test implemented by a function.",
        "tags": "Array.prototype.some,test,boolean",
        "paid": true,
        "answer": "`Array.prototype.some` tests whether at least one element in the array passes a provided test function. It returns `true` if at least one element satisfies the condition, otherwise `false`. It does not modify the original array.",
        "example": "const arr = [1, 2, 3];\nconst hasEven = arr.some(num => num % 2 === 0);\nconsole.log(hasEven); // true"
    },
    {
        "title": "What is the `Array.prototype.every` method in JavaScript?",
        "category": "JavaScript",
        "description": "`every` tests whether all elements in an array pass a test implemented by a function.",
        "tags": "Array.prototype.every,test,boolean",
        "paid": true,
        "answer": "`Array.prototype.every` tests whether all elements in the array pass a provided test function. It returns `true` if all elements pass the test, otherwise `false`. It does not modify the original array.",
        "example": "const arr = [2, 4, 6];\nconst allEven = arr.every(num => num % 2 === 0);\nconsole.log(allEven); // true"
    },
    {
        "title": "What is the `Array.prototype.includes` method in JavaScript?",
        "category": "JavaScript",
        "description": "`includes` checks if an array contains a specified element.",
        "tags": "Array.prototype.includes,search,boolean",
        "paid": true,
        "answer": "`Array.prototype.includes` checks if an array contains a specified element and returns `true` if it is found, otherwise `false`. It is case-sensitive and supports an optional starting index.",
        "example": "const arr = [1, 2, 3];\nconsole.log(arr.includes(2)); // true\nconsole.log(arr.includes(4)); // false"
    },
    {
        "title": "What is the `Array.prototype.indexOf` method in JavaScript?",
        "category": "JavaScript",
        "description": "`indexOf` returns the index of the first occurrence of a specified element.",
        "tags": "Array.prototype.indexOf,search,index",
        "paid": true,
        "answer": "`Array.prototype.indexOf` returns the index of the first occurrence of a specified element within the array. If the element is not found, it returns `-1`. It performs a strict comparison (===).",
        "example": "const arr = ['a', 'b', 'c'];\nconsole.log(arr.indexOf('b')); // 1\nconsole.log(arr.indexOf('d')); // -1"
    },
    {
        "title": "What is the `Array.prototype.lastIndexOf` method in JavaScript?",
        "category": "JavaScript",
        "description": "`lastIndexOf` returns the index of the last occurrence of a specified element.",
        "tags": "Array.prototype.lastIndexOf,search,index",
        "paid": true,
        "answer": "`Array.prototype.lastIndexOf` returns the index of the last occurrence of a specified element within the array. If the element is not found, it returns `-1`. It performs a strict comparison (===).",
        "example": "const arr = [1, 2, 3, 2];\nconsole.log(arr.lastIndexOf(2)); // 3\nconsole.log(arr.lastIndexOf(4)); // -1"
    },
    {
        "title": "What is the `Array.prototype.slice` method in JavaScript?",
        "category": "JavaScript",
        "description": "`slice` returns a shallow copy of a portion of an array into a new array object.",
        "tags": "Array.prototype.slice,copy,shallow",
        "paid": true,
        "answer": "`Array.prototype.slice` returns a shallow copy of a portion of an array into a new array object, selected from start to end (end not included). It does not modify the original array.",
        "example": "const arr = [1, 2, 3, 4];\nconst sliced = arr.slice(1, 3);\nconsole.log(sliced); // [2, 3]"
    },
    {
        "title": "What is the `Array.prototype.splice` method in JavaScript?",
        "category": "JavaScript",
        "description": "`splice` changes the contents of an array by removing, replacing, or adding elements.",
        "tags": "Array.prototype.splice,modify,array",
        "paid": true,
        "answer": "`Array.prototype.splice` changes the contents of an array by removing, replacing, or adding elements at a specified index. It modifies the original array and returns an array of removed elements.",
        "example": "const arr = [1, 2, 3];\narr.splice(1, 1, 'a', 'b');\nconsole.log(arr); // [1, 'a', 'b', 3]"
    },
    {
        "title": "What is the `Array.prototype.fill` method in JavaScript?",
        "category": "JavaScript",
        "description": "`fill` fills all elements of an array with a static value from a start index to an end index.",
        "tags": "Array.prototype.fill,fill,value",
        "paid": true,
        "answer": "`Array.prototype.fill` fills all elements of an array from a start index to an end index with a static value. It modifies the original array and returns the updated array.",
        "example": "const arr = [1, 2, 3, 4];\narr.fill(0, 1, 3);\nconsole.log(arr); // [1, 0, 0, 4]"
    },
    {
        "title": "What is the `Array.prototype.concat` method in JavaScript?",
        "category": "JavaScript",
        "description": "`concat` merges two or more arrays into a new array.",
        "tags": "Array.prototype.concat,merge,arrays",
        "paid": true,
        "answer": "`Array.prototype.concat` merges two or more arrays into a new array. It does not modify the original arrays and can take any number of arguments, including arrays and values.",
        "example": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst merged = arr1.concat(arr2);\nconsole.log(merged); // [1, 2, 3, 4]"
    },
    {
        "title": "What is the `Array.prototype.join` method in JavaScript?",
        "category": "JavaScript",
        "description": "`join` joins all elements of an array into a string separated by a specified separator.",
        "tags": "Array.prototype.join,join,string",
        "paid": true,
        "answer": "`Array.prototype.join` joins all elements of an array into a string, with elements separated by a specified separator. The default separator is a comma if none is provided.",
        "example": "const arr = ['a', 'b', 'c'];\nconsole.log(arr.join('-')); // 'a-b-c'"
    },
    {
        "title": "What is the `Array.prototype.reverse` method in JavaScript?",
        "category": "JavaScript",
        "description": "`reverse` reverses the elements of an array in place.",
        "tags": "Array.prototype.reverse,reverse,array",
        "paid": true,
        "answer": "`Array.prototype.reverse` reverses the elements of an array in place, meaning the original array is modified. It returns the reference to the same array with elements in reverse order.",
        "example": "const arr = [1, 2, 3];\narr.reverse();\nconsole.log(arr); // [3, 2, 1]"
    },
    {
        "title": "What is the `Array.prototype.flat` method in JavaScript?",
        "category": "JavaScript",
        "description": "`flat` creates a new array with all sub-array elements concatenated into it recursively up to a specified depth.",
        "tags": "Array.prototype.flat,flatten,array",
        "paid": true,
        "answer": "`Array.prototype.flat` creates a new array with all sub-array elements concatenated into it recursively up to the specified depth. It helps to flatten nested arrays into a single array.",
        "example": "const arr = [1, [2, [3, [4]]]];\nconst flatArr = arr.flat(2);\nconsole.log(flatArr); // [1, 2, 3, [4]]"
    },
    {
        "title": "What is the `Array.prototype.flatMap` method in JavaScript?",
        "category": "JavaScript",
        "description": "`flatMap` first maps each element using a mapping function, then flattens the result into a new array.",
        "tags": "Array.prototype.flatMap,map,flatten",
        "paid": true,
        "answer": "`Array.prototype.flatMap` maps each element using a provided mapping function and then flattens the resulting array into a new array. It combines the map and flat operations into a single method.",
        "example": "const arr = [1, 2, 3];\nconst flatMapArr = arr.flatMap(x => [x, x * 2]);\nconsole.log(flatMapArr); // [1, 2, 2, 4, 3, 6]"
    },
    {
        "title": "What is the `Array.prototype.find` method in JavaScript?",
        "category": "JavaScript",
        "description": "`find` returns the first element that satisfies a provided testing function.",
        "tags": "Array.prototype.find,find,test",
        "paid": true,
        "answer": "`Array.prototype.find` returns the first element in the array that satisfies the provided testing function. If no elements satisfy the function, it returns `undefined`. It does not modify the original array.",
        "example": "const arr = [1, 2, 3];\nconst firstEven = arr.find(num => num % 2 === 0);\nconsole.log(firstEven); // 2"
    },
    {
        "title": "What is the `Array.prototype.findIndex` method in JavaScript?",
        "category": "JavaScript",
        "description": "`findIndex` returns the index of the first element that satisfies a provided testing function.",
        "tags": "Array.prototype.findIndex,index,test",
        "paid": true,
        "answer": "`Array.prototype.findIndex` returns the index of the first element in the array that satisfies the provided testing function. If no elements satisfy the function, it returns `-1`. It does not modify the original array.",
        "example": "const arr = [5, 12, 8];\nconst index = arr.findIndex(num => num > 10);\nconsole.log(index); // 1"
    },
    {
        "title": "What is the `Array.prototype.sort` method in JavaScript?",
        "category": "JavaScript",
        "description": "`sort` sorts the elements of an array in place and returns the sorted array.",
        "tags": "Array.prototype.sort,sort,order",
        "paid": true,
        "answer": "`Array.prototype.sort` sorts the elements of an array in place and returns the sorted array. By default, the elements are sorted as strings. A custom sorting function can be provided for different sorting logic.",
        "example": "const arr = [3, 1, 2];\narr.sort();\nconsole.log(arr); // [1, 2, 3]"
    },
    {
        "title": "What is the `Array.prototype.reduce` method in JavaScript?",
        "category": "JavaScript",
        "description": "`reduce` executes a reducer function on each element of an array, resulting in a single output value.",
        "tags": "Array.prototype.reduce,reduce,accumulate",
        "paid": true,
        "answer": "`Array.prototype.reduce` executes a reducer function on each element of the array, accumulating a single result. It takes a callback function and an optional initial value, and returns the final accumulated result.",
        "example": "const arr = [1, 2, 3];\nconst sum = arr.reduce((acc, num) => acc + num, 0);\nconsole.log(sum); // 6"
    },
    {
        "title": "What is the `Array.prototype.reduceRight` method in JavaScript?",
        "category": "JavaScript",
        "description": "`reduceRight` executes a reducer function on each element of an array from right to left.",
        "tags": "Array.prototype.reduceRight,reduce,accumulate",
        "paid": true,
        "answer": "`Array.prototype.reduceRight` executes a reducer function on each element of the array from right to left, accumulating a single result. It is similar to `reduce`, but processes elements in reverse order.",
        "example": "const arr = [1, 2, 3];\nconst result = arr.reduceRight((acc, num) => acc + num, 0);\nconsole.log(result); // 6"
    },
    {
        "title": "What is the `Array.prototype.copyWithin` method in JavaScript?",
        "category": "JavaScript",
        "description": "`copyWithin` shallow copies part of an array to another location in the same array and returns it.",
        "tags": "Array.prototype.copyWithin,copy,modify",
        "paid": true,
        "answer": "`Array.prototype.copyWithin` shallow copies a portion of the array to another location within the same array. It modifies the original array and returns the modified array.",
        "example": "const arr = [1, 2, 3, 4];\narr.copyWithin(0, 2, 4);\nconsole.log(arr); // [3, 4, 3, 4]"
    },
    {
        "title": "What is the `Array.prototype.from` method in JavaScript?",
        "category": "JavaScript",
        "description": "`from` creates a new array instance from an array-like or iterable object.",
        "tags": "Array.prototype.from,create,convert",
        "paid": true,
        "answer": "`Array.prototype.from` creates a new array instance from an array-like or iterable object. It can also take a map function to modify the elements while creating the new array.",
        "example": "const arrLike = { length: 3, 0: 'a', 1: 'b', 2: 'c' };\nconst arr = Array.from(arrLike);\nconsole.log(arr); // ['a', 'b', 'c']"
    },
    {
        "title": "What is the `Array.prototype.isArray` method in JavaScript?",
        "category": "JavaScript",
        "description": "`isArray` determines whether a value is an array.",
        "tags": "Array.prototype.isArray,type-check",
        "paid": true,
        "answer": "`Array.isArray` determines whether a value is an array. It returns `true` if the value is an array, otherwise `false`.",
        "example": "console.log(Array.isArray([1, 2, 3])); // true\nconsole.log(Array.isArray({})); // false"
    },
    {
        "title": "What is the `Array.prototype.concat` method in JavaScript?",
        "category": "JavaScript",
        "description": "`concat` merges two or more arrays into a new array.",
        "tags": "Array.prototype.concat,merge,arrays",
        "paid": true,
        "answer": "`Array.prototype.concat` merges two or more arrays into a new array. It does not modify the original arrays and can take any number of arguments, including arrays and values.",
        "example": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst merged = arr1.concat(arr2);\nconsole.log(merged); // [1, 2, 3, 4]"
    },
    {
        "title": "What is the `Array.prototype.toString` method in JavaScript?",
        "category": "JavaScript",
        "description": "`toString` returns a string representation of an array.",
        "tags": "Array.prototype.toString,string,convert",
        "paid": true,
        "answer": "`Array.prototype.toString` returns a string representation of the array by concatenating its elements with commas. It does not modify the original array.",
        "example": "const arr = [1, 2, 3];\nconsole.log(arr.toString()); // '1,2,3'"
    },
    {
        "title": "What is the `Array.prototype.unshift` method in JavaScript?",
        "category": "JavaScript",
        "description": "`unshift` adds one or more elements to the beginning of an array and returns the new length.",
        "tags": "Array.prototype.unshift,add,beginning",
        "paid": true,
        "answer": "`Array.prototype.unshift` adds one or more elements to the beginning of an array and returns the new length of the array. It modifies the original array.",
        "example": "const arr = [2, 3];\narr.unshift(1);\nconsole.log(arr); // [1, 2, 3]"
    },
    {
        "title": "What is the `Array.prototype.pop` method in JavaScript?",
        "category": "JavaScript",
        "description": "`pop` removes the last element from an array and returns it.",
        "tags": "Array.prototype.pop,remove,last",
        "paid": true,
        "answer": "`Array.prototype.pop` removes the last element from an array and returns that element. It modifies the original array.",
        "example": "const arr = [1, 2, 3];\nconst last = arr.pop();\nconsole.log(last); // 3\nconsole.log(arr); // [1, 2]"
    },
    {
        "title": "What is the `Array.prototype.shift` method in JavaScript?",
        "category": "JavaScript",
        "description": "`shift` removes the first element from an array and returns it.",
        "tags": "Array.prototype.shift,remove,first",
        "paid": true,
        "answer": "`Array.prototype.shift` removes the first element from an array and returns that element. It modifies the original array and shifts all subsequent elements down by one.",
        "example": "const arr = [1, 2, 3];\nconst first = arr.shift();\nconsole.log(first); // 1\nconsole.log(arr); // [2, 3]"
    },
    {
        "title": "What is the `Array.prototype.entries` method in JavaScript?",
        "category": "JavaScript",
        "description": "`entries` returns a new Array Iterator object that contains the key/value pairs for each index in the array.",
        "tags": "Array.prototype.entries,iterator",
        "paid": true,
        "answer": "`Array.prototype.entries` returns a new Array Iterator object that contains the key/value pairs for each index in the array. It allows iteration over the array's indices and values.",
        "example": "const arr = ['a', 'b', 'c'];\nconst iterator = arr.entries();\nfor (const [index, element] of iterator) {\n  console.log(index, element);\n}\n// Output:\n// 0 'a'\n// 1 'b'\n// 2 'c'"
    },
    {
        "title": "What is the `Array.prototype.keys` method in JavaScript?",
        "category": "JavaScript",
        "description": "`keys` returns a new Array Iterator object that contains the keys (indices) for each index in the array.",
        "tags": "Array.prototype.keys,iterator",
        "paid": true,
        "answer": "`Array.prototype.keys` returns a new Array Iterator object that contains the keys (indices) for each index in the array. It allows iteration over the array's indices.",
        "example": "const arr = ['a', 'b', 'c'];\nconst iterator = arr.keys();\nfor (const key of iterator) {\n  console.log(key);\n}\n// Output:\n// 0\n// 1\n// 2"
    },
    {
        "title": "What is the `Array.prototype.values` method in JavaScript?",
        "category": "JavaScript",
        "description": "`values` returns a new Array Iterator object that contains the values for each index in the array.",
        "tags": "Array.prototype.values,iterator",
        "paid": true,
        "answer": "`Array.prototype.values` returns a new Array Iterator object that contains the values for each index in the array. It allows iteration over the array's values.",
        "example": "const arr = ['a', 'b', 'c'];\nconst iterator = arr.values();\nfor (const value of iterator) {\n  console.log(value);\n}\n// Output:\n// 'a'\n// 'b'\n// 'c'"
    },
    {
        "title": "What is the `Array.prototype.flatMap` method in JavaScript?",
        "category": "JavaScript",
        "description": "`flatMap` maps each element using a mapping function and then flattens the result into a new array.",
        "tags": "Array.prototype.flatMap,map,flatten",
        "paid": true,
        "answer": "`Array.prototype.flatMap` maps each element using a provided mapping function and then flattens the resulting array into a new array. It combines the map and flat operations into a single method.",
        "example": "const arr = [1, 2, 3];\nconst flatMapArr = arr.flatMap(x => [x, x * 2]);\nconsole.log(flatMapArr); // [1, 2, 2, 4, 3, 6]"
    },
    {
        "title": "What is the `Array.prototype.reduce` method in JavaScript?",
        "category": "JavaScript",
        "description": "`reduce` executes a reducer function on each element of an array, resulting in a single output value.",
        "tags": "Array.prototype.reduce,reduce,accumulate",
        "paid": true,
        "answer": "`Array.prototype.reduce` executes a reducer function on each element of the array, accumulating a single result. It takes a callback function and an optional initial value, and returns the final accumulated result.",
        "example": "const arr = [1, 2, 3];\nconst sum = arr.reduce((acc, num) => acc + num, 0);\nconsole.log(sum); // 6"
    },
    {
        "title": "What is the `Array.prototype.map` method in JavaScript?",
        "category": "JavaScript",
        "description": "`map` creates a new array with the results of calling a provided function on every element in the calling array.",
        "tags": "Array.prototype.map,map,transform",
        "paid": true,
        "answer": "`Array.prototype.map` creates a new array with the results of calling a provided function on every element in the calling array. It does not modify the original array.",
        "example": "const arr = [1, 2, 3];\nconst doubled = arr.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6]"
    },
    {
        "title": "What is the `Array.prototype.filter` method in JavaScript?",
        "category": "JavaScript",
        "description": "`filter` creates a new array with all elements that pass the test implemented by the provided function.",
        "tags": "Array.prototype.filter,filter,test",
        "paid": true,
        "answer": "`Array.prototype.filter` creates a new array with all elements that pass a provided test function. It does not modify the original array.",
        "example": "const arr = [1, 2, 3, 4];\nconst evens = arr.filter(num => num % 2 === 0);\nconsole.log(evens); // [2, 4]"
    },
    {
        "title": "What is the `Array.prototype.forEach` method in JavaScript?",
        "category": "JavaScript",
        "description": "`forEach` executes a provided function once for each array element.",
        "tags": "Array.prototype.forEach,iterate,function",
        "paid": true,
        "answer": "`Array.prototype.forEach` executes a provided function once for each element in the array. It does not return a value and does not modify the original array.",
        "example": "const arr = [1, 2, 3];\narr.forEach(num => console.log(num));\n// Output:\n// 1\n// 2\n// 3"
    },
    {
        "title": "What is the `Array.prototype.some` method in JavaScript?",
        "category": "JavaScript",
        "description": "`some` tests whether at least one element in the array passes a test implemented by a function.",
        "tags": "Array.prototype.some,test,boolean",
        "paid": true,
        "answer": "`Array.prototype.some` tests whether at least one element in the array passes a provided test function. It returns `true` if at least one element satisfies the condition, otherwise `false`. It does not modify the original array.",
        "example": "const arr = [1, 2, 3];\nconst hasEven = arr.some(num => num % 2 === 0);\nconsole.log(hasEven); // true"
    },
    {
        "title": "What is the `Array.prototype.every` method in JavaScript?",
        "category": "JavaScript",
        "description": "`every` tests whether all elements in an array pass a test implemented by a function.",
        "tags": "Array.prototype.every,test,boolean",
        "paid": true,
        "answer": "`Array.prototype.every` tests whether all elements in the array pass a provided test function. It returns `true` if all elements pass the test, otherwise `false`. It does not modify the original array.",
        "example": "const arr = [2, 4, 6];\nconst allEven = arr.every(num => num % 2 === 0);\nconsole.log(allEven); // true"
    },
    {
        "title": "What is the `Array.prototype.includes` method in JavaScript?",
        "category": "JavaScript",
        "description": "`includes` determines whether an array contains a certain value among its entries.",
        "tags": "Array.prototype.includes,search,boolean",
        "paid": true,
        "answer": "`Array.prototype.includes` determines whether an array contains a certain value among its entries. It returns `true` if the array contains the value, otherwise `false`.",
        "example": "const arr = [1, 2, 3];\nconsole.log(arr.includes(2)); // true\nconsole.log(arr.includes(4)); // false"
    },
    {
        "title": "What is the `Array.prototype.splice` method in JavaScript?",
        "category": "JavaScript",
        "description": "`splice` changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.",
        "tags": "Array.prototype.splice,modify,replace",
        "paid": true,
        "answer": "`Array.prototype.splice` changes the contents of an array by removing or replacing existing elements and/or adding new elements in place. It modifies the original array and returns an array containing the removed elements.",
        "example": "const arr = [1, 2, 3, 4];\nconst removed = arr.splice(1, 2, 'a', 'b');\nconsole.log(arr); // [1, 'a', 'b', 4]\nconsole.log(removed); // [2, 3]"
    },
    {
        "title": "What is the `Array.prototype.fill` method in JavaScript?",
        "category": "JavaScript",
        "description": "`fill` changes all elements in an array to a static value from a start index to an end index.",
        "tags": "Array.prototype.fill,fill,modify",
        "paid": true,
        "answer": "`Array.prototype.fill` changes all elements in an array to a static value from a start index to an end index. It modifies the original array.",
        "example": "const arr = [1, 2, 3];\narr.fill(0, 1, 3);\nconsole.log(arr); // [1, 0, 0]"
    },
    {
        "title": "What is the `Array.prototype.reverse` method in JavaScript?",
        "category": "JavaScript",
        "description": "`reverse` reverses the elements of an array in place and returns the reversed array.",
        "tags": "Array.prototype.reverse,reverse",
        "paid": true,
        "answer": "`Array.prototype.reverse` reverses the elements of an array in place and returns the reversed array. It modifies the original array.",
        "example": "const arr = [1, 2, 3];\narr.reverse();\nconsole.log(arr); // [3, 2, 1]"
    },
    {
        "title": "What is the `Array.prototype.flat` method in JavaScript?",
        "category": "JavaScript",
        "description": "`flat` creates a new array with all sub-array elements concatenated into it recursively up to a specified depth.",
        "tags": "Array.prototype.flat,flatten,depth",
        "paid": true,
        "answer": "`Array.prototype.flat` creates a new array with all sub-array elements concatenated into it recursively up to a specified depth. It can flatten nested arrays to a specified level.",
        "example": "const arr = [1, [2, [3, [4]]]];\nconst flatArr = arr.flat(2);\nconsole.log(flatArr); // [1, 2, 3, [4]]"
    },
    {
        "title": "What is the `Array.prototype.join` method in JavaScript?",
        "category": "JavaScript",
        "description": "`join` joins all elements of an array into a string separated by a specified separator.",
        "tags": "Array.prototype.join,join,string",
        "paid": true,
        "answer": "`Array.prototype.join` joins all elements of an array into a string separated by a specified separator. The default separator is a comma.",
        "example": "const arr = ['a', 'b', 'c'];\nconst joined = arr.join('-');\nconsole.log(joined); // 'a-b-c'"
    },
    {
        "title": "What is the `Array.prototype.sort` method in JavaScript?",
        "category": "JavaScript",
        "description": "`sort` sorts the elements of an array in place and returns the sorted array.",
        "tags": "Array.prototype.sort,sort,order",
        "paid": true,
        "answer": "`Array.prototype.sort` sorts the elements of an array in place and returns the sorted array. By default, it sorts elements as strings. A custom comparator function can be provided to sort elements in other ways.",
        "example": "const arr = [3, 1, 2];\narr.sort();\nconsole.log(arr); // [1, 2, 3]"
    },
    {
        "title": "What is the `Array.prototype.concat` method in JavaScript?",
        "category": "JavaScript",
        "description": "`concat` merges two or more arrays into a new array.",
        "tags": "Array.prototype.concat,merge,arrays",
        "paid": true,
        "answer": "`Array.prototype.concat` merges two or more arrays into a new array. It does not modify the original arrays and can take any number of arguments, including arrays and values.",
        "example": "const arr1 = [1, 2];\nconst arr2 = [3, 4];\nconst merged = arr1.concat(arr2);\nconsole.log(merged); // [1, 2, 3, 4]"
    },
    {
        "title": "What is the `Array.prototype.slice` method in JavaScript?",
        "category": "JavaScript",
        "description": "`slice` returns a shallow copy of a portion of an array into a new array object.",
        "tags": "Array.prototype.slice,copy,subarray",
        "paid": true,
        "answer": "`Array.prototype.slice` returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included). It does not modify the original array.",
        "example": "const arr = [1, 2, 3, 4];\nconst sliced = arr.slice(1, 3);\nconsole.log(sliced); // [2, 3]"
    },
    {
        "title": "What is the `Array.prototype.splice` method in JavaScript?",
        "category": "JavaScript",
        "description": "`splice` changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.",
        "tags": "Array.prototype.splice,modify,replace",
        "paid": true,
        "answer": "`Array.prototype.splice` changes the contents of an array by removing or replacing existing elements and/or adding new elements in place. It modifies the original array and returns an array containing the removed elements.",
        "example": "const arr = [1, 2, 3, 4];\nconst removed = arr.splice(2, 1, 'a', 'b');\nconsole.log(arr); // [1, 2, 'a', 'b', 4]\nconsole.log(removed); // [3]"
    },
    {
        "title": "What is the `Array.prototype.toLocaleString` method in JavaScript?",
        "category": "JavaScript",
        "description": "`toLocaleString` returns a string representing the array and its elements, formatted according to the locale.",
        "tags": "Array.prototype.toLocaleString,format,locale",
        "paid": true,
        "answer": "`Array.prototype.toLocaleString` returns a string representing the array and its elements, formatted according to the locale and options. It uses the `toLocaleString` method of each element.",
        "example": "const arr = [1, 2, 3];\nconsole.log(arr.toLocaleString()); // '1,2,3' (may vary depending on locale)"
    },
    {
        "title": "What is the `Array.prototype.sort` method in JavaScript?",
        "category": "JavaScript",
        "description": "`sort` sorts the elements of an array in place and returns the sorted array.",
        "tags": "Array.prototype.sort,sort,order",
        "paid": true,
        "answer": "`Array.prototype.sort` sorts the elements of an array in place and returns the sorted array. By default, elements are sorted as strings. A custom sorting function can be used to specify the sort order.",
        "example": "const arr = [3, 1, 2];\narr.sort((a, b) => a - b);\nconsole.log(arr); // [1, 2, 3]"
    },
    {
        "title": "What is the `String.prototype.trim` method in JavaScript?",
        "category": "JavaScript",
        "description": "`trim` removes whitespace from both ends of a string.",
        "tags": "String.prototype.trim,whitespace,trim",
        "paid": true,
        "answer": "`String.prototype.trim` removes whitespace from both ends of a string, but does not affect whitespace in the middle of the string.",
        "example": "const str = '  hello  ';\nconst trimmed = str.trim();\nconsole.log(trimmed); // 'hello'"
    },
    {
        "title": "What is the `String.prototype.toUpperCase` method in JavaScript?",
        "category": "JavaScript",
        "description": "`toUpperCase` returns the calling string value converted to uppercase.",
        "tags": "String.prototype.toUpperCase,case,uppercase",
        "paid": true,
        "answer": "`String.prototype.toUpperCase` returns a new string with all characters converted to uppercase.",
        "example": "const str = 'hello';\nconst upper = str.toUpperCase();\nconsole.log(upper); // 'HELLO'"
    },
    {
        "title": "What is the `String.prototype.toLowerCase` method in JavaScript?",
        "category": "JavaScript",
        "description": "`toLowerCase` returns the calling string value converted to lowercase.",
        "tags": "String.prototype.toLowerCase,case,lowercase",
        "paid": true,
        "answer": "`String.prototype.toLowerCase` returns a new string with all characters converted to lowercase.",
        "example": "const str = 'HELLO';\nconst lower = str.toLowerCase();\nconsole.log(lower); // 'hello'"
    },
    {
        "title": "What is the `String.prototype.charAt` method in JavaScript?",
        "category": "JavaScript",
        "description": "`charAt` returns the character at a specified index in a string.",
        "tags": "String.prototype.charAt,character,index",
        "paid": true,
        "answer": "`String.prototype.charAt` returns the character at a specified index in a string. If the index is out of range, it returns an empty string.",
        "example": "const str = 'hello';\nconst char = str.charAt(1);\nconsole.log(char); // 'e'"
    },
    {
        "title": "What is the `String.prototype.indexOf` method in JavaScript?",
        "category": "JavaScript",
        "description": "`indexOf` returns the index of the first occurrence of a specified value in a string.",
        "tags": "String.prototype.indexOf,search,index",
        "paid": true,
        "answer": "`String.prototype.indexOf` returns the index of the first occurrence of a specified value in a string. If the value is not found, it returns -1.",
        "example": "const str = 'hello';\nconst index = str.indexOf('l');\nconsole.log(index); // 2"
    },
    {
        "title": "What is the `String.prototype.slice` method in JavaScript?",
        "category": "JavaScript",
        "description": "`slice` extracts a section of a string and returns it as a new string.",
        "tags": "String.prototype.slice,extract,substring",
        "paid": true,
        "answer": "`String.prototype.slice` extracts a section of a string and returns it as a new string, without modifying the original string.",
        "example": "const str = 'hello';\nconst sliced = str.slice(1, 4);\nconsole.log(sliced); // 'ell'"
    },
    {
        "title": "What is the `String.prototype.split` method in JavaScript?",
        "category": "JavaScript",
        "description": "`split` splits a string into an array of substrings based on a specified separator.",
        "tags": "String.prototype.split,split,separator",
        "paid": true,
        "answer": "`String.prototype.split` splits a string into an array of substrings based on a specified separator. The separator can be a string or regular expression.",
        "example": "const str = 'a,b,c';\nconst arr = str.split(',');\nconsole.log(arr); // ['a', 'b', 'c']"
    },
    {
        "title": "What is the `String.prototype.replace` method in JavaScript?",
        "category": "JavaScript",
        "description": "`replace` replaces the first occurrence of a substring or pattern in a string with a new substring.",
        "tags": "String.prototype.replace,replace,substring",
        "paid": true,
        "answer": "`String.prototype.replace` replaces the first occurrence of a substring or pattern (regular expression) with a new substring. To replace all occurrences, a global regular expression must be used.",
        "example": "const str = 'hello world';\nconst newStr = str.replace('world', 'JavaScript');\nconsole.log(newStr); // 'hello JavaScript'"
    },
    {
        "title": "What is the `String.prototype.includes` method in JavaScript?",
        "category": "JavaScript",
        "description": "`includes` checks if a string contains a specified substring and returns `true` or `false`.",
        "tags": "String.prototype.includes,check,substring",
        "paid": true,
        "answer": "`String.prototype.includes` checks if a string contains a specified substring. It returns `true` if the substring is found, otherwise `false`.",
        "example": "const str = 'hello';\nconsole.log(str.includes('ell')); // true\nconsole.log(str.includes('world')); // false"
    },
    {
        "title": "What is the `String.prototype.concat` method in JavaScript?",
        "category": "JavaScript",
        "description": "`concat` combines multiple strings into one string.",
        "tags": "String.prototype.concat,combine,strings",
        "paid": true,
        "answer": "`String.prototype.concat` combines multiple strings into one string. It does not modify the original strings but returns a new concatenated string.",
        "example": "const str1 = 'hello';\nconst str2 = 'world';\nconst combined = str1.concat(' ', str2);\nconsole.log(combined); // 'hello world'"
    },
    {
        "title": "What is the `String.prototype.match` method in JavaScript?",
        "category": "JavaScript",
        "description": "`match` retrieves the matches of a string against a regular expression.",
        "tags": "String.prototype.match,regex,match",
        "paid": true,
        "answer": "`String.prototype.match` retrieves the matches of a string against a regular expression. It returns an array of matches or `null` if no matches are found.",
        "example": "const str = 'hello 123';\nconst matches = str.match(/\\d+/);\nconsole.log(matches); // ['123']"
    },
    {
        "title": "What is the `String.prototype.search` method in JavaScript?",
        "category": "JavaScript",
        "description": "`search` searches a string for a match against a regular expression and returns the index of the first match.",
        "tags": "String.prototype.search,regex,search",
        "paid": true,
        "answer": "`String.prototype.search` searches a string for a match against a regular expression and returns the index of the first match. If no match is found, it returns -1.",
        "example": "const str = 'hello 123'; \nconst index = str.search(/\\d+/); \nconsole.log(index); // 6 "
    },
    {
        "title": "What is the `String.prototype.substr` method in JavaScript?",
        "category": "JavaScript",
        "description": "`substr` extracts a substring from a string based on a starting index and length.",
        "tags": "String.prototype.substr,substring,extract",
        "paid": true,
        "answer": "`String.prototype.substr` extracts a substring from a string based on a starting index and length. It returns the extracted substring.",
        "example": "const str = 'hello world';\nconst substr = str.substr(6, 5);\nconsole.log(substr); // 'world'"
    },
    {
        "title": "What is the `String.prototype.repeat` method in JavaScript?",
        "category": "JavaScript",
        "description": "`repeat` returns a new string with the specified number of copies of the original string.",
        "tags": "String.prototype.repeat,repeat,string",
        "paid": true,
        "answer": "`String.prototype.repeat` returns a new string with the specified number of copies of the original string, concatenated together.",
        "example": "const str = 'abc';\nconst repeated = str.repeat(3);\nconsole.log(repeated); // 'abcabcabc'"
    },
    {
        "title": "What is the `String.prototype.codePointAt` method in JavaScript?",
        "category": "JavaScript",
        "description": "`codePointAt` returns an integer representing the UTF-16 code unit at a specified index in a string.",
        "tags": "String.prototype.codePointAt,UTF-16,code unit",
        "paid": true,
        "answer": "`String.prototype.codePointAt` returns an integer representing the UTF-16 code unit at a specified index in a string. It is useful for dealing with Unicode characters.",
        "example": "const str = '𠮷';\nconst codePoint = str.codePointAt(0);\nconsole.log(codePoint); // 134071"
    },
    {
        "title": "What is the `String.prototype.fromCharCode` method in JavaScript?",
        "category": "JavaScript",
        "description": "`fromCharCode` returns a string created from the specified sequence of UTF-16 code units.",
        "tags": "String.fromCharCode,UTF-16,code units",
        "paid": true,
        "answer": "`String.fromCharCode` returns a string created from the specified sequence of UTF-16 code units. It is used to convert code units to characters.",
        "example": "const char = String.fromCharCode(65);\nconsole.log(char); // 'A'"
    },
    {
        "title": "What is the `String.prototype.startsWith` method in JavaScript?",
        "category": "JavaScript",
        "description": "`startsWith` checks if a string starts with a specified substring and returns `true` or `false`.",
        "tags": "String.prototype.startsWith,check,substring",
        "paid": true,
        "answer": "`String.prototype.startsWith` checks if a string starts with a specified substring and returns `true` if it does, otherwise `false`.",
        "example": "const str = 'hello';\nconsole.log(str.startsWith('he')); // true\nconsole.log(str.startsWith('lo')); // false"
    },
    {
        "title": "What is the `String.prototype.endsWith` method in JavaScript?",
        "category": "JavaScript",
        "description": "`endsWith` checks if a string ends with a specified substring and returns `true` or `false`.",
        "tags": "String.prototype.endsWith,check,substring",
        "paid": true,
        "answer": "`String.prototype.endsWith` checks if a string ends with a specified substring and returns `true` if it does, otherwise `false`.",
        "example": "const str = 'hello';\nconsole.log(str.endsWith('lo')); // true\nconsole.log(str.endsWith('he')); // false"
    },
    {
        "title": "What is the `String.prototype.localeCompare` method in JavaScript?",
        "category": "JavaScript",
        "description": "`localeCompare` compares two strings in the current locale and returns a number indicating their relative order.",
        "tags": "String.prototype.localeCompare,compare,locale",
        "paid": true,
        "answer": "`String.prototype.localeCompare` compares two strings in the current locale and returns a number indicating whether the calling string comes before, after, or is equal to the compared string.",
        "example": "const str1 = 'apple';\nconst str2 = 'banana';\nconst result = str1.localeCompare(str2);\nconsole.log(result); // -1 (str1 is less than str2)"
    },
    {
        "title": "What is the `String.prototype.bold` method in JavaScript?",
        "category": "JavaScript",
        "description": "`bold` returns a string wrapped in HTML `<b>` tags.",
        "tags": "String.prototype.bold,HTML,bold",
        "paid": true,
        "answer": "`String.prototype.bold` returns a string wrapped in HTML `<b>` tags. Note that this method is deprecated and should not be used in modern applications.",
        "example": "const str = 'hello';\nconst boldStr = str.bold();\nconsole.log(boldStr); // '<b>hello</b>'"
    },
    {
        "title": "What is the `String.prototype.link` method in JavaScript?",
        "category": "JavaScript",
        "description": "`link` creates an HTML `<a>` element wrapping the string.",
        "tags": "String.prototype.link,HTML,anchor",
        "paid": true,
        "answer": "`String.prototype.link` creates an HTML `<a>` element wrapping the string, which is used to create hyperlinks. This method is deprecated and should not be used in modern applications.",
        "example": "const str = 'Click here';\nconst linkedStr = str.link('https://example.com');\nconsole.log(linkedStr); // '<a href=\"https://example.com\">Click here</a>'"
    },
    {
        "title": "What is the `String.prototype.fontcolor` method in JavaScript?",
        "category": "JavaScript",
        "description": "`fontcolor` returns a string wrapped in HTML `<font>` tags with a specified color.",
        "tags": "String.prototype.fontcolor,HTML,font,color",
        "paid": true,
        "answer": "`String.prototype.fontcolor` returns a string wrapped in HTML `<font>` tags with a specified color. This method is deprecated and should not be used in modern applications.",
        "example": "const str = 'hello';\nconst coloredStr = str.fontcolor('red');\nconsole.log(coloredStr); // '<font color=\"red\">hello</font>'"
    },
    {
        "title": "What is the `String.prototype.fontsize` method in JavaScript?",
        "category": "JavaScript",
        "description": "`fontsize` returns a string wrapped in HTML `<font>` tags with a specified size.",
        "tags": "String.prototype.fontsize,HTML,font,size",
        "paid": true,
        "answer": "`String.prototype.fontsize` returns a string wrapped in HTML `<font>` tags with a specified size. This method is deprecated and should not be used in modern applications.",
        "example": "const str = 'hello';\nconst sizedStr = str.fontsize(7);\nconsole.log(sizedStr); // '<font size=\"7\">hello</font>'"
    },
    {
        "title": "What is the `String.prototype.anchor` method in JavaScript?",
        "category": "JavaScript",
        "description": "`anchor` creates an HTML `<a>` element wrapping the string with a specified name attribute.",
        "tags": "String.prototype.anchor,HTML,anchor",
        "paid": true,
        "answer": "`String.prototype.anchor` creates an HTML `<a>` element wrapping the string with a specified name attribute. This method is deprecated and should not be used in modern applications.",
        "example": "const str = 'Click here';\nconst anchoredStr = str.anchor('top');\nconsole.log(anchoredStr); // '<a name=\"top\">Click here</a>'"
    },
    {
        "title": "What is the `String.prototype.small` method in JavaScript?",
        "category": "JavaScript",
        "description": "`small` returns a string wrapped in HTML `<small>` tags.",
        "tags": "String.prototype.small,HTML,small",
        "paid": true,
        "answer": "`String.prototype.small` returns a string wrapped in HTML `<small>` tags. This method is deprecated and should not be used in modern applications.",
        "example": "const str = 'hello';\nconst smallStr = str.small();\nconsole.log(smallStr); // '<small>hello</small>'"
    }
]