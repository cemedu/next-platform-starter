[
    {
        "title": "How Do You Maintain Consistency in Your Writing Style?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you ensure that your writing style remains consistent across different pieces of content.",
        "tags": "writing style, consistency, content quality",
        "paid": "No",
        "answer": "I maintain consistency by adhering to a style guide and using templates for different types of content. I also review past content to ensure that my tone and voice align with the brand's standards. For example, I follow a specific style guide for a client's blog to ensure uniformity across posts."
    },
    {
        "title": "What Techniques Do You Use for Effective Headline Writing?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your methods for creating compelling and attention-grabbing headlines.",
        "tags": "headline writing, techniques, engagement",
        "paid": "No",
        "answer": "For effective headline writing, I use techniques such as incorporating strong keywords, creating a sense of urgency, and posing questions. For instance, a headline like '5 Proven Strategies to Boost Your SEO Rankings Today' grabs attention by promising immediate, valuable insights and addressing a common concern."
    },
    {
        "title": "How Do You Balance Creativity with Adhering to Guidelines?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Describe how you blend creative writing with following content guidelines and requirements.",
        "tags": "creativity, guidelines, writing balance",
        "paid": "No",
        "answer": "I balance creativity with guidelines by understanding the core requirements and then applying creative approaches within those parameters. For example, if writing a product description, I adhere to brand guidelines while using engaging language and vivid imagery to make the content compelling and informative."
    },
    {
        "title": "Can You Describe a Complex Project Youâ€™ve Worked On?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Share details about a complex writing project and how you managed it.",
        "tags": "complex projects, writing experience, project management",
        "paid": "No",
        "answer": "I worked on a comprehensive white paper for a tech client involving extensive research and multiple drafts. I managed the project by setting clear milestones, coordinating with subject matter experts, and incorporating feedback iteratively. The final document was well-received and demonstrated a thorough understanding of the industry."
    },
    {
        "title": "How Do You Approach Writing for Different Cultural Audiences?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you adapt your writing for different cultural contexts and sensitivities.",
        "tags": "cultural adaptation, writing for audiences, sensitivity",
        "paid": "No",
        "answer": "I adapt my writing for different cultural audiences by researching cultural norms, preferences, and sensitivities. For example, when writing content for a global audience, I avoid idioms and culturally specific references that may not translate well and focus on universal themes to ensure inclusivity."
    },
    {
        "title": "What Is Your Approach to Writing Persuasive Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss the strategies you use to craft content that persuades and convinces readers.",
        "tags": "persuasive writing, strategies, content effectiveness",
        "paid": "Yes",
        "answer": "In persuasive writing, I use strategies such as presenting clear arguments, using compelling evidence, and addressing potential objections. For instance, in a sales copy, I highlight the benefits of the product, include testimonials, and create a strong call-to-action to persuade readers to make a purchase."
    },
    {
        "title": "How Do You Ensure Your Content Is Original and Avoid Plagiarism?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Describe the steps you take to ensure the originality of your content and avoid plagiarism.",
        "tags": "originality, plagiarism, content integrity",
        "paid": "Yes",
        "answer": "I ensure originality by conducting thorough research and crafting content based on my unique perspective. I use plagiarism detection tools to verify that my work is free of copied material. For example, I write my own analysis and conclusions instead of paraphrasing existing sources."
    },
    {
        "title": "How Do You Adapt Your Writing for Different Content Lengths?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you adjust your writing style and content for various lengths, such as short-form and long-form.",
        "tags": "content length, writing adaptation, style",
        "paid": "Yes",
        "answer": "I adapt my writing by focusing on conciseness for short-form content, ensuring every word adds value, and by providing in-depth analysis and detail for long-form content. For example, a social media post requires brevity and impact, while a detailed report necessitates comprehensive coverage of the topic."
    },
    {
        "title": "How Do You Collaborate with Other Team Members?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Describe your approach to collaborating with designers, marketers, and other team members on content projects.",
        "tags": "collaboration, teamwork, project management",
        "paid": "Yes",
        "answer": "I collaborate by maintaining open communication and setting clear expectations with team members. For instance, I work closely with designers to ensure that content aligns with visual elements and with marketers to meet campaign objectives. Regular meetings and feedback sessions help streamline the process and achieve cohesive results."
    },
    {
        "title": "What Are Your Strategies for Writing Engaging Blog Posts?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss the techniques you use to create blog posts that captivate and retain readers.",
        "tags": "blog posts, engagement, writing techniques",
        "paid": "Yes",
        "answer": "To write engaging blog posts, I start with a captivating introduction, use subheadings to break up content, and include visuals and interactive elements. I also ensure that the content provides value by addressing readers' needs or interests. For example, I might use a compelling anecdote to draw readers in and keep them hooked throughout the post."
    },
    {
        "title": "How Do You Handle Content That Requires Technical Knowledge?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your approach to writing content that involves complex or technical subjects.",
        "tags": "technical writing, complex content, subject matter expertise",
        "paid": "Yes",
        "answer": "For technical content, I first research thoroughly to understand the subject. I then break down complex information into simpler terms and use analogies to make it more accessible. For instance, when writing about software development, I explain technical concepts using everyday language and practical examples to ensure clarity."
    },
    {
        "title": "How Do You Ensure Your Content Is Accessible to All Readers?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your strategies for making sure your content is accessible to a diverse audience, including those with disabilities.",
        "tags": "accessibility, inclusivity, content design",
        "paid": "Yes",
        "answer": "I ensure content accessibility by using clear and simple language, providing alt text for images, and structuring content with headings and bullet points. I also follow accessibility guidelines like the WCAG to make sure content is readable by screen readers. For example, I include descriptive alt text for all images to aid visually impaired readers."
    },
    {
        "title": "What Is Your Experience with Email Marketing Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Share your experience in creating content specifically for email marketing campaigns.",
        "tags": "email marketing, content creation, campaign",
        "paid": "Yes",
        "answer": "I have experience writing engaging email marketing content, including newsletters and promotional emails. I focus on crafting attention-grabbing subject lines, personalized content, and clear calls-to-action. For example, I wrote a series of emails for a product launch that included segmented lists to target specific customer interests effectively."
    },
    {
        "title": "How Do You Address Content Gaps or Missing Information?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you identify and fill gaps in content to provide comprehensive coverage of a topic.",
        "tags": "content gaps, information coverage, research",
        "paid": "Yes",
        "answer": "I address content gaps by conducting additional research to fill missing information and ensure thorough coverage of the topic. I review existing content for completeness and seek out authoritative sources to provide a well-rounded perspective. For instance, if a guide on digital marketing lacks SEO tips, I add detailed SEO strategies and best practices."
    },
    {
        "title": "What Role Does Audience Feedback Play in Your Content Creation?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss how audience feedback influences your content creation process and adjustments.",
        "tags": "audience feedback, content adjustments, improvement",
        "paid": "Yes",
        "answer": "Audience feedback is crucial in shaping content. I use comments, reviews, and analytics to understand what resonates with readers and make adjustments accordingly. For example, if feedback indicates a preference for more in-depth analysis, I expand on those sections in future content to better meet audience expectations."
    },
    {
        "title": "How Do You Approach Writing Content for Different Stages of the Customer Journey?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you tailor content for various stages of the customer journey, from awareness to decision.",
        "tags": "customer journey, content strategy, stages",
        "paid": "Yes",
        "answer": "I tailor content by aligning it with the customer journey stages. For awareness, I create educational blog posts and infographics. For consideration, I write comparison guides and case studies. For decision-making, I craft compelling product descriptions and testimonials. This approach ensures relevant content for each stage of the customerâ€™s decision process."
    },
    {
        "title": "How Do You Ensure Your Content Meets Brand Voice and Tone?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your methods for maintaining consistency with a brandâ€™s voice and tone in your writing.",
        "tags": "brand voice, tone consistency, writing",
        "paid": "Yes",
        "answer": "I ensure content aligns with brand voice by following a detailed style guide and reviewing previous content for consistency. I also adapt the tone based on the target audience and content type. For instance, a brand with a friendly, informal voice will have content that reflects this tone, such as conversational blog posts or engaging social media updates."
    },
    {
        "title": "What Is Your Experience with Creating Visual Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Share your experience and skills in creating or collaborating on visual content for your writing projects.",
        "tags": "visual content, collaboration, design",
        "paid": "Yes",
        "answer": "I have experience collaborating with designers to create visuals that complement written content. While I may not design graphics myself, I provide input on visual concepts and ensure that they align with the content. For example, I work with designers to create infographics that visually represent key points from my blog posts."
    },
    {
        "title": "How Do You Manage Multiple Writing Projects Simultaneously?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your approach to juggling multiple writing assignments and meeting deadlines.",
        "tags": "project management, multitasking, deadlines",
        "paid": "Yes",
        "answer": "I manage multiple projects by prioritizing tasks, using project management tools, and setting realistic deadlines. I break projects into smaller tasks and allocate time blocks for each. For example, I use tools like Trello to track progress and ensure timely delivery by setting milestones and reminders for each project."
    },
    {
        "title": "How Do You Handle Revisions and Editing Requests?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Describe your process for addressing revisions and editing requests from clients or stakeholders.",
        "tags": "revisions, editing, client feedback",
        "paid": "Yes",
        "answer": "I handle revisions by carefully reviewing feedback and making necessary adjustments while maintaining the integrity of the original content. I communicate with clients to clarify any unclear requests and ensure the changes align with their expectations. For example, if a client requests additional examples, I incorporate them while preserving the overall message."
    },
    {
        "title": "What Is Your Experience with Creating Content for E-commerce Sites?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Share your experience in writing product descriptions, reviews, and other content for e-commerce websites.",
        "tags": "e-commerce, product descriptions, writing",
        "paid": "Yes",
        "answer": "I have experience writing persuasive product descriptions, engaging reviews, and informative content for e-commerce sites. I focus on highlighting product benefits, using persuasive language, and incorporating keywords for SEO. For example, I wrote detailed descriptions for a range of products, emphasizing features and customer benefits to drive sales."
    },
    {
        "title": "How Do You Approach Writing for Different Demographics?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you adapt your writing to cater to various demographic groups.",
        "tags": "demographics, writing adaptation, audience targeting",
        "paid": "Yes",
        "answer": "I approach writing for different demographics by researching their interests, preferences, and language use. I then tailor the contentâ€™s tone, style, and examples to resonate with each group. For instance, writing for millennials might involve informal language and pop culture references, while content for professionals would be more formal and data-driven."
    },
    {
        "title": "How Do You Handle Content That Requires Fact-Checking?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your process for ensuring the accuracy of factual information in your content.",
        "tags": "fact-checking, accuracy, content integrity",
        "paid": "Yes",
        "answer": "I handle fact-checking by verifying information through multiple reputable sources and cross-referencing facts. I use trusted databases, official reports, and expert opinions to ensure accuracy. For example, when writing a health article, I consult peer-reviewed journals and reliable health organizations to confirm the validity of the information presented."
    },
    {
        "title": "What Are Your Strategies for Writing Compelling Calls-to-Action?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain the techniques you use to create effective and persuasive calls-to-action in your content.",
        "tags": "calls-to-action, persuasive writing, content strategy",
        "paid": "Yes",
        "answer": "I create compelling calls-to-action by using strong, actionable language and emphasizing benefits. I make the CTA stand out visually and align it with the content's goals. For instance, a CTA like 'Download Our Free Guide to Boost Your Marketing Strategy Today!' encourages immediate action by offering value and urgency."
    },
    {
        "title": "How Do You Approach Writing Content for Lead Generation?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your strategies for creating content aimed at generating leads and driving conversions.",
        "tags": "lead generation, content strategy, conversions",
        "paid": "Yes",
        "answer": "For lead generation, I create content that addresses potential customersâ€™ pain points and offers valuable solutions. I use lead magnets like eBooks or webinars and include clear CTAs. For example, a blog post might offer a free downloadable checklist in exchange for email sign-ups, thus generating leads while providing value."
    },
    {
        "title": "How Do You Ensure Your Content Is Engaging Across Different Formats (e.g., video, infographics)?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you adapt your content for various formats and ensure it remains engaging.",
        "tags": "content formats, engagement, multimedia",
        "paid": "Yes",
        "answer": "I adapt content by tailoring the message to fit each format. For videos, I create a script that includes engaging visuals and a strong narrative. For infographics, I focus on clear, concise text and visually appealing design. For example, turning a detailed blog post into a video involves summarizing key points and incorporating dynamic visuals to retain viewer interest."
    },
    {
        "title": "How Do You Approach Writing for Different Levels of Expertise?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Describe how you adjust your writing style and content complexity for various levels of expertise.",
        "tags": "expertise levels, writing complexity, audience targeting",
        "paid": "Yes",
        "answer": "I adjust my writing style based on the audienceâ€™s expertise level by simplifying complex concepts for beginners and using more technical language for experts. For example, in a guide on machine learning, I provide basic definitions and examples for beginners, while offering advanced insights and technical jargon for experts."
    },
    {
        "title": "What Are Your Methods for Ensuring High-Quality Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain the practices you follow to produce high-quality, error-free content.",
        "tags": "content quality, writing practices, proofreading",
        "paid": "Yes",
        "answer": "I ensure high-quality content by following a thorough writing and editing process. I conduct detailed research, use editing tools like Grammarly, and proofread multiple times. Additionally, I seek feedback from peers. For instance, I review my drafts for clarity and accuracy before finalizing and publishing to ensure the content is polished and error-free."
    },
    {
        "title": "How Do You Handle Conflicting Feedback on Your Writing?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your approach to managing and reconciling conflicting feedback from different reviewers or stakeholders.",
        "tags": "conflicting feedback, content revision, stakeholder management",
        "paid": "Yes",
        "answer": "I handle conflicting feedback by evaluating the core concerns and seeking clarification from stakeholders if needed. I prioritize feedback that aligns with the content's objectives and make balanced revisions. For example, if one reviewer suggests more technical details and another prefers simplification, I incorporate essential details while maintaining clarity."
    },
    {
        "title": "What Role Does Data Play in Your Content Creation Process?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you use data and analytics to inform and enhance your content creation.",
        "tags": "data-driven content, analytics, content strategy",
        "paid": "Yes",
        "answer": "I use data to inform content by analyzing audience behavior, engagement metrics, and keyword performance. This helps in tailoring content to meet audience interests and optimize for SEO. For example, if data shows high engagement with articles on a specific topic, I create more content around that subject to capitalize on audience interest."
    },
    {
        "title": "How Do You Balance Informative and Promotional Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Describe how you strike a balance between providing valuable information and promoting products or services.",
        "tags": "informative content, promotional content, balance",
        "paid": "Yes",
        "answer": "I balance informative and promotional content by ensuring that promotional elements are integrated seamlessly into valuable, educational content. For example, a blog post on effective marketing strategies might include a soft promotion for a related service, ensuring that the promotional aspect supports rather than overshadows the informational value."
    },
    {
        "title": "How Do You Stay Updated with Industry Trends and Changes?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your methods for keeping up with the latest trends and developments in your industry.",
        "tags": "industry trends, professional development, updates",
        "paid": "Yes",
        "answer": "I stay updated with industry trends by following relevant blogs, subscribing to newsletters, and participating in webinars and conferences. I also engage with professional networks and social media groups. For instance, I regularly read marketing blogs and attend industry webinars to keep my content relevant and current."
    },
    {
        "title": "What Is Your Experience with SEO Best Practices?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your familiarity with SEO techniques and how you apply them to your content.",
        "tags": "SEO, best practices, content optimization",
        "paid": "Yes",
        "answer": "I am familiar with SEO best practices, including keyword research, on-page optimization, and link building. I apply these techniques by incorporating relevant keywords naturally, using meta tags, and creating engaging content that encourages backlinks. For example, I optimize blog posts with targeted keywords and internal links to improve search engine rankings."
    },
    {
        "title": "How Do You Ensure Content Is Aligned with SEO Strategies?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you ensure that your content supports and enhances SEO strategies.",
        "tags": "SEO alignment, content strategy, optimization",
        "paid": "Yes",
        "answer": "I align content with SEO strategies by conducting keyword research, incorporating relevant keywords into the content, and optimizing meta descriptions and headers. I also ensure that content is structured for readability and includes internal and external links. For example, I use SEO tools to analyze keyword performance and adjust content accordingly to improve search visibility."
    },
    {
        "title": "How Do You Handle Content with Tight Deadlines?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Describe your approach to managing and delivering content when working with tight deadlines.",
        "tags": "deadlines, time management, content delivery",
        "paid": "Yes",
        "answer": "To handle tight deadlines, I prioritize tasks, create a detailed schedule, and focus on efficient writing and editing. I break down the project into manageable segments and allocate specific times for each. For example, when faced with a short deadline, I use time management techniques to complete the content in stages and ensure timely delivery."
    },
    {
        "title": "How Do You Approach Writing for Different Platforms (e.g., social media, websites)?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you adapt your writing style and content for various platforms and channels.",
        "tags": "platform adaptation, writing style, content strategy",
        "paid": "Yes",
        "answer": "I adapt my writing style for different platforms by considering the audience and format. For social media, I use concise and engaging language with a focus on visuals and hashtags. For websites, I provide in-depth and SEO-optimized content. For example, a tweet would be brief and attention-grabbing, while a website article would be more detailed and informative."
    },
    {
        "title": "What Are Your Techniques for Creating Shareable Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your methods for crafting content that encourages sharing and engagement.",
        "tags": "shareable content, engagement, writing techniques",
        "paid": "Yes",
        "answer": "To create shareable content, I focus on producing valuable, entertaining, or insightful material that resonates with the audience. I use catchy headlines, engaging visuals, and interactive elements. For instance, I might create a visually appealing infographic with actionable tips that readers are likely to share with their networks."
    },
    {
        "title": "How Do You Approach Writing Content for Different Stages of the Funnel?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you tailor content for various stages of the marketing funnel, from awareness to retention.",
        "tags": "marketing funnel, content strategy, stages",
        "paid": "Yes",
        "answer": "I tailor content for each stage of the funnel by addressing specific needs and goals. For awareness, I create informative blog posts and educational resources. For consideration, I provide detailed product comparisons and case studies. For retention, I focus on personalized emails and loyalty content. This ensures that content aligns with the customerâ€™s journey and drives engagement at every stage."
    },
    {
        "title": "What Tools Do You Use for Content Research and Development?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss the tools and resources you use for researching and developing content.",
        "tags": "research tools, content development, resources",
        "paid": "Yes",
        "answer": "I use a variety of tools for content research and development, including Google Scholar for academic sources, BuzzSumo for content trends, and SEMrush for keyword research. I also utilize Grammarly for proofreading and Evernote for organizing notes. For example, I use BuzzSumo to identify popular topics and SEMrush to optimize keywords for SEO."
    },
    {
        "title": "How Do You Approach Writing for Different Target Audiences?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you adapt your writing style and content to suit different target audiences.",
        "tags": "target audience, writing adaptation, audience analysis",
        "paid": "Yes",
        "answer": "I adapt my writing by analyzing the target audienceâ€™s demographics, interests, and pain points. I then adjust the tone, language, and examples to resonate with them. For instance, writing for a tech-savvy audience involves using industry jargon and advanced concepts, while content for beginners is more explanatory and simplified."
    },
    {
        "title": "What Is Your Process for Developing a Content Strategy?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Describe the steps you take to create a comprehensive content strategy.",
        "tags": "content strategy, planning, development",
        "paid": "Yes",
        "answer": "My process for developing a content strategy includes researching target audiences, analyzing competitors, and setting clear goals. I then create a content calendar outlining topics, formats, and publication schedules. I continuously evaluate performance metrics and adjust the strategy based on results. For example, I might develop a quarterly plan that aligns with marketing goals and includes blog posts, social media updates, and email campaigns."
    },
    {
        "title": "How Do You Handle Writer's Block?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your strategies for overcoming writer's block and staying productive.",
        "tags": "writer's block, productivity, writing strategies",
        "paid": "Yes",
        "answer": "To overcome writerâ€™s block, I use techniques such as taking breaks, changing my environment, and using writing prompts. I also set small, manageable goals to build momentum. For example, if stuck on a topic, I might switch to a different task and return with a fresh perspective or use prompts to spark new ideas."
    },
    {
        "title": "What Experience Do You Have with Writing Technical Documentation?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Share your experience in creating technical documentation and how you approach it.",
        "tags": "technical documentation, writing experience, technical content",
        "paid": "Yes",
        "answer": "I have experience writing technical documentation such as user manuals and API guides. I approach it by thoroughly understanding the technology, organizing information logically, and using clear, concise language. For example, I created a user manual for software that included step-by-step instructions and troubleshooting tips to help users navigate the application effectively."
    },
    {
        "title": "How Do You Ensure Your Content Is Optimized for Search Engines?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your approach to optimizing content for search engine visibility.",
        "tags": "SEO, content optimization, search visibility",
        "paid": "Yes",
        "answer": "I optimize content by conducting keyword research, incorporating relevant keywords naturally, and ensuring proper use of headings and meta tags. I also focus on creating high-quality, engaging content that encourages backlinks. For instance, I use tools like Google Analytics to track performance and adjust strategies based on SEO data."
    },
    {
        "title": "How Do You Incorporate Feedback from Different Stakeholders into Your Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your process for integrating feedback from various stakeholders into your content.",
        "tags": "stakeholder feedback, content integration, revision process",
        "paid": "Yes",
        "answer": "I incorporate feedback by carefully reviewing comments from stakeholders, prioritizing their input based on relevance, and making revisions accordingly. I ensure that the feedback aligns with the content's goals and objectives. For example, if a marketing team suggests changes to align with a campaign, I adjust the content to meet their expectations while maintaining its overall message."
    },
    {
        "title": "What Strategies Do You Use for Writing Engaging Social Media Posts?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss the techniques you use to create engaging and effective social media content.",
        "tags": "social media, engagement, writing techniques",
        "paid": "Yes",
        "answer": "I create engaging social media posts by using attention-grabbing headlines, incorporating visuals, and including interactive elements like polls or questions. I also tailor the content to each platformâ€™s format and audience. For example, I might use a catchy, concise message with a compelling image on Instagram, while crafting a more detailed post with a call-to-action for LinkedIn."
    },
    {
        "title": "How Do You Measure the Success of Your Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you evaluate the effectiveness and impact of your content.",
        "tags": "content success, metrics, evaluation",
        "paid": "Yes",
        "answer": "I measure content success by tracking metrics such as page views, engagement rates, conversion rates, and SEO performance. I use tools like Google Analytics and social media insights to analyze these metrics and assess how well the content is achieving its goals. For example, I evaluate how a blog post performs in terms of traffic and user engagement to gauge its effectiveness."
    },
    {
        "title": "Describe Your Writing Process",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your approach to writing content, including planning, drafting, and editing.",
        "tags": "writing process, content creation, drafting",
        "paid": "Yes",
        "answer": "My writing process involves several stages. I start with research and brainstorming to gather ideas. Then, I create an outline to structure my content. After drafting, I revise and edit to ensure clarity and correctness. For instance, while writing a blog post, I first research industry trends before outlining key points."
    },
    {
        "title": "How Do You Ensure Your Content Is SEO-Friendly?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your strategies for optimizing content for search engines.",
        "tags": "SEO, content optimization, keywords",
        "paid": "Yes",
        "answer": "I ensure SEO-friendliness by incorporating relevant keywords naturally, using appropriate headers, and crafting meta descriptions. For example, while writing an article on digital marketing, I research high-ranking keywords and integrate them into the content while maintaining readability and relevance."
    },
    {
        "title": "How Do You Handle Writer's Block?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Share your methods for overcoming writer's block and staying productive.",
        "tags": "writer's block, productivity, creativity",
        "paid": "Yes",
        "answer": "To overcome writer's block, I take breaks, change my environment, or work on different tasks. I might also brainstorm ideas or use writing prompts. For instance, if I'm stuck on a topic, I might switch to a related subject to gain fresh insights and regain momentum."
    },
    {
        "title": "Can You Provide an Example of Content You've Created?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Showcase a piece of content you've written and discuss its impact.",
        "tags": "content example, portfolio, writing impact",
        "paid": "Yes",
        "answer": "I wrote a blog post on social media strategies that significantly increased engagement on the client's website. By integrating actionable tips and case studies, the post attracted a 30% increase in traffic and a notable boost in social shares, demonstrating its effectiveness in engaging the audience."
    },
    {
        "title": "How Do You Tailor Content for Different Audiences?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your approach to customizing content for various target audiences.",
        "tags": "audience targeting, content customization, writing strategy",
        "paid": "Yes",
        "answer": "I tailor content by understanding the audience's needs and preferences. This involves researching demographics and interests, and then adjusting tone and style accordingly. For example, for a tech blog aimed at professionals, I use technical jargon and in-depth analysis, while for beginners, I simplify the language and explanations."
    },
    {
        "title": "How Do You Stay Updated with Industry Trends?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Describe your methods for keeping up with the latest trends and developments in your industry.",
        "tags": "industry trends, research, continuous learning",
        "paid": "Yes",
        "answer": "I stay updated by subscribing to industry newsletters, following thought leaders on social media, and reading relevant blogs and journals. For example, I regularly check sources like HubSpot and Content Marketing Institute to keep up with new strategies and tools in content marketing."
    },
    {
        "title": "What Tools Do You Use for Content Creation?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss the tools and software you use to enhance your content creation process.",
        "tags": "content tools, writing software, productivity",
        "paid": "Yes",
        "answer": "I use tools like Grammarly for grammar checking, Google Docs for collaboration, and Ahrefs for SEO research. For instance, Grammarly helps in polishing content while Ahrefs provides insights into keyword performance, ensuring that my content is both accurate and optimized for search engines."
    },
    {
        "title": "How Do You Measure the Success of Your Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain the metrics and criteria you use to evaluate the effectiveness of your content.",
        "tags": "content metrics, success measurement, analytics",
        "paid": "Yes",
        "answer": "I measure success through metrics such as page views, engagement rates, and conversion rates. For example, if a blog post generates high traffic and leads to increased sign-ups for a newsletter, it indicates that the content successfully engaged and converted the target audience."
    },
    {
        "title": "Describe a Time You Received Negative Feedback on Your Writing.",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Share how you handled constructive criticism and what you learned from it.",
        "tags": "feedback, criticism, learning",
        "paid": "Yes",
        "answer": "I once received feedback that a piece was too technical for a general audience. I addressed this by simplifying the language and including more relatable examples. This experience taught me the importance of aligning content with the audience's level of understanding and expectations."
    },
    {
        "title": "How Do You Approach Writing for Different Platforms (e.g., blogs, social media, email)?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss how you adapt your writing style and strategy for various content platforms.",
        "tags": "platforms, writing style, content strategy",
        "paid": "Yes",
        "answer": "I adjust my writing style based on the platform's requirements. For blogs, I focus on in-depth content with SEO optimization. For social media, I create concise, engaging posts with strong visuals. In emails, I use a personalized tone and clear calls-to-action to drive conversions."
    },
    {
        "title": "How Do You Conduct Research for Your Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your process for gathering information and verifying facts for your writing.",
        "tags": "research, fact-checking, content accuracy",
        "paid": "Yes",
        "answer": "I conduct research by using reputable sources like academic journals, industry reports, and expert interviews. I verify facts through cross-referencing multiple sources to ensure accuracy. For instance, when writing a health-related article, I consult medical studies and trusted health websites to provide reliable information."
    },
    {
        "title": "What Is Your Experience with Content Management Systems (CMS)?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Share your experience with CMS platforms and how you use them in your content creation process.",
        "tags": "CMS, content management, platforms",
        "paid": "Yes",
        "answer": "I have experience with CMS platforms like WordPress and Drupal. I use these systems to upload, format, and manage content. For example, in WordPress, I utilize plugins for SEO optimization and layout customization, ensuring that content is both visually appealing and easily accessible to readers."
    },
    {
        "title": "How Do You Handle Tight Deadlines?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your strategies for managing and delivering quality content under tight deadlines.",
        "tags": "deadlines, time management, productivity",
        "paid": "Yes",
        "answer": "I handle tight deadlines by prioritizing tasks, breaking down the content into manageable sections, and focusing on efficiency without sacrificing quality. For instance, if given a short timeline for a blog post, I create a detailed outline, draft quickly, and allocate time for thorough editing to ensure accuracy."
    },
    {
        "title": "How Do You Incorporate Feedback into Your Writing?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your process for integrating feedback and making revisions to improve your content.",
        "tags": "feedback integration, revisions, improvement",
        "paid": "Yes",
        "answer": "I incorporate feedback by carefully reviewing the comments and suggestions, identifying areas for improvement, and making necessary revisions. For example, if feedback suggests clarifying certain sections, I adjust the content to enhance clarity and address any concerns raised by the reviewer."
    },
    {
        "title": "What Strategies Do You Use to Engage Readers?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss the techniques you employ to capture and maintain reader interest.",
        "tags": "reader engagement, writing techniques, content strategy",
        "paid": "Yes",
        "answer": "To engage readers, I use compelling headlines, interactive elements, and relatable examples. I also incorporate storytelling techniques to make content more relatable. For example, in a blog post about productivity, I include personal anecdotes and actionable tips to keep readers interested and motivated."
    },
    {
        "title": "Describe Your Experience with Social Media Content Creation.",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Share your experience in creating content specifically for social media platforms.",
        "tags": "social media, content creation, engagement",
        "paid": "Yes",
        "answer": "I have experience creating engaging social media content across various platforms, including Facebook, Twitter, and Instagram. I design posts with eye-catching visuals and concise, impactful text. For instance, I crafted a series of Instagram stories for a product launch, using vibrant graphics and compelling captions to drive engagement."
    },
    {
        "title": "How Do You Research Industry Trends for Your Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your approach to researching industry trends and incorporating them into your content.",
        "tags": "industry trends, research, content relevance",
        "paid": "Yes",
        "answer": "I research industry trends by following key influencers, reading relevant publications, and utilizing tools like Google Trends. I then integrate these insights into my content to ensure it remains current and relevant. For example, if a new trend in digital marketing emerges, I update my content to reflect these changes and provide up-to-date information."
    },
    {
        "title": "Can You Describe a Time When Your Content Strategy Was Successful?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Provide an example of a successful content strategy you developed and its impact.",
        "tags": "content strategy, success, impact",
        "paid": "Yes",
        "answer": "In a previous role, I developed a content strategy focusing on user-generated content to increase engagement. This strategy included social media campaigns and a content contest. It led to a 30% increase in user interaction and a significant boost in brand awareness."
    },
    {
        "title": "How Do You Ensure Content Consistency Across Different Channels?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your methods for maintaining content consistency across various platforms.",
        "tags": "content consistency, multi-channel, brand uniformity",
        "paid": "Yes",
        "answer": "I ensure consistency by adhering to a comprehensive style guide and maintaining clear communication with the team. I regularly review content across channels to ensure alignment with brand messaging. For example, I use a content calendar to coordinate topics and messaging across social media, blogs, and email campaigns."
    },
    {
        "title": "What Strategies Do You Use for Writing High-Converting Landing Pages?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you craft compelling landing pages that drive conversions.",
        "tags": "landing pages, conversions, writing strategies",
        "paid": "Yes",
        "answer": "I create high-converting landing pages by focusing on a strong, clear headline, compelling copy, and a persuasive call-to-action. I use A/B testing to optimize elements and ensure the page resonates with the target audience. For instance, I might test different CTAs to determine which one generates the most conversions."
    },
    {
        "title": "How Do You Handle Writing for Different Brand Personas?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Describe your approach to writing for various brand personas and maintaining their unique voice.",
        "tags": "brand personas, voice, writing adaptation",
        "paid": "Yes",
        "answer": "I handle different brand personas by understanding their specific attributes and tailoring content to match their tone and style. I review persona documents and previous content to ensure consistency. For example, writing for a luxury brand requires a sophisticated tone, while a startup might use a more casual, energetic style."
    },
    {
        "title": "What Are Your Best Practices for Writing SEO-Friendly Blog Posts?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Share your techniques for creating blog posts optimized for search engines.",
        "tags": "SEO, blog posts, best practices",
        "paid": "Yes",
        "answer": "Best practices for SEO-friendly blog posts include conducting keyword research, using keywords strategically throughout the post, and optimizing meta descriptions and headers. I also ensure content is well-structured with relevant internal and external links. For example, I write engaging introductions and use keywords naturally to improve search engine visibility."
    },
    {
        "title": "How Do You Approach Writing Long-Form Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your strategy for creating and structuring long-form content.",
        "tags": "long-form content, writing strategy, structure",
        "paid": "Yes",
        "answer": "For long-form content, I start with detailed outlines and break the content into sections with clear headings. I ensure each section flows logically and maintains reader engagement. For example, in writing a comprehensive guide, I divide it into actionable sections with subheadings, bullet points, and visuals to keep readers interested."
    },
    {
        "title": "How Do You Handle Content for International Audiences?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you adapt content for international audiences with different cultural backgrounds.",
        "tags": "international content, cultural adaptation, writing",
        "paid": "Yes",
        "answer": "I adapt content for international audiences by understanding cultural differences and localizing language and examples. I also consider regional preferences and norms. For instance, I adjust idiomatic expressions and references to ensure relevance and avoid misunderstandings. I collaborate with local experts to ensure accuracy and appropriateness."
    },
    {
        "title": "What Role Does User Feedback Play in Your Content Creation?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Describe how you incorporate user feedback into your content development process.",
        "tags": "user feedback, content development, improvement",
        "paid": "Yes",
        "answer": "User feedback is crucial in refining content. I analyze comments and suggestions to identify common themes and areas for improvement. I use this feedback to make adjustments and enhance content relevance. For example, if readers frequently request more examples, I incorporate additional case studies or illustrations based on their input."
    },
    {
        "title": "How Do You Write Content That Resonates with a Niche Audience?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your approach to creating content tailored for niche audiences.",
        "tags": "niche audience, content tailoring, audience resonance",
        "paid": "Yes",
        "answer": "To write for a niche audience, I conduct thorough research to understand their specific needs and interests. I use industry-specific language and address their unique challenges. For example, when writing for financial professionals, I incorporate technical jargon and detailed data analysis to align with their expertise and expectations."
    },
    {
        "title": "How Do You Ensure Content Is Accessible to All Audiences?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your strategies for making content accessible to a diverse audience, including those with disabilities.",
        "tags": "accessibility, content inclusivity, diverse audiences",
        "paid": "Yes",
        "answer": "I ensure content accessibility by following guidelines like the Web Content Accessibility Guidelines (WCAG). I use descriptive alt text for images, ensure text contrast, and structure content with headings and lists for readability. For instance, I include captions and transcripts for multimedia content to support diverse needs and enhance overall inclusivity."
    },
    {
        "title": "How Do You Approach Writing for Different Content Lengths?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you adjust your writing style for varying content lengths, from short posts to detailed articles.",
        "tags": "content length, writing style, adaptation",
        "paid": "Yes",
        "answer": "I adapt my writing style based on content length by focusing on brevity and clarity for shorter pieces, and depth and detail for longer content. For example, a social media post requires a concise, impactful message, while a long-form article involves thorough research and detailed analysis to provide comprehensive coverage of the topic."
    },
    {
        "title": "How Do You Stay Creative and Generate Fresh Ideas for Your Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your methods for maintaining creativity and coming up with new content ideas.",
        "tags": "creativity, content ideas, inspiration",
        "paid": "Yes",
        "answer": "To stay creative, I regularly consume a variety of content, including books, articles, and podcasts, to spark new ideas. I also use brainstorming techniques, such as mind mapping and collaboration with colleagues. For instance, I might create a content idea list based on recent industry trends and audience feedback."
    },
    {
        "title": "How Do You Approach Writing Content for Different Marketing Channels?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you adapt your writing for various marketing channels, such as email, social media, and websites.",
        "tags": "marketing channels, writing adaptation, content strategy",
        "paid": "Yes",
        "answer": "I tailor content for each marketing channel by aligning the tone and format with the channelâ€™s characteristics. For email, I focus on personalized, concise messaging with a clear CTA. For social media, I use engaging visuals and brief, impactful text. For websites, I provide in-depth, SEO-optimized content. For example, a promotional email might have a direct, actionable message, while a blog post offers detailed information and insights."
    },
    {
        "title": "How Do You Use Analytics to Improve Your Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss how you leverage analytics to enhance the effectiveness of your content.",
        "tags": "analytics, content improvement, performance metrics",
        "paid": "Yes",
        "answer": "I use analytics tools to track content performance metrics such as page views, bounce rates, and user engagement. I analyze this data to identify successful elements and areas for improvement. For example, if a particular topic has high engagement, I may create follow-up content or explore related subjects to capitalize on audience interest."
    },
    {
        "title": "What Techniques Do You Use to Write Content That Drives Traffic?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your methods for crafting content that attracts and retains website traffic.",
        "tags": "traffic generation, content techniques, engagement",
        "paid": "Yes",
        "answer": "I drive traffic by optimizing content for SEO, using compelling headlines, and promoting content through social media and email marketing. I also focus on providing valuable, shareable content that encourages readers to visit and return. For instance, I write in-depth guides with actionable tips and promote them across relevant channels to increase visibility and drive traffic."
    },
    {
        "title": "How Do You Balance Creativity with Brand Guidelines?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss how you maintain creative freedom while adhering to brand guidelines.",
        "tags": "creativity, brand guidelines, balance",
        "paid": "Yes",
        "answer": "I balance creativity with brand guidelines by understanding the brandâ€™s voice and objectives while finding innovative ways to express ideas within those constraints. I use the guidelines as a framework and explore creative approaches that align with the brandâ€™s message. For example, I might use unique storytelling techniques while ensuring the content adheres to the brandâ€™s tone and style."
    },
    {
        "title": "What Are Your Techniques for Writing Effective Calls-to-Action?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Share your methods for crafting persuasive calls-to-action (CTAs) in your content.",
        "tags": "calls-to-action, persuasive writing, content",
        "paid": "Yes",
        "answer": "I write effective CTAs by making them clear, concise, and action-oriented. I use strong verbs and create a sense of urgency or benefit. I also ensure the CTA aligns with the contentâ€™s goals. For example, a CTA for a webinar might be â€˜Register Now to Secure Your Spotâ€™ to prompt immediate action and emphasize the value."
    },
    {
        "title": "How Do You Handle Tight Deadlines with Multiple Projects?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your approach to managing multiple projects under tight deadlines.",
        "tags": "time management, deadlines, project management",
        "paid": "Yes",
        "answer": "I handle multiple projects under tight deadlines by prioritizing tasks, creating a detailed schedule, and setting clear milestones. I use project management tools to track progress and ensure timely completion. For example, I might break projects into smaller tasks and allocate specific times for each to manage workload efficiently."
    },
    {
        "title": "How Do You Ensure Your Content Is Original and Avoids Plagiarism?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your methods for creating original content and avoiding plagiarism.",
        "tags": "originality, plagiarism, content integrity",
        "paid": "Yes",
        "answer": "I ensure originality by conducting thorough research and synthesizing information in my own words. I use plagiarism detection tools to verify content before publication. For instance, I might cross-check sources and rephrase ideas to ensure the content is unique and properly attributed, maintaining high standards of content integrity."
    },
    {
        "title": "What Is Your Process for Writing and Editing Press Releases?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Describe your approach to writing and editing press releases for various announcements.",
        "tags": "press releases, writing, editing",
        "paid": "Yes",
        "answer": "My process for writing press releases includes crafting a compelling headline, providing clear and concise information, and ensuring proper formatting. I focus on making the content newsworthy and engaging. During editing, I check for accuracy, clarity, and adherence to style guidelines. For example, I ensure the press release highlights key details and includes a strong, informative lead."
    },
    {
        "title": "How Do You Approach Writing Case Studies?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your approach to creating detailed and effective case studies.",
        "tags": "case studies, writing approach, content",
        "paid": "Yes",
        "answer": "I approach writing case studies by outlining the problem, solution, and results. I gather data from clients and stakeholders and present it in a structured format with clear headings. I use real-world examples and quantify results to highlight the impact. For example, I might showcase a clientâ€™s success story with detailed metrics and client testimonials."
    },
    {
        "title": "What Are Your Strategies for Writing Content for Lead Generation?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your methods for creating content that effectively generates leads.",
        "tags": "lead generation, content strategies, writing",
        "paid": "Yes",
        "answer": "I write content for lead generation by focusing on addressing pain points and offering solutions through compelling calls-to-action. I create lead magnets such as eBooks or whitepapers and use persuasive language to encourage conversions. For instance, I might craft a blog post that drives readers to download a valuable resource in exchange for their contact information."
    },
    {
        "title": "How Do You Incorporate Keywords Without Compromising Content Quality?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your approach to using keywords effectively while maintaining high content quality.",
        "tags": "keywords, content quality, SEO",
        "paid": "Yes",
        "answer": "I incorporate keywords by blending them naturally into the content, ensuring they fit contextually and enhance readability. I avoid keyword stuffing by focusing on creating valuable and engaging content first. For example, I use variations of keywords and synonyms to maintain flow while optimizing the content for search engines."
    },
    {
        "title": "How Do You Approach Writing Content for Different Buyer Personas?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your strategy for tailoring content to various buyer personas.",
        "tags": "buyer personas, content tailoring, strategy",
        "paid": "Yes",
        "answer": "I tailor content for different buyer personas by understanding their needs, preferences, and pain points. I create content that addresses specific concerns and uses language that resonates with each persona. For example, I might write a detailed guide for a technical persona and a more introductory blog post for a general audience."
    },
    {
        "title": "What Are Your Methods for Writing Content That Enhances Brand Loyalty?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you craft content to build and strengthen brand loyalty.",
        "tags": "brand loyalty, content methods, engagement",
        "paid": "Yes",
        "answer": "I enhance brand loyalty by creating content that aligns with the brandâ€™s values and engages the audience through storytelling and personalized experiences. I focus on delivering consistent, valuable content that fosters a sense of community. For example, I might write customer success stories and behind-the-scenes content to build a stronger connection with the audience."
    },
    {
        "title": "How Do You Approach Writing Content for Mobile Audiences?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your strategies for creating content that is effective for mobile users.",
        "tags": "mobile content, user experience, writing strategies",
        "paid": "Yes",
        "answer": "I create mobile-friendly content by ensuring it is concise, easily scannable, and formatted for small screens. I use short paragraphs, bullet points, and clear headlines. I also optimize images and ensure fast loading times. For instance, I write short, engaging headlines and use visual elements to enhance readability on mobile devices."
    },
    {
        "title": "How Do You Write Content That Appeals to Both Humans and Search Engines?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your approach to creating content that satisfies both user experience and SEO requirements.",
        "tags": "SEO, user experience, content writing",
        "paid": "Yes",
        "answer": "I balance human appeal and SEO by writing engaging, high-quality content while incorporating relevant keywords strategically. I focus on readability and user intent, ensuring the content is valuable and informative. For example, I craft content that answers common questions and provides solutions while naturally integrating keywords to enhance search visibility."
    },
    {
        "title": "How Do You Handle Negative Feedback on Your Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your approach to managing and responding to negative feedback on your content.",
        "tags": "negative feedback, content management, response",
        "paid": "Yes",
        "answer": "I handle negative feedback by reviewing the comments constructively and making necessary adjustments to improve the content. I respond professionally, acknowledging concerns and providing clarifications if needed. For example, if a reader criticizes a factual error, I correct the information and update the content accordingly."
    },
    {
        "title": "What Are Your Techniques for Writing Persuasive Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Share your strategies for crafting content that persuades and influences readers.",
        "tags": "persuasive writing, techniques, content strategy",
        "paid": "Yes",
        "answer": "I use techniques like addressing pain points, presenting clear benefits, and using persuasive language and evidence. I include testimonials and case studies to build credibility. For example, I might write a sales page that highlights product benefits, includes customer testimonials, and uses compelling calls-to-action to drive conversions."
    },
    {
        "title": "How Do You Approach Writing Content for Different Levels of Expertise?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your strategy for creating content that caters to various levels of expertise within a topic.",
        "tags": "expertise levels, content creation, writing strategies",
        "paid": "Yes",
        "answer": "I tailor content to different expertise levels by adjusting the complexity of language and detail. For beginners, I provide clear, simple explanations and foundational concepts. For experts, I include advanced insights and in-depth analysis. For example, a technical blog post might have a basic overview for newcomers and detailed sections for experienced professionals."
    },
    {
        "title": "What Is Your Approach to Writing Content That Supports Sales Efforts?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss how you create content that aligns with and supports sales objectives.",
        "tags": "sales support, content strategy, alignment",
        "paid": "Yes",
        "answer": "I align content with sales efforts by focusing on key value propositions and addressing customer pain points. I create content that nurtures leads through the sales funnel, such as case studies, product comparisons, and solution-focused articles. For example, I might write a detailed product guide that highlights features and benefits to assist the sales team in closing deals."
    },
    {
        "title": "How Do You Manage Content Creation for Different Stages of the Buyerâ€™s Journey?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you tailor content for awareness, consideration, and decision stages of the buyerâ€™s journey.",
        "tags": "buyerâ€™s journey, content stages, management",
        "paid": "Yes",
        "answer": "I manage content for different stages by creating targeted content for each phase. For awareness, I focus on educational and informative content. For consideration, I provide comparative and solution-oriented content. For decision, I offer detailed product information and testimonials. For example, I write blog posts for awareness, product reviews for consideration, and case studies for decision-making."
    },
    {
        "title": "What Are Your Strategies for Writing Engaging Social Media Posts?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your approach to creating captivating and engaging posts for social media platforms.",
        "tags": "social media, engagement, writing strategies",
        "paid": "Yes",
        "answer": "I write engaging social media posts by using attention-grabbing headlines, incorporating visuals, and crafting concise, compelling messages. I also use hashtags and encourage interaction through questions or calls-to-action. For example, I create posts with striking images and interactive elements like polls to drive engagement and increase reach."
    },
    {
        "title": "How Do You Approach Writing Content for Email Campaigns?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your strategy for creating effective and engaging email campaign content.",
        "tags": "email campaigns, writing strategy, engagement",
        "paid": "Yes",
        "answer": "I create email campaign content by focusing on personalization, compelling subject lines, and clear calls-to-action. I segment email lists to tailor messages to different audience groups. For example, I write targeted emails with personalized content and offers based on subscriber behavior and preferences to improve open rates and conversions."
    },
    {
        "title": "What Is Your Process for Writing and Optimizing Web Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your approach to creating and optimizing content for websites.",
        "tags": "web content, optimization, writing process",
        "paid": "Yes",
        "answer": "My process for web content involves researching keywords, creating engaging and informative content, and optimizing for SEO. I include relevant keywords naturally and use meta descriptions, headers, and internal linking. For example, I write a well-structured article with SEO-friendly elements and ensure it provides valuable information that enhances the user experience."
    },
    {
        "title": "How Do You Write Content That Appeals to Different Demographics?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your strategy for crafting content that resonates with various demographic groups.",
        "tags": "demographics, content appeal, writing strategies",
        "paid": "Yes",
        "answer": "I tailor content to different demographics by understanding their interests, language preferences, and cultural references. I adjust the tone and examples to match the target audience. For example, I might use a formal tone and industry jargon for a professional audience, while using a casual and relatable tone for a younger demographic."
    },
    {
        "title": "How Do You Ensure Content Quality When Working with Multiple Writers?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your methods for maintaining content quality when collaborating with multiple writers.",
        "tags": "content quality, collaboration, writing teams",
        "paid": "Yes",
        "answer": "To ensure quality with multiple writers, I implement a clear style guide, conduct regular reviews, and maintain consistent communication. I also use collaborative tools for tracking revisions and feedback. For example, I review each piece of content to ensure it adheres to the guidelines and provide feedback to maintain uniform quality."
    },
    {
        "title": "How Do You Write Content That Drives User Engagement?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your approach to creating content that encourages active user engagement.",
        "tags": "user engagement, content strategies, writing",
        "paid": "Yes",
        "answer": "I drive user engagement by creating interactive and visually appealing content, asking questions, and incorporating calls-to-action. I also use storytelling and relatable examples to connect with readers. For instance, I might include interactive elements like quizzes or polls in a blog post to encourage reader participation and feedback."
    },
    {
        "title": "What Are Your Techniques for Writing Effective Product Descriptions?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your methods for crafting product descriptions that attract and convert customers.",
        "tags": "product descriptions, writing techniques, conversions",
        "paid": "Yes",
        "answer": "I write effective product descriptions by focusing on key features, benefits, and unique selling points. I use persuasive language and create a sense of urgency or exclusivity. For example, I might highlight a productâ€™s unique features and include customer testimonials to enhance appeal and encourage purchases."
    },
    {
        "title": "How Do You Handle Content Creation for Different Formats, Like Infographics or Videos?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your approach to writing content for various formats beyond traditional text.",
        "tags": "content formats, infographics, videos",
        "paid": "Yes",
        "answer": "I handle different formats by adapting my writing style to fit the medium. For infographics, I focus on concise, impactful text and data visualization. For videos, I write scripts with engaging dialogue and clear messages. For example, I create short, attention-grabbing text for infographics and detailed, conversational scripts for video content."
    },
    {
        "title": "What Is Your Process for Updating and Refreshing Older Content?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your approach to revising and updating existing content to keep it relevant.",
        "tags": "content updating, refreshing, relevance",
        "paid": "Yes",
        "answer": "I update older content by reviewing its performance, checking for outdated information, and incorporating recent developments or data. I also improve SEO elements and enhance readability. For example, I might update a blog post with current statistics and new insights to maintain its relevance and effectiveness."
    },
    {
        "title": "How Do You Write Content That Is Shareable and Viral?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your strategies for creating content that has the potential to be widely shared and go viral.",
        "tags": "shareable content, viral strategies, writing",
        "paid": "Yes",
        "answer": "To create shareable content, I focus on crafting engaging, valuable, and visually appealing material. I include elements that resonate emotionally or provide utility. I also incorporate social sharing buttons and encourage readers to share. For example, I write listicles with intriguing headlines and practical tips to encourage readers to share the content with their networks."
    },
    {
        "title": "How Do You Write Content That Aligns with a Brandâ€™s Voice and Identity?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your approach to ensuring content reflects a brandâ€™s unique voice and identity.",
        "tags": "brand voice, content alignment, writing",
        "paid": "Yes",
        "answer": "I align content with a brandâ€™s voice by studying the brandâ€™s existing materials and guidelines. I use consistent language, tone, and style to reflect the brandâ€™s identity. For example, if the brand has a casual, conversational voice, I write content that mirrors this tone, ensuring it resonates with the target audience."
    },
    {
        "title": "What Is Your Approach to Writing Content That Addresses Common Customer Questions?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain how you create content that effectively answers frequently asked customer questions.",
        "tags": "customer questions, content creation, FAQ",
        "paid": "Yes",
        "answer": "I address common customer questions by researching frequently asked questions and creating content that provides clear, detailed answers. I use a Q&A format or integrate answers into relevant blog posts. For example, I might create a dedicated FAQ page or include answers to common queries within a product-related article to provide valuable information."
    },
    {
        "title": "How Do You Approach Writing Content for Different Buyer Stages?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your strategy for creating content tailored to various stages of the buyerâ€™s journey.",
        "tags": "buyer stages, content strategy, writing",
        "paid": "Yes",
        "answer": "I tailor content for different buyer stages by addressing specific needs and concerns at each stage. For awareness, I create informative content. For consideration, I provide comparative and solution-focused content. For decision-making, I offer detailed product information and case studies. For example, I write educational blog posts for new leads and detailed product comparisons for those evaluating options."
    },
    {
        "title": "What Are Your Strategies for Writing Content That Enhances Brand Authority?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Discuss your methods for crafting content that positions a brand as an authority in its industry.",
        "tags": "brand authority, content strategies, industry expertise",
        "paid": "Yes",
        "answer": "I enhance brand authority by producing high-quality, insightful content that demonstrates expertise and provides value. I use data-driven insights, expert opinions, and case studies to build credibility. For example, I write in-depth industry reports and thought leadership articles that showcase the brandâ€™s knowledge and position it as a leader in the field."
    },
    {
        "title": "How Do You Write Content That Drives Conversions?",
        "category": "Content Writer",
        "sub_category": "Theory Round",
        "description": "Explain your approach to creating content with the goal of driving conversions.",
        "tags": "content conversions, writing strategies, call-to-action",
        "paid": "Yes",
        "answer": "I drive conversions by crafting persuasive content with clear calls-to-action and focusing on benefits that resonate with the target audience. I use compelling headlines, testimonials, and strong value propositions. For example, I write landing page content that highlights the key benefits of a product and includes a strong CTA to encourage users to take the next step."
    },
    {
        "title": "What is an Operating System?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the basic concept of an operating system.",
        "tags": "basic,concept,OS",
        "paid": "Yes",
        "answer": "An Operating System (OS) is system software that manages computer hardware and software resources. It provides a user interface and controls hardware operations, such as memory management and process scheduling. For example, Windows and Linux are popular OSs that handle tasks like file management and peripheral control."
    },
    {
        "title": "What is the purpose of process management?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the role of process management in an OS.",
        "tags": "process,management,OS",
        "paid": "Yes",
        "answer": "Process management in an OS involves creating, scheduling, and terminating processes. It ensures efficient CPU utilization and manages process states. For instance, when you run a program, the OS allocates resources, schedules its execution, and manages its lifecycle until completion."
    },
    {
        "title": "What are the key responsibilities of memory management?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the functions of memory management in an OS.",
        "tags": "memory,management,OS",
        "paid": "Yes",
        "answer": "Memory management involves handling the allocation and deallocation of memory space. It ensures that each process has enough memory to execute and prevents memory leaks. For example, paging and segmentation are techniques used to manage memory efficiently in an OS."
    },
    {
        "title": "What is a kernel in an operating system?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define the kernel and its role in an OS.",
        "tags": "kernel,OS,role",
        "paid": "Yes",
        "answer": "The kernel is the core component of an OS that manages system resources and communication between hardware and software. It handles low-level tasks such as process scheduling, memory management, and device control. For instance, the Linux kernel manages system operations in a Linux environment."
    },
    {
        "title": "What are system calls?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain what system calls are and their purpose.",
        "tags": "system,call,OS",
        "paid": "Yes",
        "answer": "System calls are the interface between user applications and the OS. They allow programs to request services such as file operations or process control. For example, the 'open' system call in Unix-based systems opens a file and returns a file descriptor to the application."
    },
    {
        "title": "What is a process and a thread?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Differentiate between a process and a thread.",
        "tags": "process,thread,OS",
        "paid": "No",
        "answer": "A process is an independent program in execution, while a thread is a smaller unit of a process that can run concurrently. Threads share resources of the process but have their own execution path. For example, a web browser (process) might have multiple tabs (threads) running simultaneously."
    },
    {
        "title": "What is a deadlock?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define deadlock and how it affects system performance.",
        "tags": "deadlock,OS,performance",
        "paid": "No",
        "answer": "Deadlock occurs when two or more processes are stuck in a state where each is waiting for the other to release resources, causing none to proceed. For instance, if two processes are each holding a lock and waiting for the other to release its lock, neither can continue."
    },
    {
        "title": "What is virtual memory?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the concept of virtual memory and its benefits.",
        "tags": "virtual,memory,OS",
        "paid": "No",
        "answer": "Virtual memory is a memory management technique that creates an illusion of a larger physical memory by using disk space. It allows for more efficient memory utilization and process isolation. For example, a system with 4GB RAM can use virtual memory to handle more data by paging to disk."
    },
    {
        "title": "Explain the concept of paging.",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "What is paging and how does it work?",
        "tags": "paging,OS,concept",
        "paid": "No",
        "answer": "Paging is a memory management scheme that eliminates the need for contiguous allocation of physical memory. It divides memory into fixed-size pages and maps them to physical memory frames. This allows for efficient and flexible memory use, as pages can be loaded and swapped as needed."
    },
    {
        "title": "What is a semaphore?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define semaphores and their use in synchronization.",
        "tags": "semaphore,synchronization,OS",
        "paid": "No",
        "answer": "A semaphore is a synchronization primitive used to control access to shared resources by multiple processes. It consists of a counter and operations (wait and signal) to manage resource allocation. For example, semaphores can prevent race conditions in concurrent programming by ensuring mutual exclusion."
    },
    {
        "title": "What is the difference between a process and a program?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Differentiate between process and program.",
        "tags": "process,program,OS",
        "paid": "No",
        "answer": "A program is a static set of instructions stored on disk, whereas a process is a dynamic entity that executes the program's instructions. A program becomes a process when it is loaded into memory and executed. For example, a word processor application (program) runs as a process when opened."
    },
    {
        "title": "What is a file system?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the purpose and functionality of a file system.",
        "tags": "file,system,OS",
        "paid": "No",
        "answer": "A file system manages the storage and retrieval of files on a disk. It organizes files into directories and handles metadata such as file size and permissions. For example, NTFS in Windows and ext4 in Linux are file systems that manage data storage and access."
    },
    {
        "title": "What is context switching?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the process of context switching.",
        "tags": "context, switching, OS",
        "paid": "No",
        "answer": "Context switching is the process of saving the state of a currently running process and loading the state of the next process to be executed. It involves saving registers, program counter, and other context information. For example, switching between multiple applications on a computer involves context switching."
    },
    {
        "title": "What is a race condition?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define race condition and how to prevent it.",
        "tags": "race,condition,OS",
        "paid": "No",
        "answer": "A race condition occurs when the outcome of a process depends on the sequence or timing of uncontrollable events. It can lead to unpredictable results. To prevent race conditions, synchronization mechanisms like mutexes and semaphores are used to ensure orderly access to shared resources."
    },
    {
        "title": "What is a file descriptor?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain what a file descriptor is and its purpose.",
        "tags": "file,descriptor,OS",
        "paid": "No",
        "answer": "A file descriptor is an integer handle used by the OS to access files and I/O resources. It is returned by system calls like 'open' and used in subsequent operations such as 'read' or 'write'. For example, in Unix-like systems, file descriptor 0 refers to standard input."
    },
    {
        "title": "What are interrupt requests (IRQs)?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe IRQs and their role in system operation.",
        "tags": "interrupt,requests,IRQ,OS",
        "paid": "No",
        "answer": "Interrupt requests (IRQs) are signals sent to the CPU indicating that a device needs attention. IRQs help manage hardware communication and prioritize tasks. For instance, pressing a key on the keyboard generates an IRQ to notify the OS to read the keystroke."
    },
    {
        "title": "What is thrashing in operating systems?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define thrashing and how it affects system performance.",
        "tags": "thrashing,performance,OS",
        "paid": "Yes",
        "answer": "Thrashing occurs when the OS spends more time swapping data between memory and disk than executing processes, leading to degraded performance. It happens when there is excessive paging or segmentation. For example, running too many memory-intensive applications can cause thrashing."
    },
    {
        "title": "What is a page fault?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the concept of a page fault.",
        "tags": "page,fault,OS",
        "paid": "Yes",
        "answer": "A page fault occurs when a program accesses a page not currently in physical memory, triggering the OS to fetch it from disk into RAM. For example, if a program tries to access data that has been swapped out, the OS loads the required page from the disk, which may cause a delay."
    },
    {
        "title": "What is a deadlock prevention strategy?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe a strategy for preventing deadlocks.",
        "tags": "deadlock,prevention,strategy,OS",
        "paid": "Yes",
        "answer": "Deadlock prevention strategies aim to avoid the conditions that lead to deadlocks. One common method is the Banker's Algorithm, which allocates resources only if it determines that doing so will not lead to a deadlock. This involves assessing whether resource allocation will leave the system in a safe state."
    },
    {
        "title": "What is an inode?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the concept of an inode in a file system.",
        "tags": "inode,file,system,OS",
        "paid": "Yes",
        "answer": "An inode is a data structure in a file system that stores information about a file, such as its size, owner, permissions, and disk location. For example, in the ext4 file system, each file is associated with an inode that helps manage its attributes and data location."
    },
    {
        "title": "What is a system call interface?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the system call interface and its significance.",
        "tags": "system,call,interface,OS",
        "paid": "Yes",
        "answer": "The system call interface is the mechanism through which user applications interact with the OS kernel. It provides a set of functions for performing operations like file manipulation and process control. For example, the 'read' system call retrieves data from a file and returns it to the application."
    },
    {
        "title": "What is a page replacement algorithm?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the purpose and types of page replacement algorithms.",
        "tags": "page,replacement,algorithm,OS",
        "paid": "Yes",
        "answer": "Page replacement algorithms decide which pages to swap out of physical memory when a page fault occurs. Common algorithms include Least Recently Used (LRU) and FIFO (First In, First Out). For instance, LRU replaces the page that has not been used for the longest time."
    },
    {
        "title": "What is the difference between a monolithic kernel and a microkernel?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Compare monolithic and microkernels.",
        "tags": "monolithic,microkernel,OS",
        "paid": "Yes",
        "answer": "A monolithic kernel includes all essential OS services in one large block of code, providing high performance but less modularity. In contrast, a microkernel only includes the most fundamental services, with other functionalities running in user space, offering better modularity and stability. For example, Linux uses a monolithic kernel, while Minix uses a microkernel."
    },
    {
        "title": "What is an access control list (ACL)?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe ACLs and their role in file security.",
        "tags": "access,control,list,ACL,OS",
        "paid": "Yes",
        "answer": "An access control list (ACL) is a list of permissions attached to an object, specifying which users or system processes are granted access to that object and what operations they can perform. For example, ACLs in Unix-like systems define file access rights for users and groups."
    },
    {
        "title": "What are the differences between synchronous and asynchronous I/O?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Compare synchronous and asynchronous I/O operations.",
        "tags": "synchronous,asynchronous,I/O,OS",
        "paid": "Yes",
        "answer": "Synchronous I/O operations block the process until the I/O operation completes, while asynchronous I/O allows the process to continue execution while the I/O operation proceeds in the background. For example, reading a file synchronously means the process waits for the read to complete, whereas asynchronously, it continues executing other tasks."
    },
    {
        "title": "What is a virtual machine?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the concept of a virtual machine.",
        "tags": "virtual,machine,OS",
        "paid": "Yes",
        "answer": "A virtual machine (VM) is a software emulation of a physical computer that runs an OS and applications as if it were a physical machine. VMs enable multiple operating systems to run on a single physical host, improving resource utilization. For instance, VMware and VirtualBox are popular VM platforms."
    },
    {
        "title": "What is process synchronization?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define process synchronization and its importance.",
        "tags": "process,synchronization,OS",
        "paid": "Yes",
        "answer": "Process synchronization ensures that multiple processes or threads operate in a coordinated manner to avoid conflicts when accessing shared resources. It is crucial for maintaining data consistency and avoiding race conditions. For example, semaphores and mutexes are commonly used synchronization tools."
    },
    {
        "title": "What is the purpose of the file allocation table (FAT)?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the function of FAT in file systems.",
        "tags": "file,allocation,table,FAT,OS",
        "paid": "Yes",
        "answer": "The File Allocation Table (FAT) is a file system structure that keeps track of file locations on disk. It manages space allocation and file organization. For example, in FAT16, the table is used to locate clusters on the disk that store file data."
    },
    {
        "title": "What is the difference between preemptive and non-preemptive scheduling?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Compare preemptive and non-preemptive CPU scheduling.",
        "tags": "preemptive,non-preemptive,scheduling,OS",
        "paid": "Yes",
        "answer": "Preemptive scheduling allows the OS to interrupt and replace a currently running process based on priority or time slice, while non-preemptive scheduling requires a process to release the CPU voluntarily. For example, Round-Robin scheduling is preemptive, whereas First-Come, First-Served is non-preemptive."
    },
    {
        "title": "What is a shell in operating systems?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define the role of a shell in an OS.",
        "tags": "shell,OS,role",
        "paid": "Yes",
        "answer": "A shell is a user interface that allows users to interact with the OS by executing commands and scripts. It can be command-line based or graphical. For example, Bash and Zsh are command-line shells in Unix-like systems, while Windows has Command Prompt and PowerShell."
    },
    {
        "title": "What is the role of the scheduler in an OS?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the function of the scheduler in an OS.",
        "tags": "scheduler,OS,function",
        "paid": "Yes",
        "answer": "The scheduler manages the execution of processes by allocating CPU time and determining the order of process execution. It ensures efficient CPU utilization and process management. For example, the scheduler decides which process gets CPU time and for how long in a time-sharing system."
    },
    {
        "title": "What is a device driver?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define device driver and its role in an OS.",
        "tags": "device,driver,OS",
        "paid": "Yes",
        "answer": "A device driver is a software component that allows the OS to communicate with hardware devices. It translates OS commands into device-specific actions. For instance, a printer driver converts print jobs from the OS into a format that the printer can understand and execute."
    },
    {
        "title": "What are the different types of operating system structures?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe various OS structures.",
        "tags": "operating,system,structures,OS",
        "paid": "Yes",
        "answer": "OS structures include monolithic kernels, microkernels, modular kernels, and layered systems. Monolithic kernels have all services in a single kernel space, while microkernels have minimal core functions, and modular kernels allow dynamic addition of modules. Layered systems organize the OS into hierarchical layers of functionality."
    },
    {
        "title": "What is a context block?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the purpose of a context block.",
        "tags": "context,block,OS",
        "paid": "Yes",
        "answer": "A context block stores the state information of a process or thread, including CPU registers, program counter, and memory management information. It is used during context switching to save and restore process states. For example, when switching tasks, the OS saves the current context and loads the next one from the context block."
    },
    {
        "title": "What is the significance of file permissions?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the importance of file permissions in an OS.",
        "tags": "file,permissions,OS",
        "paid": "Yes",
        "answer": "File permissions control access to files and directories, specifying which users can read, write, or execute files. This is crucial for maintaining security and privacy. For example, in Unix-like systems, permissions are denoted by rwx (read, write, execute) and can be set for the owner, group, and others."
    },
    {
        "title": "What is the role of an operating system in virtualization?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain how an OS supports virtualization.",
        "tags": "virtualization,OS,role",
        "paid": "Yes",
        "answer": "In virtualization, the OS (host OS) manages the virtual machines (VMs) and provides virtualized resources such as CPU, memory, and storage. It ensures isolation between VMs and their access to hardware. For instance, VMware Workstation allows multiple VMs to run concurrently on a single host OS."
    },
    {
        "title": "What is a system bus?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define a system bus and its purpose in computer architecture.",
        "tags": "system,bus,OS",
        "paid": "Yes",
        "answer": "A system bus is a communication system that transfers data between different components of a computer, such as the CPU, memory, and peripherals. It consists of data, address, and control lines. For example, the system bus allows the CPU to communicate with RAM and storage devices."
    },
    {
        "title": "What is a fork in process management?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the fork system call in process management.",
        "tags": "fork,process,management,OS",
        "paid": "Yes",
        "answer": "The fork system call creates a new process by duplicating the calling process. The new process, called the child process, has its own unique process ID and memory space. For example, in Unix-like systems, the fork call creates a child process that can then execute a different program using exec."
    },
    {
        "title": "What is a critical section?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define the critical section in process synchronization.",
        "tags": "critical,section,synchronization,OS",
        "paid": "Yes",
        "answer": "A critical section is a segment of code where shared resources are accessed by multiple processes. Proper synchronization is required to prevent concurrent access that could lead to inconsistencies. For instance, if two processes update a shared counter simultaneously, mutual exclusion ensures only one process updates it at a time."
    },
    {
        "title": "What is an atomic operation?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the concept of an atomic operation in computer systems.",
        "tags": "atomic,operation,OS",
        "paid": "Yes",
        "answer": "An atomic operation is an operation that runs completely independently of any other operations and is uninterruptible. It ensures consistency by preventing other processes from intervening during its execution. For example, incrementing a counter atomically guarantees that the counterâ€™s value is updated correctly without interference."
    },
    {
        "title": "What is an OS page table?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the function of a page table in memory management.",
        "tags": "page,table,memory,management,OS",
        "paid": "Yes",
        "answer": "A page table is a data structure used in virtual memory systems to map virtual addresses to physical addresses. It keeps track of the location of pages in physical memory. For example, when a process accesses virtual memory, the OS uses the page table to determine the corresponding physical address."
    },
    {
        "title": "What is the difference between soft and hard links?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Compare soft and hard links in file systems.",
        "tags": "soft,hard,links,file,system,OS",
        "paid": "Yes",
        "answer": "A hard link is a direct reference to a file's inode, making it indistinguishable from the original file. A soft link (or symbolic link) is a separate file that points to another file or directory. For example, `ln` creates hard links, while `ln -s` creates soft links in Unix-like systems."
    },
    {
        "title": "What is a system image?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define a system image and its use.",
        "tags": "system,image,OS",
        "paid": "Yes",
        "answer": "A system image is a snapshot of a computer's OS, applications, and data at a specific point in time. It is used for backup, recovery, or duplication purposes. For example, creating a system image before a major upgrade allows you to restore your system to its previous state if something goes wrong."
    },
    {
        "title": "What is a fork-join pattern?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the fork-join pattern in parallel programming.",
        "tags": "fork,join,pattern,OS",
        "paid": "Yes",
        "answer": "The fork-join pattern is a parallel programming model where a process forks multiple tasks and then joins their results. It divides a task into sub-tasks that can be executed concurrently, then synchronizes their results. For example, in a parallel computation, a master task forks several worker tasks and joins their outputs to produce the final result."
    },
    {
        "title": "What is a pipe in Unix-like systems?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the concept of a pipe and its use.",
        "tags": "pipe,Unix,OS",
        "paid": "Yes",
        "answer": "A pipe is a mechanism in Unix-like systems that allows the output of one process to be used as the input for another process. It enables chaining commands together. For example, `ls | grep 'file'` lists files and filters the output for those containing 'file'."
    },
    {
        "title": "What is a file system journal?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the purpose of journaling in file systems.",
        "tags": "file,system,journal,OS",
        "paid": "Yes",
        "answer": "A file system journal is a log that records changes before they are committed to the file system. It helps recover from crashes by replaying or rolling back incomplete transactions. For example, ext3 and ext4 file systems use journaling to maintain data integrity in case of system failures."
    },
    {
        "title": "What is the difference between user space and kernel space?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Compare user space and kernel space in an OS.",
        "tags": "user,space,kernel,space,OS",
        "paid": "Yes",
        "answer": "User space is where applications run and do not have direct access to hardware or system resources. Kernel space is where the OS kernel operates, with full access to hardware and system resources. For example, user applications run in user space, while device drivers run in kernel space."
    },
    {
        "title": "What is a thread pool?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define a thread pool and its benefits.",
        "tags": "thread,pool,OS",
        "paid": "Yes",
        "answer": "A thread pool is a collection of pre-created threads that are reused to execute tasks. It helps manage resources more efficiently by reducing the overhead of thread creation and destruction. For example, web servers use thread pools to handle incoming requests concurrently without creating a new thread for each request."
    },
    {
        "title": "What is a bootloader?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the role of a bootloader in system startup.",
        "tags": "bootloader,OS,system,startup",
        "paid": "Yes",
        "answer": "A bootloader is a small program that loads the OS into memory during system startup. It initializes hardware and passes control to the OS kernel. For example, GRUB is a popular bootloader used in Linux systems to load the kernel and start the operating system."
    },
    {
        "title": "What is an execution context?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define execution context in process management.",
        "tags": "execution,context,process,OS",
        "paid": "Yes",
        "answer": "The execution context includes all information necessary to resume a process's execution, such as CPU registers, program counter, and memory state. It is saved during a context switch and restored when the process resumes. For instance, when switching between processes, the OS saves and loads execution contexts to manage process states."
    },
    {
        "title": "What is a system boot process?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the steps involved in the system boot process.",
        "tags": "boot,process,OS",
        "paid": "Yes",
        "answer": "The system boot process involves several steps: powering on the computer, executing the BIOS/UEFI firmware to initialize hardware, loading the bootloader, and then loading the OS kernel into memory. For example, the BIOS performs POST (Power-On Self-Test) and then hands control over to the bootloader to load the OS."
    },
    {
        "title": "What is the purpose of a system call wrapper?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the concept and purpose of system call wrappers.",
        "tags": "system,call,wrapper,OS",
        "paid": "Yes",
        "answer": "A system call wrapper is a library function that provides an interface to system calls, abstracting the underlying complexity. It translates user-level requests into system calls. For example, the `open()` function in C is a wrapper around the system call `sys_open()`, simplifying file operations for the programmer."
    },
    {
        "title": "What is the concept of memory fragmentation?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define memory fragmentation and its impact.",
        "tags": "memory,fragmentation,OS",
        "paid": "Yes",
        "answer": "Memory fragmentation occurs when free memory is divided into small, non-contiguous blocks, leading to inefficient memory use. It impacts performance by making it harder to allocate large contiguous memory blocks. For example, fragmentation can cause a system to run out of memory despite having enough total free space."
    },
    {
        "title": "What is a resource allocation graph?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the purpose of a resource allocation graph in OS.",
        "tags": "resource,allocation,graph,OS",
        "paid": "Yes",
        "answer": "A resource allocation graph is a tool used to represent and manage the allocation of resources to processes in a system. It helps detect and prevent deadlocks by showing which resources are allocated to which processes and which are requested. For example, it can help visualize potential deadlock conditions in a system."
    },
    {
        "title": "What is a semaphore?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe semaphores and their role in synchronization.",
        "tags": "semaphore,synchronization,OS",
        "paid": "Yes",
        "answer": "A semaphore is a synchronization tool used to manage access to shared resources by multiple processes. It can be binary (mutex) or counting, and it controls access using signals. For example, semaphores are used to implement mutual exclusion, ensuring that only one process can access a critical section at a time."
    },
    {
        "title": "What is a watchdog timer?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the function of a watchdog timer in systems.",
        "tags": "watchdog,timer,OS",
        "paid": "Yes",
        "answer": "A watchdog timer is a hardware or software timer used to detect and recover from system malfunctions. It periodically resets if the system is operating correctly. If the timer is not reset, it indicates a failure and triggers a recovery action, such as rebooting the system. For example, it can prevent systems from hanging due to software faults."
    },
    {
        "title": "What is the difference between a hard disk and SSD?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Compare hard disks and SSDs in terms of performance and storage.",
        "tags": "hard,disk,SSD,storage,OS",
        "paid": "Yes",
        "answer": "Hard disks use spinning magnetic platters and read/write heads, offering high capacity at lower costs but slower speeds. SSDs use flash memory with no moving parts, providing faster data access, durability, and efficiency. For example, SSDs significantly improve boot times and application load speeds compared to traditional hard disks."
    },
    {
        "title": "What is a system call?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define a system call and its role in operating systems.",
        "tags": "system,call,OS",
        "paid": "Yes",
        "answer": "A system call is an interface used by applications to request services from the OS kernel, such as file operations, process management, or communication. For example, the `read()` system call requests data from a file, allowing an application to interact with the file system."
    },
    {
        "title": "What is the concept of a process?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define a process and its components in an OS.",
        "tags": "process,OS,components",
        "paid": "Yes",
        "answer": "A process is an instance of a running program, including its code, data, and execution context. It consists of a program counter, stack, heap, and data section. For example, when you run a text editor, the OS creates a process with its own memory space and execution state."
    },
    {
        "title": "What is the difference between a thread and a process?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Compare threads and processes in terms of resource management.",
        "tags": "thread,process,OS",
        "paid": "Yes",
        "answer": "A process is an independent program execution unit with its own memory space, while a thread is a smaller unit of a process that shares memory with other threads of the same process. For example, a web browser may have multiple threads for handling different tabs, but all threads share the same memory space."
    },
    {
        "title": "What is a file descriptor?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the role of a file descriptor in file management.",
        "tags": "file,descriptor,OS",
        "paid": "Yes",
        "answer": "A file descriptor is an integer used by the OS to identify an open file or I/O resource. It provides a reference for file operations like reading and writing. For example, when a file is opened, the OS returns a file descriptor that can be used by the application to interact with the file."
    },
    {
        "title": "What is an operating system service?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the various services provided by an OS.",
        "tags": "OS,services",
        "paid": "Yes",
        "answer": "Operating system services include process management, memory management, file system management, device management, and user interface management. These services provide a controlled environment for executing applications, managing resources, and interacting with hardware. For example, the file system service handles file operations and organization."
    },
    {
        "title": "What is memory paging?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define memory paging and its advantages.",
        "tags": "memory,paging,OS",
        "paid": "Yes",
        "answer": "Memory paging is a memory management scheme that eliminates the need for contiguous allocation of physical memory and thus eliminates external fragmentation. It divides memory into fixed-size blocks called pages. For example, it allows a process to use more memory than physically available by paging data in and out of disk storage."
    },
    {
        "title": "What is a distributed operating system?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the concept of a distributed operating system.",
        "tags": "distributed,operating,system,OS",
        "paid": "Yes",
        "answer": "A distributed operating system manages a group of separate computers as a unified system, sharing resources and providing a single coherent environment. It ensures processes and data are transparently accessible across multiple nodes. For example, Apache Hadoop uses a distributed OS model to handle large-scale data processing across clusters."
    },
    {
        "title": "What is memory overcommitment in virtualization?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe memory overcommitment and its implications in virtualized environments.",
        "tags": "memory,overcommitment,virtualization,OS",
        "paid": "Yes",
        "answer": "Memory overcommitment allows a hypervisor to allocate more virtual memory to VMs than physically available, assuming not all VMs will use their full allocation simultaneously. It can lead to performance issues if too many VMs use their allocated memory, causing increased swapping or paging."
    },
    {
        "title": "Explain the concept of kernel space vs. user space protection.",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Discuss how kernel space and user space are protected from each other.",
        "tags": "kernel,space,user,protection,OS",
        "paid": "Yes",
        "answer": "Kernel space is protected from user space to prevent user programs from directly accessing or modifying critical system resources. This separation prevents user-space processes from compromising system stability or security. For example, system calls act as controlled gateways between user space and kernel space."
    },
    {
        "title": "What is kernel mode and user mode?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define kernel mode and user mode in operating systems.",
        "tags": "kernel,mode,user,OS",
        "paid": "Yes",
        "answer": "Kernel mode allows the OS to execute privileged instructions and access hardware directly, while user mode restricts applications to a limited set of operations and requires system calls to interact with the OS. For example, executing hardware access directly is only possible in kernel mode, not user mode."
    },
    {
        "title": "What is the difference between context switching and thread switching?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Compare context switching and thread switching in terms of system overhead.",
        "tags": "context,switching,thread,OS",
        "paid": "Yes",
        "answer": "Context switching involves saving and restoring the state of a process, including its memory and CPU registers, while thread switching only involves saving and restoring the thread's state within a process, sharing the same memory space. Thread switching is generally faster due to less overhead compared to context switching."
    },
    {
        "title": "Explain the concept of NUMA (Non-Uniform Memory Access).",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe NUMA and its impact on system performance.",
        "tags": "NUMA,Non-Uniform,Memory,Access,OS",
        "paid": "Yes",
        "answer": "NUMA is a memory architecture where memory access times vary depending on the memory's location relative to the processor. Each processor has its local memory, and accessing remote memory can be slower. NUMA optimizes performance by localizing memory access and reducing remote access delays."
    },
    {
        "title": "What are kernel threads and user threads?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Differentiate between kernel threads and user threads.",
        "tags": "kernel,threads,user,OS",
        "paid": "Yes",
        "answer": "Kernel threads are managed directly by the OS kernel and can run concurrently on multiple processors. User threads are managed by user-level libraries and require kernel support to execute. Kernel threads provide better system integration and resource management compared to user threads, which are more lightweight."
    },
    {
        "title": "What is a system call interposition?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain system call interposition and its applications.",
        "tags": "system,call,interposition,OS",
        "paid": "Yes",
        "answer": "System call interposition involves intercepting and analyzing system calls made by applications. This technique is used for purposes like security monitoring, debugging, or performance profiling. For example, a security module might interpose system calls to enforce access controls or detect malicious activity."
    },
    {
        "title": "What is the purpose of a hypervisor in virtualization?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the role of a hypervisor in managing virtual machines.",
        "tags": "hypervisor,virtualization,OS",
        "paid": "Yes",
        "answer": "A hypervisor, or virtual machine monitor, manages multiple virtual machines (VMs) by providing virtualized hardware and isolating VMs from each other. It allocates resources, handles scheduling, and ensures isolation between VMs. For example, VMware ESXi and Microsoft Hyper-V are hypervisors used in enterprise environments."
    },
    {
        "title": "What is a syscall return value and how is it used?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain syscall return values and their importance.",
        "tags": "syscall,return,value,OS",
        "paid": "Yes",
        "answer": "The syscall return value indicates the success or failure of a system call. It typically returns a positive value for success or a negative value with an error code. For example, the `open()` syscall returns a file descriptor on success or -1 with an error code if it fails."
    },
    {
        "title": "What is the role of a page directory in x86 architecture?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the function of a page directory in x86 memory management.",
        "tags": "page,directory,x86,OS",
        "paid": "Yes",
        "answer": "In x86 architecture, a page directory is used in paging to manage memory. It holds pointers to page tables, which map virtual addresses to physical addresses. Each entry in the page directory points to a page table, which in turn maps to the actual physical pages of memory."
    },
    {
        "title": "What are user-level context switches?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain user-level context switches and their efficiency.",
        "tags": "user-level,context,switches,OS",
        "paid": "Yes",
        "answer": "User-level context switches occur within the same process and involve saving and restoring the state of threads managed by user-level libraries, not the kernel. They are faster than kernel-level context switches because they avoid the overhead of switching between kernel and user mode."
    },
    {
        "title": "What is a race condition, and how can it be prevented?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define race condition and describe methods to prevent it.",
        "tags": "race,condition,prevention,OS",
        "paid": "Yes",
        "answer": "A race condition occurs when the outcome of a program depends on the non-deterministic timing of concurrent processes. It can be prevented using synchronization mechanisms like mutexes, semaphores, and locks, which ensure that critical sections are accessed by only one process at a time."
    },
    {
        "title": "What is the purpose of memory ballooning in virtualization?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe memory ballooning and its benefits in virtualized environments.",
        "tags": "memory,ballooning,virtualization,OS",
        "paid": "Yes",
        "answer": "Memory ballooning dynamically reclaims memory from VMs by inflating a balloon device in the guest OS, which forces the guest to free up memory. This allows the hypervisor to redistribute memory among VMs based on current needs, optimizing overall resource utilization."
    },
    {
        "title": "What is a kernel module, and how does it differ from a kernel driver?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain kernel modules and their distinction from kernel drivers.",
        "tags": "kernel,module,driver,OS",
        "paid": "Yes",
        "answer": "A kernel module is a piece of code that can be loaded and unloaded into the kernel at runtime, extending kernel functionality. A kernel driver is a specific type of module designed to manage hardware devices. While all drivers are modules, not all modules are drivers."
    },
    {
        "title": "What is the purpose of a context switch in multi-threading?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain why context switching is essential in multi-threaded applications.",
        "tags": "context,switch,multi-threading,OS",
        "paid": "Yes",
        "answer": "Context switching allows a CPU to switch between different threads or processes, enabling multitasking and efficient use of the processor. It involves saving the state of the current thread and loading the state of the next thread, thus allowing concurrent execution of multiple threads."
    },
    {
        "title": "What are kernel-space and user-space memory protection mechanisms?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Discuss memory protection mechanisms between kernel and user spaces.",
        "tags": "kernel,space,user,protection,OS",
        "paid": "Yes",
        "answer": "Kernel-space memory protection ensures that user-space processes cannot directly access or modify kernel memory, preventing potential security breaches. User-space protection isolates applications from each other, preventing them from interfering with one another's memory. This separation helps maintain system stability and security."
    },
    {
        "title": "What is a memory-mapped file?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the concept and uses of memory-mapped files.",
        "tags": "memory-mapped,file,OS",
        "paid": "Yes",
        "answer": "A memory-mapped file maps a file or a portion of it into the address space of a process, allowing file data to be accessed as if it were part of memory. It simplifies file I/O and can improve performance by allowing direct memory access and efficient file sharing."
    },
    {
        "title": "What is the concept of a time-sharing system?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain time-sharing systems and their advantages.",
        "tags": "time-sharing,system,OS",
        "paid": "Yes",
        "answer": "A time-sharing system allocates CPU time among multiple users or processes, giving the illusion of concurrent execution. It improves resource utilization and responsiveness by rapidly switching between tasks. For example, Unix-like systems use time-sharing to handle multiple user sessions efficiently."
    },
    {
        "title": "What is a virtual file system (VFS)?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define a virtual file system and its role in OS.",
        "tags": "virtual,file,system,VFS,OS",
        "paid": "Yes",
        "answer": "A virtual file system (VFS) provides a uniform interface to different file systems, allowing applications to interact with various file systems using a consistent API. It abstracts the underlying file system details and enables seamless file access across different storage systems."
    },
    {
        "title": "What is a memory footprint?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the concept of memory footprint and its significance.",
        "tags": "memory,footprint,OS",
        "paid": "Yes",
        "answer": "Memory footprint refers to the amount of memory consumed by a process, including code, data, and stack. It is significant for optimizing memory usage and ensuring efficient resource management. For example, applications with a large memory footprint may affect overall system performance and scalability."
    },
    {
        "title": "What is the purpose of load balancing in distributed systems?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe load balancing and its importance in distributed systems.",
        "tags": "load,balancing,distributed,systems,OS",
        "paid": "Yes",
        "answer": "Load balancing distributes workloads across multiple servers or resources to ensure no single component is overwhelmed. It improves system performance, availability, and reliability by evenly distributing the load. For example, a web server cluster uses load balancing to manage incoming traffic efficiently."
    },
    {
        "title": "What is a kernel panic, and how is it handled?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the concept of a kernel panic and its resolution.",
        "tags": "kernel,panic,OS",
        "paid": "Yes",
        "answer": "A kernel panic is a critical error that occurs when the OS kernel encounters an unrecoverable issue, causing the system to halt. It is handled by generating a diagnostic message and often requires a reboot. Debugging tools and logs help identify the cause of the panic for resolution."
    },
    {
        "title": "What is a system call stack?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define the concept of a system call stack.",
        "tags": "system,call,stack,OS",
        "paid": "Yes",
        "answer": "A system call stack is a data structure used to manage function calls and their associated data during system calls. It tracks the execution context, parameters, and return addresses. For example, when a process makes a system call, the stack holds information needed to return control after the call completes."
    },
    {
        "title": "What is a process scheduler?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the role of a process scheduler in an operating system.",
        "tags": "process,scheduler,OS",
        "paid": "Yes",
        "answer": "A process scheduler manages the execution of processes by allocating CPU time based on scheduling algorithms. It ensures efficient process management, responsiveness, and resource utilization. For example, the scheduler may use algorithms like Round Robin or Priority Scheduling to determine which process runs next."
    },
    {
        "title": "What is a resource deadlock, and how can it be resolved?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define resource deadlock and describe methods for resolution.",
        "tags": "resource,deadlock,resolution,OS",
        "paid": "Yes",
        "answer": "A resource deadlock occurs when a set of processes are stuck waiting for resources held by each other, preventing any of them from proceeding. It can be resolved using techniques like deadlock detection, prevention (such as resource allocation graphs), or recovery methods like killing processes or resource preemption."
    },
    {
        "title": "What is a kernel mode vs. user mode transition?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the transition between kernel mode and user mode.",
        "tags": "kernel,mode,user,transition,OS",
        "paid": "Yes",
        "answer": "Transitioning from kernel mode to user mode occurs when the OS switches from executing privileged operations to executing user applications. This switch involves saving and restoring contexts and switching memory protection levels. For example, after a system call, the kernel mode returns control to user mode to continue application execution."
    },
    {
        "title": "What is an interrupt vector?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the purpose of an interrupt vector in handling interrupts.",
        "tags": "interrupt,vector,OS",
        "paid": "Yes",
        "answer": "An interrupt vector is a table of addresses used by the OS to handle interrupts. Each entry corresponds to an interrupt request and points to the interrupt service routine (ISR) that handles the interrupt. For example, the x86 architecture uses an interrupt vector table to manage hardware and software interrupts."
    },
    {
        "title": "What is the role of the I/O scheduler?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the function of the I/O scheduler in managing disk operations.",
        "tags": "I/O,scheduler,OS",
        "paid": "Yes",
        "answer": "The I/O scheduler manages disk I/O requests by optimizing the order and timing of operations to improve performance and reduce latency. It uses algorithms like CFQ (Completely Fair Queuing) or Deadline Scheduling to balance throughput and responsiveness. For example, it can reorder disk access requests to minimize seek times."
    },
    {
        "title": "What is a memory leak?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define a memory leak and its impact on system performance.",
        "tags": "memory,leak,OS",
        "paid": "Yes",
        "answer": "A memory leak occurs when a process allocates memory but fails to release it, leading to gradual memory exhaustion. It can degrade system performance and stability over time. For example, an application that continuously allocates memory without freeing it will eventually consume all available memory, causing system slowdowns or crashes."
    },
    {
        "title": "What is a system call interface?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the system call interface and its importance.",
        "tags": "system,call,interface,OS",
        "paid": "Yes",
        "answer": "The system call interface is the mechanism through which user applications request services from the OS kernel. It provides a controlled and standardized way for applications to perform operations like file access and process management. For example, functions like `read()`, `write()`, and `open()` are system calls that interact with the OS kernel."
    },
    {
        "title": "What is kernel-space memory allocation?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain how memory allocation is handled in kernel space.",
        "tags": "kernel,space,memory,allocation,OS",
        "paid": "Yes",
        "answer": "Kernel-space memory allocation involves managing memory resources used by the OS kernel and its modules. It uses specific allocators like the slab allocator to handle memory requests. For example, the kernel might use a slab allocator to efficiently manage memory for frequently used objects like file system caches."
    },
    {
        "title": "What are process control blocks (PCBs)?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define process control blocks and their role in process management.",
        "tags": "process,control,block,PCB,OS",
        "paid": "Yes",
        "answer": "Process control blocks (PCBs) are data structures used by the OS to manage information about processes. They store details like process state, program counter, CPU registers, and memory management information. For example, the OS uses PCBs to track process status during context switches and scheduling."
    },
    {
        "title": "What is the concept of a system call dispatcher?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the role of a system call dispatcher in the OS.",
        "tags": "system,call,dispatcher,OS",
        "paid": "Yes",
        "answer": "A system call dispatcher directs system calls to the appropriate kernel functions based on the call number and parameters. It translates user-space requests into kernel actions, ensuring that the correct system call routine is executed. For example, the dispatcher routes `read()` requests to the file system handling code."
    },
    {
        "title": "What is a semaphore and how does it prevent race conditions?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define semaphores and their role in preventing race conditions.",
        "tags": "semaphore,race,condition,OS",
        "paid": "Yes",
        "answer": "A semaphore is a synchronization primitive used to control access to shared resources and prevent race conditions. By using signaling operations (P and V), semaphores manage concurrent access, ensuring only one process or thread can access a critical section at a time, thus avoiding conflicts."
    },
    {
        "title": "What is a file system journal?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the purpose of journaling in file systems.",
        "tags": "file,system,journal,OS",
        "paid": "Yes",
        "answer": "A file system journal records changes before they are committed to disk, ensuring consistency and recoverability in case of crashes. It helps to quickly restore the file system to a consistent state by replaying or discarding journal entries. For example, ext3 and ext4 file systems use journaling to enhance reliability."
    },
    {
        "title": "What is the purpose of the page table in virtual memory systems?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the role of the page table in virtual memory management.",
        "tags": "page,table,virtual,memory,OS",
        "paid": "Yes",
        "answer": "The page table maps virtual addresses to physical addresses in virtual memory systems. It allows the OS to translate virtual addresses used by applications into physical addresses in RAM. For example, when a process accesses memory, the page table helps locate the data in physical memory."
    },
    {
        "title": "What is the role of the memory management unit (MMU)?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the function of the memory management unit in an OS.",
        "tags": "memory,management,unit,MMU,OS",
        "paid": "Yes",
        "answer": "The memory management unit (MMU) handles virtual-to-physical address translation, enabling virtual memory systems. It uses page tables to map virtual addresses to physical memory and manages memory protection and caching. For example, the MMU allows processes to use more memory than physically available by paging."
    },
    {
        "title": "What is a real-time operating system (RTOS)?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define a real-time operating system and its use cases.",
        "tags": "real-time,OS,RTOS",
        "paid": "Yes",
        "answer": "A real-time operating system (RTOS) guarantees time constraints and predictable response times for critical tasks. It is used in systems requiring precise timing and high reliability, such as embedded systems, automotive control systems, and medical devices. For example, RTOS ensures timely processing in flight control systems."
    },
    {
        "title": "What is the difference between a microkernel and a monolithic kernel?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Compare microkernels and monolithic kernels.",
        "tags": "microkernel,monolithic,kernel,OS",
        "paid": "Yes",
        "answer": "A microkernel contains only essential services in kernel space, delegating other services to user space, enhancing modularity and stability. A monolithic kernel includes all services within the kernel, providing high performance but less flexibility. For example, Linux uses a monolithic kernel, while Minix uses a microkernel architecture."
    },
    {
        "title": "What is kernel mode versus user mode in the context of system calls?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain kernel mode and user mode in system call execution.",
        "tags": "kernel,mode,user,system,call,OS",
        "paid": "Yes",
        "answer": "Kernel mode allows direct hardware access and execution of privileged operations, while user mode restricts access to prevent interference with the OS. System calls transition from user mode to kernel mode to perform operations requiring elevated privileges, ensuring safe and controlled execution of sensitive tasks."
    },
    {
        "title": "What is a file descriptor table?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the purpose and structure of a file descriptor table.",
        "tags": "file,descriptor,table,OS",
        "paid": "Yes",
        "answer": "A file descriptor table is a per-process table that maps file descriptors to file objects or resources. Each entry contains information about the open files or I/O resources. For example, file descriptor 0 typically represents the standard input stream in Unix-like systems, managed through this table."
    },
    {
        "title": "What is the difference between symmetric and asymmetric multiprocessing?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Compare symmetric and asymmetric multiprocessing architectures.",
        "tags": "symmetric,asymmetric,multiprocessing,OS",
        "paid": "Yes",
        "answer": "In symmetric multiprocessing (SMP), all processors share the same memory and I/O resources and run tasks in parallel. In asymmetric multiprocessing (AMP), one processor is designated as the master, managing tasks, while other processors handle specific functions. SMP offers better scalability, while AMP is simpler but less flexible."
    },
    {
        "title": "What is process migration?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define process migration and its advantages.",
        "tags": "process,migration,OS",
        "paid": "Yes",
        "answer": "Process migration involves moving a running process from one system or node to another, often for load balancing or fault tolerance. It improves resource utilization and system reliability by redistributing processes. For example, a process may be migrated from an overloaded server to a less busy one."
    },
    {
        "title": "What is a deadlock detection algorithm?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain algorithms used for deadlock detection.",
        "tags": "deadlock,detect,algorithm,OS",
        "paid": "Yes",
        "answer": "Deadlock detection algorithms identify when a system is in a deadlock state. Examples include the Banker's Algorithm and Wait-for Graphs. The Banker's Algorithm assesses whether resource allocation will leave the system in a safe state, while Wait-for Graphs analyze circular wait conditions to detect deadlocks."
    },
    {
        "title": "What is a system call interface and its purpose?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the system call interface and its role in the OS.",
        "tags": "system,call,interface,OS",
        "paid": "Yes",
        "answer": "The system call interface provides a controlled mechanism for user applications to request services from the OS kernel, such as file operations, process control, and communication. It acts as a bridge between user applications and the OS, ensuring secure and efficient interaction with system resources."
    },
    {
        "title": "What is a file system mount point?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define a file system mount point and its use.",
        "tags": "file,system,mount,point,OS",
        "paid": "Yes",
        "answer": "A file system mount point is a directory in the existing file system where an additional file system is attached. It allows the integration of multiple file systems into a single directory hierarchy. For example, mounting a USB drive creates a mount point to access files on the drive within the OS."
    },
    {
        "title": "What is the purpose of a swap file or swap space?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the role of swap files or swap space in memory management.",
        "tags": "swap,file,space,memory,OS",
        "paid": "Yes",
        "answer": "Swap space or swap files are used to extend virtual memory by providing additional space on disk for swapping out inactive pages from RAM. It helps manage memory pressure and allows running more processes than can fit in physical RAM. For example, when RAM is full, the OS swaps less-used data to swap space."
    },
    {
        "title": "What is a device driver and its role in the OS?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the purpose of device drivers in an operating system.",
        "tags": "device,driver,OS",
        "paid": "Yes",
        "answer": "A device driver is software that allows the OS to communicate with hardware devices. It translates OS commands into device-specific actions and vice versa. For example, a printer driver translates print commands into a format the printer understands, enabling print operations from applications."
    },
    {
        "title": "What is a priority inversion problem and how can it be mitigated?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define priority inversion and methods to mitigate it.",
        "tags": "priority,inversion,problem,OS",
        "paid": "Yes",
        "answer": "Priority inversion occurs when a lower-priority task holds a resource needed by a higher-priority task, causing the high-priority task to be delayed. It can be mitigated using priority inheritance protocols, which temporarily raise the priority of the lower-priority task to prevent inversion and improve responsiveness."
    },
    {
        "title": "What is an inode in a file system?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the role and structure of an inode in file systems.",
        "tags": "inode,file,system,OS",
        "paid": "Yes",
        "answer": "An inode is a data structure in a file system that stores metadata about a file, such as its size, ownership, permissions, and location on disk. It does not store the file's name or data but provides essential information needed to manage the file. For example, the ext4 file system uses inodes to track file attributes and locations."
    },
    {
        "title": "What is the difference between a thread and a process?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Compare threads and processes in terms of their characteristics and management.",
        "tags": "thread,process,OS",
        "paid": "Yes",
        "answer": "A process is an independent program in execution with its own memory space, while a thread is a smaller unit of execution within a process, sharing the same memory space. Threads are lighter weight and more efficient for tasks that require frequent communication, whereas processes are more isolated and suited for running independent tasks."
    },
    {
        "title": "What is a context switch?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the concept of a context switch in process management.",
        "tags": "context,switch,OS",
        "paid": "Yes",
        "answer": "A context switch occurs when the OS saves the state of a currently running process and loads the state of a different process. It involves saving and restoring process registers, memory maps, and other state information. For example, context switches enable multitasking by allowing the CPU to switch between processes."
    },
    {
        "title": "What is the purpose of the page fault handler?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the role of the page fault handler in virtual memory systems.",
        "tags": "page,fault,handler,OS",
        "paid": "Yes",
        "answer": "The page fault handler manages page faults, which occur when a process accesses a page not currently in physical memory. The handler retrieves the page from disk (swap space) and updates the page table. For example, when a page fault occurs, the OS suspends the process, loads the required page into memory, and resumes execution."
    },
    {
        "title": "What is a file system superblock?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the function and content of a file system superblock.",
        "tags": "file,system,superblock,OS",
        "paid": "Yes",
        "answer": "A file system superblock contains critical metadata about the file system, such as its size, block size, and status. It provides information necessary for the OS to manage and access the file system. For example, the superblock helps the OS determine the file system's structure and available space."
    },
    {
        "title": "What is the purpose of the process table?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Describe the role of the process table in operating systems.",
        "tags": "process,table,OS",
        "paid": "Yes",
        "answer": "The process table is a data structure used by the OS to maintain information about active processes. It includes details like process IDs, states, memory usage, and scheduling information. For example, the OS uses the process table to manage process scheduling and resource allocation."
    },
    {
        "title": "What is the role of the kernel in managing system resources?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain how the kernel manages system resources.",
        "tags": "kernel,system,resources,OS",
        "paid": "Yes",
        "answer": "The kernel manages system resources by handling process scheduling, memory management, device I/O, and system calls. It acts as an intermediary between user applications and hardware, ensuring efficient and secure resource allocation. For example, the kernel allocates CPU time to processes and manages memory usage."
    },
    {
        "title": "What is an atomic operation?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define atomic operations and their importance in concurrency.",
        "tags": "atomic,operation,concurrency,OS",
        "paid": "Yes",
        "answer": "An atomic operation is an indivisible operation that completes in a single step relative to other tasks. It is crucial for concurrency control, ensuring that operations like updates to shared variables are performed without interference. For example, atomic operations prevent race conditions by ensuring that updates are completed without interruption."
    },
    {
        "title": "What is a critical section in concurrent programming?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Define a critical section and its role in concurrent programming.",
        "tags": "critical,section,concurrent,OS",
        "paid": "Yes",
        "answer": "A critical section is a segment of code where shared resources are accessed and modified. It must be executed by only one thread or process at a time to prevent data corruption and race conditions. For example, mutual exclusion mechanisms like mutexes are used to protect critical sections and ensure safe concurrent execution."
    },
    {
        "title": "What is the purpose of the file system cache?",
        "category": "OS",
        "sub_category": "Theory Round",
        "description": "Explain the role and benefits of file system caching.",
        "tags": "file,system,cache,OS",
        "paid": "Yes",
        "answer": "The file system cache stores frequently accessed file data in memory to improve performance and reduce disk I/O. By caching file data, the OS can quickly retrieve information without accessing the slower disk. For example, reading a file from cache is faster than reading it from the disk, enhancing system responsiveness."
    },
    {
        "title": "What is a Computer?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define what a computer is.",
        "tags": "computer,definition,basics",
        "paid": "Yes",
        "answer": "A computer is an electronic device that processes data and performs tasks according to a set of instructions (software). It consists of hardware components such as the CPU, memory, and storage. For example, a laptop is a portable computer capable of running various applications like word processors and web browsers."
    },
    {
        "title": "What is an Operating System?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain the concept of an operating system.",
        "tags": "operating system,OS,computer basics",
        "paid": "Yes",
        "answer": "An operating system (OS) is system software that manages computer hardware and software resources and provides services for computer programs. Common examples include Windows, macOS, and Linux. For instance, Windows 10 manages hardware like printers and allows users to run applications such as Microsoft Word."
    },
    {
        "title": "What is the Central Processing Unit (CPU)?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Describe the role of the CPU in a computer.",
        "tags": "CPU,central processing unit,computer architecture",
        "paid": "Yes",
        "answer": "The CPU is the brain of the computer, responsible for executing instructions from programs. It performs basic arithmetic, logic, control, and input/output operations. For example, when you run a program, the CPU processes the instructions, making the program function. The speed of a CPU is measured in gigahertz (GHz)."
    },
    {
        "title": "What is the difference between RAM and ROM?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain the key differences between RAM and ROM.",
        "tags": "RAM,ROM,memory,computer architecture",
        "paid": "Yes",
        "answer": "RAM (Random Access Memory) is volatile memory that stores data temporarily while the computer is running. ROM (Read-Only Memory) is non-volatile and stores permanent data, such as the BIOS. For example, RAM helps run applications smoothly, while ROM stores the instructions required to boot the computer."
    },
    {
        "title": "What is a Hard Drive?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define the role of a hard drive in a computer.",
        "tags": "hard drive,storage,computer hardware",
        "paid": "Yes",
        "answer": "A hard drive is a storage device that stores and retrieves digital data using magnetic storage or solid-state technology. It permanently stores files, applications, and the operating system. For instance, your documents, photos, and programs are stored on the hard drive, even when the computer is turned off."
    },
    {
        "title": "What is a Network?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Describe what a computer network is.",
        "tags": "network,computer network,basics",
        "paid": "Yes",
        "answer": "A computer network is a collection of interconnected computers that communicate with each other to share resources, such as files and printers, and to access the internet. For example, a home Wi-Fi network connects multiple devices like laptops, smartphones, and smart TVs to the internet."
    },
    {
        "title": "What is a Web Browser?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define the function of a web browser.",
        "tags": "web browser,internet,browser",
        "paid": "Yes",
        "answer": "A web browser is a software application that allows users to access and view websites on the internet. Popular browsers include Google Chrome, Mozilla Firefox, and Safari. For example, a browser lets you visit websites like YouTube or Wikipedia by typing the URL into the address bar."
    },
    {
        "title": "What is an IP Address?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain what an IP address is.",
        "tags": "IP address,internet,networking",
        "paid": "Yes",
        "answer": "An IP (Internet Protocol) address is a unique identifier assigned to each device connected to a network. It helps devices communicate with each other over the internet. For example, a computer's IP address might be 192.168.1.1, allowing it to connect to the web and access resources."
    },
    {
        "title": "What is Cloud Computing?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Describe the concept of cloud computing.",
        "tags": "cloud computing,internet,technology",
        "paid": "No",
        "answer": "Cloud computing is the delivery of computing services, such as storage, processing power, and applications, over the internet. This eliminates the need for local servers or personal devices. For example, services like Google Drive and Dropbox store files in the cloud, allowing users to access them from anywhere."
    },
    {
        "title": "What is a Firewall?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain what a firewall is and its purpose.",
        "tags": "firewall,network security,computer security",
        "paid": "No",
        "answer": "A firewall is a network security system that monitors and controls incoming and outgoing network traffic based on predefined security rules. Its main purpose is to protect the network from unauthorized access. For example, a firewall can block suspicious traffic coming from the internet to protect your computer from malware."
    },
    {
        "title": "What is the Internet of Things (IoT)?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain the concept of the Internet of Things (IoT).",
        "tags": "IoT,internet of things,technology",
        "paid": "No",
        "answer": "The Internet of Things (IoT) refers to the interconnected network of physical devices, vehicles, appliances, and other items embedded with sensors and software, allowing them to collect and exchange data over the internet. For example, smart home devices like thermostats and lights can be controlled remotely through an app."
    },
    {
        "title": "What is the difference between HTTP and HTTPS?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Discuss the differences between HTTP and HTTPS.",
        "tags": "HTTP,HTTPS,web protocols,internet",
        "paid": "No",
        "answer": "HTTP (Hypertext Transfer Protocol) is the protocol used for transmitting web pages, while HTTPS (Hypertext Transfer Protocol Secure) is a secure version of HTTP that encrypts data. For example, HTTPS is used for secure transactions like online banking, ensuring that sensitive data is encrypted during transmission."
    },
    {
        "title": "What is Artificial Intelligence (AI)?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define the concept of Artificial Intelligence.",
        "tags": "artificial intelligence,AI,technology",
        "paid": "No",
        "answer": "Artificial Intelligence (AI) is the simulation of human intelligence in machines, enabling them to perform tasks that typically require human intelligence, such as learning, problem-solving, and decision-making. For example, AI-powered chatbots can understand and respond to customer queries in real time, mimicking human-like conversations."
    },
    {
        "title": "What is Machine Learning?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain the concept of machine learning.",
        "tags": "machine learning,AI,technology",
        "paid": "No",
        "answer": "Machine Learning is a subset of AI that enables computers to learn from data and improve their performance without being explicitly programmed. It uses algorithms to find patterns in data. For example, spam filters in email services use machine learning to automatically identify and block unwanted messages."
    },
    {
        "title": "What is a Database?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define a database and its purpose.",
        "tags": "database,storage,data management",
        "paid": "No",
        "answer": "A database is an organized collection of structured data stored electronically. Databases allow for efficient storage, retrieval, and management of data. For example, a customer relationship management (CRM) system stores information about customers, allowing businesses to track interactions and analyze customer behavior."
    },
    {
        "title": "What is SQL?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain what SQL is and its use in databases.",
        "tags": "SQL,database,query language",
        "paid": "No",
        "answer": "SQL (Structured Query Language) is a standardized language used to manage and manipulate relational databases. It allows users to perform operations such as querying, inserting, updating, and deleting data. For example, the SQL query `SELECT * FROM Customers` retrieves all records from the 'Customers' table in a database."
    },
    {
        "title": "What is a Compiler?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define a compiler and its role in programming.",
        "tags": "compiler,programming,software development",
        "paid": "No",
        "answer": "A compiler is a program that translates source code written in a high-level programming language (such as C++ or Java) into machine code that a computer can execute. For example, the GNU C Compiler (GCC) compiles C code into executable machine instructions that the CPU can understand."
    },
    {
        "title": "What is an Algorithm?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain what an algorithm is.",
        "tags": "algorithm,computer science,basics",
        "paid": "No",
        "answer": "An algorithm is a step-by-step procedure for solving a specific problem or completing a task. It is used in computer programming to perform calculations, process data, and automate tasks. For example, a sorting algorithm such as QuickSort arranges a list of numbers in ascending order efficiently."
    },
    {
        "title": "What is a Flowchart?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define a flowchart and its use in programming.",
        "tags": "flowchart,programming,visualization",
        "paid": "Yes",
        "answer": "A flowchart is a diagram that represents the sequence of steps in a process or algorithm. It uses standardized symbols such as rectangles (for actions) and diamonds (for decisions). For example, a flowchart can visually represent the steps involved in processing customer orders, from order placement to shipping."
    },
    {
        "title": "What is a Programming Language?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define a programming language and its purpose.",
        "tags": "programming language,coding,software development",
        "paid": "Yes",
        "answer": "A programming language is a formal language used to write instructions that a computer can execute. Different programming languages are designed for various purposes, such as web development, system programming, and data analysis. For example, Python is a high-level programming language widely used for data science and machine learning."
    },
    {
        "title": "What is Object-Oriented Programming (OOP)?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain the concept of Object-Oriented Programming.",
        "tags": "OOP,object-oriented programming,programming paradigms",
        "paid": "Yes",
        "answer": "Object-Oriented Programming (OOP) is a programming paradigm based on the concept of 'objects,' which are instances of classes. OOP principles include encapsulation, inheritance, and polymorphism. For example, in Java, a class 'Car' can have properties like 'color' and 'speed,' and methods like 'drive' and 'stop.'"
    },
    {
        "title": "What is the difference between a Class and an Object?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Discuss the differences between a class and an object in programming.",
        "tags": "class,object,OOP,programming",
        "paid": "Yes",
        "answer": "A class is a blueprint or template for creating objects, defining the properties and behaviors (methods) they should have. An object is an instance of a class. For example, in Python, `class Dog:` defines a class, while `my_dog = Dog()` creates an object of that class."
    },
    {
        "title": "What is Inheritance in OOP?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define inheritance and its purpose in object-oriented programming.",
        "tags": "inheritance,OOP,object-oriented programming",
        "paid": "Yes",
        "answer": "Inheritance is an OOP principle where a new class (subclass) inherits the attributes and methods of an existing class (superclass). This allows code reuse and hierarchy. For example, if `class Animal` has a method `speak()`, a `class Dog(Animal)` can inherit this method, making the dog speak without rewriting the code."
    },
    {
        "title": "What is Encapsulation in OOP?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain the concept of encapsulation in OOP.",
        "tags": "encapsulation,OOP,object-oriented programming",
        "paid": "Yes",
        "answer": "Encapsulation is an OOP concept where the internal state of an object is hidden from the outside, only allowing access through public methods. This protects data integrity. For example, a class `BankAccount` may have private attributes like `balance`, accessed only via methods like `deposit()` and `withdraw()`."
    },
    {
        "title": "What is Polymorphism in OOP?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define polymorphism in object-oriented programming.",
        "tags": "polymorphism,OOP,object-oriented programming",
        "paid": "Yes",
        "answer": "Polymorphism is the ability in OOP to process objects differently based on their class or data type. It allows a single method or operator to act in different ways. For example, in Python, the `+` operator can add integers or concatenate strings, depending on the data type."
    },
    {
        "title": "What is the difference between Overloading and Overriding?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Differentiate between method overloading and method overriding.",
        "tags": "overloading,overriding,OOP,programming",
        "paid": "Yes",
        "answer": "Overloading occurs when multiple methods in the same class share the same name but differ in parameters. Overriding happens when a subclass provides a specific implementation of a method already defined in its superclass. For example, `print(int)` and `print(float)` are overloaded, while `print()` in a subclass may override its superclass."
    },
    {
        "title": "What is a Data Structure?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define a data structure and its importance.",
        "tags": "data structure,computer science,programming",
        "paid": "Yes",
        "answer": "A data structure is a way of organizing and storing data to allow for efficient access and modification. Common data structures include arrays, linked lists, stacks, and trees. For example, an array stores elements in a contiguous block of memory, enabling fast access via indices."
    },
    {
        "title": "What is an Array?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain what an array is in programming.",
        "tags": "array,data structure,programming",
        "paid": "Yes",
        "answer": "An array is a data structure that holds a fixed-size collection of elements, all of the same data type, stored in contiguous memory locations. For example, an array of integers `[1, 2, 3, 4]` allows access to each element using an index, such as `arr[0]` for `1`."
    },
    {
        "title": "What is a Linked List?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define a linked list and its use cases.",
        "tags": "linked list,data structure,programming",
        "paid": "Yes",
        "answer": "A linked list is a linear data structure where each element (node) contains data and a reference (or link) to the next node. It allows dynamic memory allocation. For example, in a singly linked list, each node points to the next, and traversal is done sequentially."
    },
    {
        "title": "What is a Stack?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain the concept of a stack in data structures.",
        "tags": "stack,data structure,programming",
        "paid": "Yes",
        "answer": "A stack is a linear data structure that follows the Last In, First Out (LIFO) principle. The most recent element added is the first to be removed. Common operations include `push` (add) and `pop` (remove). For example, undo operations in software applications often use a stack."
    },
    {
        "title": "What is a Queue?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Describe the concept of a queue in data structures.",
        "tags": "queue,data structure,programming",
        "paid": "Yes",
        "answer": "A queue is a linear data structure that follows the First In, First Out (FIFO) principle. The first element added is the first to be removed. Common operations include `enqueue` (add) and `dequeue` (remove). For example, printer jobs are processed in a queue where the first submitted job prints first."
    },
    {
        "title": "What is a Binary Tree?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define a binary tree and its use cases.",
        "tags": "binary tree,data structure,programming",
        "paid": "Yes",
        "answer": "A binary tree is a hierarchical data structure in which each node has at most two children, referred to as the left and right child. It is commonly used in searching and sorting algorithms. For example, a binary search tree efficiently allows for O(log n) search time."
    },
    {
        "title": "What is a Hash Table?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain the concept of a hash table.",
        "tags": "hash table,data structure,programming",
        "paid": "Yes",
        "answer": "A hash table is a data structure that maps keys to values for efficient lookup. It uses a hash function to compute an index into an array where the desired value can be found. For example, in Python, dictionaries are implemented as hash tables for fast key-value access."
    },
    {
        "title": "What is Big O Notation?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define Big O notation and its importance in algorithms.",
        "tags": "Big O,algorithms,complexity",
        "paid": "Yes",
        "answer": "Big O Notation is a mathematical notation used to describe the worst-case time complexity of an algorithm, showing how it scales with input size. For example, a linear search has O(n) complexity, meaning the time grows proportionally with the number of elements in the input."
    },
    {
        "title": "What is Recursion?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain the concept of recursion in programming.",
        "tags": "recursion,programming,algorithms",
        "paid": "Yes",
        "answer": "Recursion is a technique in which a function calls itself to solve a smaller instance of the problem until a base condition is met. For example, the factorial of a number n can be defined recursively as `n * factorial(n-1)` with the base case being `factorial(1) = 1`."
    },
    {
        "title": "What is a Sorting Algorithm?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define sorting algorithms and their use cases.",
        "tags": "sorting algorithms,algorithms,programming",
        "paid": "Yes",
        "answer": "Sorting algorithms are used to arrange data in a specific order, such as ascending or descending. Common algorithms include Bubble Sort, Merge Sort, and Quick Sort. For example, Merge Sort divides the list into smaller sublists, sorts them, and then merges them to form a sorted list."
    },
    {
        "title": "What is Bubble Sort?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain the Bubble Sort algorithm.",
        "tags": "bubble sort,sorting algorithms,programming",
        "paid": "Yes",
        "answer": "Bubble Sort is a simple comparison-based sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. For example, to sort `[3, 2, 1]`, Bubble Sort compares `3` and `2`, swaps them, and continues until the list is sorted."
    },
    {
        "title": "What is Quick Sort?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain the Quick Sort algorithm.",
        "tags": "quick sort,sorting algorithms,programming",
        "paid": "Yes",
        "answer": "Quick Sort is a divide-and-conquer sorting algorithm that selects a 'pivot' element, partitions the array into two sub-arrays with elements less than and greater than the pivot, and then recursively sorts the sub-arrays. For example, sorting `[4, 2, 7, 1]` involves selecting a pivot and sorting around it."
    },
    {
        "title": "What is Merge Sort?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Describe the Merge Sort algorithm.",
        "tags": "merge sort,sorting algorithms,programming",
        "paid": "Yes",
        "answer": "Merge Sort is a divide-and-conquer sorting algorithm that divides the input array into two halves, recursively sorts them, and then merges the sorted halves to produce a final sorted array. For example, sorting `[3, 1, 4, 2]` involves dividing it into smaller lists and merging them in order."
    },
    {
        "title": "What is Binary Search?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain the Binary Search algorithm.",
        "tags": "binary search,algorithms,searching,programming",
        "paid": "Yes",
        "answer": "Binary Search is an efficient algorithm for finding an item in a sorted list by repeatedly dividing the search interval in half. It compares the target value to the middle element of the array and eliminates half the search space. For example, searching for `5` in `[1, 3, 5, 7]` involves comparing to `5` directly."
    },
    {
        "title": "What is a Greedy Algorithm?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define the concept of a greedy algorithm.",
        "tags": "greedy algorithm,algorithms,programming",
        "paid": "Yes",
        "answer": "A greedy algorithm makes the locally optimal choice at each step with the hope of finding a global optimum. It is used in optimization problems like the fractional knapsack problem, where items are selected based on the highest value-to-weight ratio to maximize profit within a given weight limit."
    },
    {
        "title": "What is Dynamic Programming?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain the concept of dynamic programming.",
        "tags": "dynamic programming,algorithms,optimization",
        "paid": "Yes",
        "answer": "Dynamic programming is a method for solving problems by breaking them down into smaller overlapping subproblems and storing their solutions to avoid redundant computations. For example, in the Fibonacci sequence, dynamic programming can store previously computed values to speed up calculations."
    },
    {
        "title": "What is the Divide and Conquer Algorithm?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain the divide and conquer strategy in algorithms.",
        "tags": "divide and conquer,algorithms,programming",
        "paid": "Yes",
        "answer": "Divide and conquer is an algorithmic strategy that divides a problem into smaller subproblems, solves them independently, and combines their solutions to solve the original problem. For example, Merge Sort uses divide and conquer by dividing an array into halves, recursively sorting them, and merging the results."
    },
    {
        "title": "What is a Graph in Computer Science?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define a graph and its use in computer science.",
        "tags": "graph,computer science,data structure",
        "paid": "Yes",
        "answer": "A graph is a collection of nodes (vertices) and edges that connect pairs of nodes. It is used to model relationships between objects. For example, in social networks, users are represented as nodes, and their friendships are edges connecting the nodes."
    },
    {
        "title": "What is Dijkstra's Algorithm?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Explain Dijkstra's algorithm for finding the shortest path.",
        "tags": "Dijkstra's algorithm,graph algorithms,programming",
        "paid": "Yes",
        "answer": "Dijkstra's algorithm is a graph traversal algorithm used to find the shortest path between two nodes in a weighted graph. It starts from a source node, explores its neighbors, and selects the path with the smallest cumulative weight. For example, it is used in GPS systems to find the shortest route between locations."
    },
    {
        "title": "What is the Difference Between Depth-First Search (DFS) and Breadth-First Search (BFS)?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Differentiate between DFS and BFS in graph traversal.",
        "tags": "DFS,BFS,graph traversal,algorithms",
        "paid": "Yes",
        "answer": "DFS explores a graph by going as deep as possible along each branch before backtracking, while BFS explores all neighbors of a node before moving to the next level of neighbors. For example, DFS is used in maze-solving, while BFS is used in finding the shortest path in unweighted graphs."
    },
    {
        "title": "What is a Spanning Tree?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define a spanning tree in a graph.",
        "tags": "spanning tree,graph,algorithms",
        "paid": "Yes",
        "answer": "A spanning tree of a graph is a subgraph that includes all the vertices of the original graph and is a tree (has no cycles). It connects all the vertices with the minimum possible number of edges. For example, the minimum spanning tree is used in network design to connect points with minimal cost."
    },
    {
        "title": "What is the Time Complexity of an Algorithm?",
        "category": "Basic Computer",
        "sub_category": "Theory Round",
        "description": "Define time complexity and its significance.",
        "tags": "time complexity,algorithms,performance",
        "paid": "Yes",
        "answer": "Time complexity describes how the running time of an algorithm grows as the input size increases. It helps evaluate the efficiency of an algorithm. For example, linear search has a time complexity of O(n), meaning the time required grows linearly with the number of elements."
    },
    {
        "title": "Reverse a Linked List",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Reverse a singly linked list in place.",
        "tags": "Linked List, Reversal, Algorithm",
        "paid": "Yes",
        "answer": "To reverse a singly linked list, iterate through the list, and for each node, adjust its next pointer to the previous node. Keep track of the previous node as you traverse. For example, if the list is 1 -> 2 -> 3, reversing it will result in 3 -> 2 -> 1."
    },
    {
        "title": "Find the Middle Element of a Linked List",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the middle element of a singly linked list.",
        "tags": "Linked List, Middle Element, Algorithm",
        "paid": "Yes",
        "answer": "To find the middle element of a linked list, use two pointers: slow and fast. Move slow by one step and fast by two steps. When fast reaches the end, slow will be at the middle. For example, in the list 1 -> 2 -> 3 -> 4 -> 5, the middle is 3."
    },
    {
        "title": "Detect a Cycle in a Linked List",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine if a linked list contains a cycle.",
        "tags": "Linked List, Cycle Detection, Algorithm",
        "paid": "Yes",
        "answer": "To detect a cycle, use Floyd's Cycle-Finding Algorithm (Tortoise and Hare). Use two pointers: slow and fast. Move slow by one step and fast by two steps. If they meet, there is a cycle. Otherwise, if fast reaches the end, there is no cycle. Example: 1 -> 2 -> 3 -> 2 (cycle)."
    },
    {
        "title": "Implement a Stack Using Arrays",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a stack data structure using an array.",
        "tags": "Stack, Array, Data Structure",
        "paid": "Yes",
        "answer": "A stack can be implemented using an array with two primary operations: push (to add an element) and pop (to remove an element). Use an index to keep track of the top of the stack. For example, push 10 and 20 to an empty stack results in [10, 20] with 20 as the top."
    },
    {
        "title": "Implement a Queue Using Arrays",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a queue data structure using an array.",
        "tags": "Queue, Array, Data Structure",
        "paid": "Yes",
        "answer": "Implement a queue using an array with enqueue (to add an element) and dequeue (to remove an element) operations. Use two indices: front and rear. For example, enqueue 1, 2, 3 results in [1, 2, 3] with 1 at the front and 3 at the rear."
    },
    {
        "title": "Check for Balanced Parentheses",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine if parentheses in a string are balanced.",
        "tags": "Stack, Parentheses, Algorithm",
        "paid": "Yes",
        "answer": "Use a stack to check if parentheses are balanced. Push each opening parenthesis onto the stack and pop for each closing parenthesis. If the stack is empty at the end, parentheses are balanced. For example, '(a + b) * (c / d)' is balanced, but '((a + b) * c' is not."
    },
    {
        "title": "Find the Lowest Common Ancestor in a Binary Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the lowest common ancestor (LCA) of two nodes in a binary tree.",
        "tags": "Binary Tree, LCA, Algorithm",
        "paid": "Yes",
        "answer": "To find the LCA, recursively traverse the tree. If the current node is one of the nodes, return it. If both nodes are found in left and right subtrees, the current node is the LCA. For example, in a tree with root 3, left 5, right 1, and nodes 5 and 1, LCA is 3."
    },
    {
        "title": "Implement a Binary Search Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a binary search tree (BST) with insertion and search operations.",
        "tags": "Binary Search Tree, BST, Data Structure",
        "paid": "Yes",
        "answer": "A BST is a tree where left children are less than the parent and right children are greater. Implement insert and search functions to maintain and query the tree. For example, inserting 10 into an empty BST results in a tree with 10 as the root."
    },
    {
        "title": "Find the Height of a Binary Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Calculate the height of a binary tree.",
        "tags": "Binary Tree, Height, Algorithm",
        "paid": "Yes",
        "answer": "To find the height of a binary tree, recursively compute the height of left and right subtrees and take the maximum of the two, adding one for the current node. For example, in a tree with height 2 and node counts [1, 2, 3, 4], the height is 3."
    },
    {
        "title": "Check if a Binary Tree is Balanced",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine if a binary tree is balanced.",
        "tags": "Binary Tree, Balanced Tree, Algorithm",
        "paid": "Yes",
        "answer": "A binary tree is balanced if the height difference between left and right subtrees is no more than 1 for every node. Recursively check each node's subtrees' heights and verify the balance condition. For example, a tree with root 1, left [2], right [3] is balanced."
    },
    {
        "title": "Find the Kth Smallest Element in a BST",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the Kth smallest element in a binary search tree.",
        "tags": "Binary Search Tree, Kth Smallest, Algorithm",
        "paid": "Yes",
        "answer": "Perform an in-order traversal of the BST to retrieve elements in sorted order. The Kth element in this list is the Kth smallest. For example, in a BST with elements [1, 2, 3, 4, 5], the 3rd smallest element is 3."
    },
    {
        "title": "Level Order Traversal of a Binary Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Perform a level order traversal of a binary tree.",
        "tags": "Binary Tree, Level Order, Traversal",
        "paid": "Yes",
        "answer": "Use a queue to perform level order traversal. Enqueue the root, then repeatedly dequeue a node, visit it, and enqueue its children. For example, in a tree with root 1, left 2, and right 3, the level order traversal is [1, 2, 3]."
    },
    {
        "title": "Find the Diameter of a Binary Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Calculate the diameter of a binary tree.",
        "tags": "Binary Tree, Diameter, Algorithm",
        "paid": "Yes",
        "answer": "The diameter of a binary tree is the longest path between any two nodes. Compute it by finding the maximum of the diameter at left and right subtrees plus 1 for the current node. For example, a tree with nodes 1 -> 2 -> 3 has a diameter of 3."
    },
    {
        "title": "Convert a Binary Search Tree to a Doubly Linked List",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Convert a BST to a doubly linked list in-place.",
        "tags": "Binary Search Tree, Doubly Linked List, Conversion",
        "paid": "Yes",
        "answer": "Use an in-order traversal to create the doubly linked list. Link nodes such that each node's right pointer points to the next node in the list and left pointer to the previous one. For example, BST with nodes 1, 2, 3 becomes a list 1 <-> 2 <-> 3."
    },
    {
        "title": "Find the Union of Two Sorted Arrays",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the union of two sorted arrays.",
        "tags": "Array, Union, Sorted Arrays",
        "paid": "Yes",
        "answer": "To find the union, use two pointers to traverse both arrays. Add elements to the result if they are not duplicates. For example, the union of [1, 2, 4] and [2, 3, 5] is [1, 2, 3, 4, 5]."
    },
    {
        "title": "Find the Intersection of Two Sorted Arrays",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the intersection of two sorted arrays.",
        "tags": "Array, Intersection, Sorted Arrays",
        "paid": "Yes",
        "answer": "To find the intersection, use two pointers to traverse both arrays. Add elements to the result if they match. For example, the intersection of [1, 2, 4] and [2, 3, 4] is [2, 4]."
    },
    {
        "title": "Find the Majority Element",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the majority element in an array (element appearing more than n/2 times).",
        "tags": "Array, Majority Element, Algorithm",
        "paid": "Yes",
        "answer": "Use the Boyer-Moore Voting Algorithm. Iterate through the array maintaining a candidate and count. Update the candidate when the count is zero. For example, in [3, 3, 4, 2, 4, 4, 2, 4, 4], the majority element is 4."
    },
    {
        "title": "Find the Longest Common Prefix",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the longest common prefix string amongst an array of strings.",
        "tags": "String, Prefix, Algorithm",
        "paid": "Yes",
        "answer": "Sort the array and compare the first and last strings to find the common prefix. For example, for ['flower', 'flow', 'flight'], the longest common prefix is 'fl'."
    },
    {
        "title": "Check if a String is a Palindrome",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine if a given string is a palindrome.",
        "tags": "String, Palindrome, Algorithm",
        "paid": "Yes",
        "answer": "Check if the string reads the same backward as forward by comparing characters from the start and end moving towards the center. For example, 'racecar' is a palindrome while 'hello' is not."
    },
    {
        "title": "Implement Merge Sort",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Implement the merge sort algorithm for sorting an array.",
        "tags": "Sorting, Merge Sort, Algorithm",
        "paid": "Yes",
        "answer": "Merge sort is a divide-and-conquer algorithm. Divide the array into halves, sort each half, and merge them. For example, sorting [3, 1, 4, 1, 5] results in [1, 1, 3, 4, 5]."
    },
    {
        "title": "Find the Longest Substring Without Repeating Characters",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the length of the longest substring without repeating characters.",
        "tags": "String, Substring, Algorithm",
        "paid": "Yes",
        "answer": "Use a sliding window approach with two pointers to keep track of the current substring. Update the window size when duplicates are found. For example, in 'abcabcbb', the longest substring without repeating is 'abc' with length 3."
    },
    {
        "title": "Find All Permutations of a String",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Generate all permutations of a string.",
        "tags": "String, Permutations, Algorithm",
        "paid": "Yes",
        "answer": "Use recursion to generate permutations by swapping each character and recursively permuting the remaining string. For example, permutations of 'abc' include 'abc', 'acb', 'bac', 'bca', 'cab', 'cba'."
    },
    {
        "title": "Find the Longest Increasing Subsequence",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the length of the longest increasing subsequence in an array.",
        "tags": "Array, Subsequence, Algorithm",
        "paid": "Yes",
        "answer": "Use dynamic programming to build a table where each entry represents the length of the longest increasing subsequence ending at that index. For example, in [10, 9, 2, 5, 3, 7, 101], the longest increasing subsequence is [2, 3, 7, 101] with length 4."
    },
    {
        "title": "Find the Median of Two Sorted Arrays",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the median of two sorted arrays.",
        "tags": "Array, Median, Algorithm",
        "paid": "Yes",
        "answer": "Use a binary search approach to find the median efficiently. Merge the arrays conceptually and find the middle element(s). For example, the median of [1, 3] and [2] is 2.0."
    },
    {
        "title": "Rotate an Array",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Rotate an array to the right by a given number of steps.",
        "tags": "Array, Rotation, Algorithm",
        "paid": "Yes",
        "answer": "To rotate an array, reverse the entire array, then reverse the first k elements and the remaining elements. For example, rotating [1, 2, 3, 4, 5, 6, 7] by 3 steps results in [5, 6, 7, 1, 2, 3, 4]."
    },
    {
        "title": "Find the Missing Number in an Array",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the missing number in a given array containing numbers from 1 to n.",
        "tags": "Array, Missing Number, Algorithm",
        "paid": "Yes",
        "answer": "Calculate the expected sum of numbers from 1 to n using the formula n(n + 1) / 2 and subtract the actual sum of the array elements. The difference is the missing number. For example, in [1, 2, 4, 5, 6], the missing number is 3."
    },
    {
        "title": "Find the First Non-Repeating Character in a String",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Identify the first character in a string that does not repeat.",
        "tags": "String, Non-Repeating Character, Algorithm",
        "paid": "No",
        "answer": "Use a hash map to count the frequency of each character, then iterate through the string to find the first character with a count of 1. For example, in 'swiss', the first non-repeating character is 'w'."
    },
    {
        "title": "Find the Longest Palindromic Substring",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the longest palindromic substring in a given string.",
        "tags": "String, Palindrome, Algorithm",
        "paid": "No",
        "answer": "Use a dynamic programming approach to build a table that tracks palindromic substrings. For example, in 'babad', the longest palindromic substring is 'bab' or 'aba'."
    },
    {
        "title": "Implement Binary Search",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Perform a binary search on a sorted array.",
        "tags": "Array, Binary Search, Algorithm",
        "paid": "No",
        "answer": "Binary search divides the search interval in half. Start with the middle element; if it matches the target, return it. Otherwise, adjust the search range to either the left or right half based on comparison. For example, searching for 4 in [1, 2, 3, 4, 5] returns index 3."
    },
    {
        "title": "Implement Depth-First Search",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Implement depth-first search (DFS) for a graph.",
        "tags": "Graph, DFS, Algorithm",
        "paid": "No",
        "answer": "DFS explores as far as possible along each branch before backtracking. Use a stack or recursion to keep track of nodes. For example, in a graph with nodes 1 -> 2 -> 3, DFS from 1 explores 1, 2, and then 3."
    },
    {
        "title": "Implement Breadth-First Search",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Implement breadth-first search (BFS) for a graph.",
        "tags": "Graph, BFS, Algorithm",
        "paid": "No",
        "answer": "BFS explores all neighbors of a node before moving to the next level. Use a queue to keep track of nodes. For example, in a graph with nodes 1 -> 2 -> 3, BFS from 1 explores 1, then 2 and 3."
    },
    {
        "title": "Detect a Cycle in a Directed Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine if a directed graph contains a cycle.",
        "tags": "Graph, Cycle Detection, Algorithm",
        "paid": "No",
        "answer": "Use Depth-First Search with a tracking mechanism for visited nodes. If a node is revisited during the same DFS traversal, a cycle exists. For example, in a graph with edges 1 -> 2 -> 3 -> 1, a cycle is detected."
    },
    {
        "title": "Implement a Priority Queue",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a priority queue using a heap.",
        "tags": "Heap, Priority Queue, Data Structure",
        "paid": "No",
        "answer": "A priority queue can be implemented using a heap where the highest (or lowest) priority element is always at the top. Operations include insert and extract-max (or extract-min). For example, in a max-heap, inserting 5 and 10 results in [10, 5]."
    },
    {
        "title": "Find the Longest Common Subsequence",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the longest common subsequence between two strings.",
        "tags": "String, Subsequence, Algorithm",
        "paid": "No",
        "answer": "Use dynamic programming to build a table where each cell represents the length of the longest common subsequence up to those indices. For example, for 'abcde' and 'aceb', the longest common subsequence is 'ace' with length 3."
    },
    {
        "title": "Find the Maximum Subarray Sum",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the maximum sum of a contiguous subarray.",
        "tags": "Array, Subarray, Algorithm",
        "paid": "No",
        "answer": "Use Kadane's Algorithm to find the maximum sum. Initialize the maximum sum and current sum as the first element, then iterate through the array updating these values. For example, for [1, -2, 3, 4, -1], the maximum subarray sum is 7."
    },
    {
        "title": "Find the Kth Largest Element in an Array",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the Kth largest element in an unsorted array.",
        "tags": "Array, Kth Largest, Algorithm",
        "paid": "No",
        "answer": "Use a min-heap of size K to keep track of the K largest elements. For each element, if it is larger than the smallest element in the heap, replace the smallest. For example, in [3, 2, 1, 5, 6, 4], the 2nd largest element is 5."
    },
    {
        "title": "Find the Intersection of Two Linked Lists",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the node where two linked lists intersect.",
        "tags": "Linked List, Intersection, Algorithm",
        "paid": "No",
        "answer": "Use two pointers to traverse the linked lists. When one pointer reaches the end, move it to the start of the other list. Continue until both pointers meet. For example, if lists intersect at node with value 8, both pointers will eventually reach this node."
    },
    {
        "title": "Find the Longest Path in a Directed Acyclic Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the longest path in a directed acyclic graph (DAG).",
        "tags": "Graph, DAG, Longest Path",
        "paid": "No",
        "answer": "Use topological sorting to order nodes and then apply dynamic programming to find the longest path. For example, in a DAG with edges 1 -> 2, 1 -> 3, 2 -> 4, 3 -> 4, the longest path is 1 -> 2 -> 4 or 1 -> 3 -> 4."
    },
    {
        "title": "Find All Anagrams in a String",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find all start indices of anagrams of a pattern in a string.",
        "tags": "String, Anagrams, Algorithm",
        "paid": "No",
        "answer": "Use a sliding window and hash maps to compare character counts. Slide the window across the string and check if the counts match. For example, in 'cbaebabacd' with pattern 'abc', the start indices of anagrams are 0 and 6."
    },
    {
        "title": "Find the Shortest Path in an Unweighted Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the shortest path in an unweighted graph using BFS.",
        "tags": "Graph, Shortest Path, BFS",
        "paid": "No",
        "answer": "Use BFS to explore the shortest path in an unweighted graph. Enqueue the starting node, then visit each neighbor while updating distances. For example, in a graph with edges (1 -> 2), (2 -> 3), (1 -> 3), the shortest path from 1 to 3 is 1 -> 3."
    },
    {
        "title": "Determine if a Binary Tree is a Subtree of Another Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Check if one binary tree is a subtree of another binary tree.",
        "tags": "Binary Tree, Subtree, Algorithm",
        "paid": "Yes",
        "answer": "Perform a tree traversal on the larger tree to find a matching root for the smaller tree. Verify subtree equality by comparing nodes recursively. For example, if tree A has a subtree that matches tree B, B is a subtree of A."
    },
    {
        "title": "Find the Largest Rectangle in a Histogram",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the largest rectangle area in a histogram.",
        "tags": "Histogram, Largest Rectangle, Algorithm",
        "paid": "Yes",
        "answer": "Use a stack to keep track of histogram bars. Compute the area by maintaining the height of the bars and their indices. For example, for histogram [2, 1, 5, 6, 2, 3], the largest rectangle area is 10."
    },
    {
        "title": "Find All Unique Subsets of a Set",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Generate all unique subsets of a set.",
        "tags": "Subset, Algorithm, Combination",
        "paid": "Yes",
        "answer": "Use a recursive approach or backtracking to generate subsets. Ensure each subset is unique by avoiding duplicates. For example, for set [1, 2], the unique subsets are [], [1], [2], and [1, 2]."
    },
    {
        "title": "Find the Shortest Path in a Weighted Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the shortest path in a weighted graph using Dijkstra's algorithm.",
        "tags": "Graph, Dijkstra, Shortest Path",
        "paid": "Yes",
        "answer": "Use Dijkstra's algorithm with a priority queue to find the shortest path from a source node. Update the shortest distance to each neighboring node and repeat until all nodes are processed. For example, in a graph with weights, Dijkstra finds the shortest path to each node."
    },
    {
        "title": "Find the Longest Prefix Suffix (LPS) Array",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the LPS array for the KMP pattern matching algorithm.",
        "tags": "String, KMP Algorithm, LPS Array",
        "paid": "Yes",
        "answer": "The LPS array is used in the KMP algorithm to skip unnecessary comparisons. Compute it by iterating through the pattern and keeping track of the longest prefix which is also a suffix. For example, the LPS array for 'ababcab' is [0, 0, 1, 2, 3, 4, 5]."
    },
    {
        "title": "Find the Missing Number in an Array of 1 to n+1",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the missing number in an array containing numbers from 1 to n+1.",
        "tags": "Array, Missing Number, Algorithm",
        "paid": "Yes",
        "answer": "Calculate the expected sum of numbers from 1 to n+1 using the formula (n+1)*(n+2)/2 and subtract the actual sum of array elements. The difference is the missing number. For example, in [1, 2, 4, 5], the missing number is 3."
    },
    {
        "title": "Find the Next Greater Element",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the next greater element for each element in an array.",
        "tags": "Array, Next Greater Element, Algorithm",
        "paid": "Yes",
        "answer": "Use a stack to keep track of elements. Traverse the array from right to left and use the stack to find the next greater element. For example, for [4, 3, 2, 5], the next greater elements are [5, 5, 5, -1]."
    },
    {
        "title": "Implement a Trie",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a Trie data structure for efficient prefix matching.",
        "tags": "Trie, Data Structure, Prefix Matching",
        "paid": "Yes",
        "answer": "A Trie is a tree-like data structure used to store strings. Each node represents a character. Insert words by adding nodes and link characters. For example, inserting 'cat' and 'car' results in a Trie where 'c' leads to 'a', and 'a' leads to 't' or 'r'."
    },
    {
        "title": "Find the Maximum Product Subarray",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the maximum product of a contiguous subarray.",
        "tags": "Array, Subarray, Product",
        "paid": "Yes",
        "answer": "Use a dynamic approach to keep track of maximum and minimum product ending at each index, as negative numbers can change the sign. For example, for [2, 3, -2, 4], the maximum product subarray is [2, 3] with product 6."
    },
    {
        "title": "Reverse a Linked List",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Reverse a singly linked list.",
        "tags": "Linked List, Reversal, Algorithm",
        "paid": "Yes",
        "answer": "Iterate through the linked list while reversing the direction of pointers. Maintain a previous node, a current node, and a next node. For example, reversing a list 1 -> 2 -> 3 results in 3 -> 2 -> 1."
    },
    {
        "title": "Find the Peak Element",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find a peak element in an array where an element is greater than its neighbors.",
        "tags": "Array, Peak Element, Algorithm",
        "paid": "Yes",
        "answer": "Use a binary search approach. Compare the middle element with its neighbors; if itâ€™s greater than both, itâ€™s a peak. Otherwise, move towards the side where neighbors are greater. For example, in [1, 3, 20, 4, 1], 20 is a peak."
    },
    {
        "title": "Find the Minimum Depth of a Binary Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Calculate the minimum depth of a binary tree.",
        "tags": "Binary Tree, Depth, Algorithm",
        "paid": "Yes",
        "answer": "Use BFS to find the shortest path from the root to the nearest leaf node. For example, in a tree where leaf nodes are at different depths, BFS will find the minimum depth to the closest leaf."
    },
    {
        "title": "Find the Maximum Depth of a Binary Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Calculate the maximum depth of a binary tree.",
        "tags": "Binary Tree, Depth, Algorithm",
        "paid": "Yes",
        "answer": "Use DFS to explore each path from the root to the leaf nodes, tracking the depth. The maximum depth is the length of the longest path. For example, in a tree with a height of 3, the maximum depth is 3."
    },
    {
        "title": "Implement an LRU Cache",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a Least Recently Used (LRU) cache using a combination of hash map and doubly linked list.",
        "tags": "Cache, LRU, Data Structure",
        "paid": "Yes",
        "answer": "Use a hash map for fast access and a doubly linked list to maintain the order of use. The most recently used item is moved to the head of the list, and the least recently used is removed when the cache exceeds its capacity."
    },
    {
        "title": "Merge Two Sorted Lists",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Merge two sorted linked lists into one sorted linked list.",
        "tags": "Linked List, Merge, Algorithm",
        "paid": "Yes",
        "answer": "Use a dummy node and a pointer to build the merged list by comparing nodes from both lists. For example, merging 1 -> 2 -> 4 and 1 -> 3 -> 4 results in 1 -> 1 -> 2 -> 3 -> 4 -> 4."
    },
    {
        "title": "Find the Maximum Area of Island",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the maximum area of an island in a 2D grid.",
        "tags": "Grid, Island, Algorithm",
        "paid": "Yes",
        "answer": "Use DFS or BFS to explore the area of each island. Track the maximum area encountered. For example, in a grid with several islands, the largest area might be from a 3x3 island, having area 9."
    },
    {
        "title": "Find the Closest Pair of Points",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the closest pair of points in a 2D plane.",
        "tags": "Geometry, Closest Pair, Algorithm",
        "paid": "Yes",
        "answer": "Use the divide-and-conquer approach to find the closest pair efficiently. Sort points, recursively divide, and then check cross-boundary points. For example, for points (1, 1) and (2, 2), the closest pair distance is approximately 1.41."
    },
    {
        "title": "Determine if a Graph is Bipartite",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Check if a graph can be colored using two colors without adjacent nodes having the same color.",
        "tags": "Graph, Bipartite, Algorithm",
        "paid": "Yes",
        "answer": "Use BFS or DFS to color nodes and check if adjacent nodes have different colors. For example, a graph with edges (1, 2), (2, 3), and (1, 3) is not bipartite, as nodes 1 and 3 are connected."
    },
    {
        "title": "Find the Longest Consecutive Sequence",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the length of the longest consecutive elements sequence.",
        "tags": "Array, Consecutive Sequence, Algorithm",
        "paid": "Yes",
        "answer": "Use a set to store elements and check each number for the start of a sequence. Track the length of each sequence. For example, in [100, 4, 200, 1, 3, 2], the longest consecutive sequence is 4."
    },
    {
        "title": "Find the Kth Smallest Element in a BST",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the Kth smallest element in a binary search tree (BST).",
        "tags": "Binary Search Tree, Kth Smallest, Algorithm",
        "paid": "Yes",
        "answer": "Use an in-order traversal to retrieve elements in sorted order and find the Kth element. For example, in a BST with elements [3, 1, 4, 2], the 2nd smallest element is 2."
    },
    {
        "title": "Find the Number of Islands",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Count the number of islands in a 2D grid.",
        "tags": "Grid, Islands, Algorithm",
        "paid": "Yes",
        "answer": "Use DFS or BFS to explore each island in the grid. Mark visited cells to avoid recounting. For example, in a grid with several islands, if there are 3 distinct island groups, the count is 3."
    },
    {
        "title": "Determine if Two Strings Are Anagrams",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Check if two strings are anagrams of each other.",
        "tags": "String, Anagrams, Algorithm",
        "paid": "Yes",
        "answer": "Sort both strings and compare them or use a frequency counter to check if both strings have the same character counts. For example, 'listen' and 'silent' are anagrams."
    },
    {
        "title": "Implement an AVL Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Implement an AVL tree with rotations to maintain balance.",
        "tags": "AVL Tree, Balanced Tree, Data Structure",
        "paid": "Yes",
        "answer": "An AVL tree is a self-balancing binary search tree. Implement rotations (left, right, left-right, right-left) to maintain balance after insertions and deletions. For example, after inserting nodes, perform rotations to keep tree height balanced."
    },
    {
        "title": "Implement Depth-First Search for a Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Perform depth-first search (DFS) on a graph represented by adjacency lists.",
        "tags": "Graph, DFS, Algorithm",
        "paid": "Yes",
        "answer": "DFS explores nodes by visiting one node's neighbors before moving to the next. Use a stack or recursion. For example, starting from node A in a graph with edges A -> B, B -> C, DFS might visit A, B, then C."
    },
    {
        "title": "Implement a Red-Black Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Implement a Red-Black Tree with balancing operations.",
        "tags": "Red-Black Tree, Balanced Tree, Data Structure",
        "paid": "Yes",
        "answer": "A Red-Black Tree is a self-balancing binary search tree with specific properties for node color and balancing. Implement rotations and color changes to maintain balance. For example, after insertion, perform rotations and color flips to preserve tree properties."
    },
    {
        "title": "Find the Median of a Stream of Integers",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Design a data structure to find the median from a stream of integers.",
        "tags": "Data Structure, Median, Stream",
        "paid": "Yes",
        "answer": "Use two heaps: a max-heap for the lower half and a min-heap for the upper half. Balance the heaps and retrieve the median. For example, inserting values 1, 5, 2, 4, 3, the median is 2.5."
    },
    {
        "title": "Implement an LRU Cache with O(1) Operations",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Design an LRU Cache that supports O(1) time complexity for get and put operations.",
        "tags": "Cache, LRU, Data Structure",
        "paid": "Yes",
        "answer": "Use a hash map for fast access and a doubly linked list to track usage order. This setup allows O(1) operations for get and put. For example, adding and accessing elements while maintaining the least recently used order."
    },
    {
        "title": "Determine the Strongly Connected Components (SCCs) in a Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find all strongly connected components in a directed graph.",
        "tags": "Graph, SCC, Algorithm",
        "paid": "Yes",
        "answer": "Use Kosarajuâ€™s or Tarjanâ€™s algorithm to find SCCs. Kosarajuâ€™s algorithm involves two passes of DFS and a reversal of edges. For example, in a graph with multiple SCCs, these algorithms identify all such components."
    },
    {
        "title": "Solve the N-Queens Problem",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find all solutions to place N queens on an N x N chessboard so that no two queens attack each other.",
        "tags": "Backtracking, N-Queens, Algorithm",
        "paid": "Yes",
        "answer": "Use backtracking to place queens one by one in columns and check for conflicts. For example, for N=4, solutions include placements like (0,1), (1,3), (2,0), (3,2)."
    },
    {
        "title": "Determine the Minimum Cost to Connect All Points in a Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the minimum cost to connect all points in a graph using Primâ€™s or Kruskalâ€™s algorithm.",
        "tags": "Graph, Minimum Spanning Tree, Algorithm",
        "paid": "Yes",
        "answer": "Use Primâ€™s or Kruskalâ€™s algorithm to construct the minimum spanning tree. Primâ€™s algorithm uses a priority queue, while Kruskalâ€™s uses a union-find structure. For example, find the minimum cost to connect points with given edge weights."
    },
    {
        "title": "Find the Longest Path in a Weighted DAG",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the longest path in a weighted Directed Acyclic Graph (DAG).",
        "tags": "Graph, DAG, Longest Path",
        "paid": "Yes",
        "answer": "Use topological sorting followed by relaxation of edges. Process nodes in topological order to find the longest path. For example, in a DAG with weights, the longest path might be from node A to C with intermediate nodes."
    },
    {
        "title": "Implement a Suffix Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Build and use a suffix tree for string searching and manipulation.",
        "tags": "Suffix Tree, String, Data Structure",
        "paid": "Yes",
        "answer": "Construct a suffix tree by inserting all suffixes of a string. The tree helps in efficient substring search and manipulation. For example, for string 'banana', the suffix tree stores all suffixes and their starting positions."
    },
    {
        "title": "Find the Shortest Path with Negative Weights",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the shortest path in a graph with possible negative edge weights using the Bellman-Ford algorithm.",
        "tags": "Graph, Bellman-Ford, Shortest Path",
        "paid": "Yes",
        "answer": "Use the Bellman-Ford algorithm to detect negative cycles and compute shortest paths. Relax edges up to (V-1) times. For example, in a graph with negative weights, Bellman-Ford identifies shortest paths and negative cycles."
    },
    {
        "title": "Solve the Knapsack Problem with Fractional Weights",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Solve the fractional knapsack problem using a greedy approach.",
        "tags": "Knapsack, Greedy, Algorithm",
        "paid": "Yes",
        "answer": "Use a greedy approach to maximize value per weight. Sort items by value/weight ratio and add fractions of items to the knapsack. For example, with weights [1, 2, 3] and values [60, 100, 120], take fractions to maximize value."
    },
    {
        "title": "Find the Maximum Flow in a Flow Network",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum flow in a flow network using the Ford-Fulkerson method.",
        "tags": "Flow Network, Ford-Fulkerson, Algorithm",
        "paid": "Yes",
        "answer": "Use the Ford-Fulkerson algorithm to find the maximum flow from a source to a sink. Augment flow along paths found by BFS or DFS. For example, in a network with capacities, Ford-Fulkerson calculates the maximum flow value."
    },
    {
        "title": "Implement a Suffix Array",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Build a suffix array for efficient string processing and searching.",
        "tags": "Suffix Array, String, Algorithm",
        "paid": "Yes",
        "answer": "Construct a suffix array by sorting suffixes of a string and storing their starting indices. This array helps in substring search and pattern matching. For example, the suffix array of 'banana' is [5, 3, 1, 0, 4, 2]."
    },
    {
        "title": "Find the Largest Rectangle in a Binary Matrix",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the largest rectangle containing only 1s in a binary matrix.",
        "tags": "Binary Matrix, Largest Rectangle, Algorithm",
        "paid": "Yes",
        "answer": "Use dynamic programming to compute the height of histograms for each row and then apply the largest rectangle algorithm on these histograms. For example, in a matrix with several 1s, the largest rectangle might span multiple rows."
    },
    {
        "title": "Determine the Number of Ways to Parenthesize an Expression",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Count the number of ways to parenthesize an expression to evaluate to a specific result.",
        "tags": "Dynamic Programming, Parenthesization, Algorithm",
        "paid": "Yes",
        "answer": "Use dynamic programming to count ways to parenthesize the expression. Build tables for different ranges of subexpressions. For example, for expression 'a+b*c', compute the number of valid parenthesizations."
    },
    {
        "title": "Find the Longest Common Substring with K Distinct Characters",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the longest substring containing at most K distinct characters.",
        "tags": "String, Substring, Algorithm",
        "paid": "Yes",
        "answer": "Use a sliding window technique to keep track of the distinct characters and their counts. Expand and shrink the window as necessary. For example, in 'abcabcbb' with K=2, the longest substring is 'bcb'."
    },
    {
        "title": "Find the Longest Increasing Path in a Matrix",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the longest increasing path in a 2D matrix.",
        "tags": "Matrix, Pathfinding, Algorithm",
        "paid": "Yes",
        "answer": "Use DFS with memoization to explore paths from each cell, tracking the longest increasing path. For example, in a matrix with increasing values, find the longest path following ascending values."
    },
    {
        "title": "Solve the Traveling Salesman Problem (TSP)",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the shortest possible route that visits each city exactly once and returns to the origin.",
        "tags": "Traveling Salesman Problem, Algorithm, Optimization",
        "paid": "Yes",
        "answer": "Use dynamic programming or approximation algorithms to solve TSP. Exact solutions involve exponential time, while heuristics like nearest neighbor offer approximate solutions. For example, find the shortest route covering all cities in a graph."
    },
    {
        "title": "Find the Minimum Number of Platforms Required for a Train Station",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum number of platforms required to accommodate all trains at a station given their arrival and departure times.",
        "tags": "Greedy, Interval Scheduling, Algorithm",
        "paid": "Yes",
        "answer": "Sort the arrival and departure times. Use a two-pointer technique to find the maximum number of trains present at the same time. For example, with arrival [10:00, 10:15] and departure [10:30, 10:45], calculate platform requirements."
    },
    {
        "title": "Determine the Minimum Window Substring",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the smallest window in a string containing all characters of a given pattern.",
        "tags": "String, Sliding Window, Algorithm",
        "paid": "Yes",
        "answer": "Use a sliding window approach with two pointers and a frequency counter to track characters. For example, for string 'ADOBECODEBANC' and pattern 'ABC', the minimum window substring is 'BANC'."
    },
    {
        "title": "Find the Longest Palindromic Substring",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Identify the longest palindromic substring in a given string.",
        "tags": "String, Palindromic Substring, Algorithm",
        "paid": "Yes",
        "answer": "Use dynamic programming or expand around center technique to find the longest palindrome. For example, in 'babad', 'bab' or 'aba' are valid longest palindromic substrings."
    },
    {
        "title": "Find the Maximum Rectangle in a Binary Matrix",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the largest rectangle containing only 1s in a binary matrix.",
        "tags": "Binary Matrix, Maximum Rectangle, Algorithm",
        "paid": "Yes",
        "answer": "Use histogram-based dynamic programming approach to find the largest rectangle. Compute height arrays for each row and apply the largest rectangle algorithm. For example, in a matrix with 1s, find the rectangle with maximum area."
    },
    {
        "title": "Determine if a Binary Tree is a Binary Search Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Check if a given binary tree satisfies the properties of a binary search tree.",
        "tags": "Binary Tree, Binary Search Tree, Algorithm",
        "paid": "Yes",
        "answer": "Perform an in-order traversal and ensure the nodes are in ascending order. For example, if traversal results in sorted values, the tree is a BST."
    },
    {
        "title": "Find the Minimum Cost to Reach the End of a Grid",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum cost to travel from the top-left to the bottom-right of a grid with given costs.",
        "tags": "Grid, Pathfinding, Algorithm",
        "paid": "Yes",
        "answer": "Use dynamic programming to compute the minimum cost for each cell by considering moves from the top and left. For example, in a grid with varying costs, calculate the minimum cost path to the destination."
    },
    {
        "title": "Find the Largest Sum Rectangle in a 2D Matrix",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Identify the rectangle with the maximum sum of elements in a 2D matrix.",
        "tags": "Matrix, Maximum Sum, Algorithm",
        "paid": "Yes",
        "answer": "Use Kadane's algorithm on each row and column to find the maximum sum rectangle. For example, in a matrix, find the submatrix with the highest sum of elements."
    },
    {
        "title": "Find the Most Frequent Substring of Length K",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the most frequent substring of a given length K in a string.",
        "tags": "String, Substring, Frequency",
        "paid": "Yes",
        "answer": "Use a sliding window and hash map to count substring frequencies. For example, in 'AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT' with K=10, the most frequent substring is 'AAAAACCCCC'."
    },
    {
        "title": "Determine if a Graph is a Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Check if a given graph is a tree based on its properties.",
        "tags": "Graph, Tree, Algorithm",
        "paid": "Yes",
        "answer": "A graph is a tree if it is connected and acyclic. Use DFS or BFS to check connectivity and cycle presence. For example, a graph with N nodes and N-1 edges, and no cycles is a tree."
    },
    {
        "title": "Solve the Longest Palindromic Subsequence Problem",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the length of the longest palindromic subsequence in a string.",
        "tags": "String, Palindromic Subsequence, Algorithm",
        "paid": "Yes",
        "answer": "Use dynamic programming to compute the length of the longest palindromic subsequence. For example, in 'bbabcb', the longest palindromic subsequence is 'bbabb' with length 5."
    },
    {
        "title": "Find the Median of Two Sorted Arrays",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the median of two sorted arrays of equal or unequal length.",
        "tags": "Array, Median, Algorithm",
        "paid": "Yes",
        "answer": "Use binary search to find the median by partitioning arrays. For example, for arrays [1, 3] and [2], the median is 2. For arrays [1, 2] and [3, 4], the median is 2.5."
    },
    {
        "title": "Solve the Longest Repeating Subsequence Problem",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the length of the longest repeating subsequence in a string.",
        "tags": "String, Repeating Subsequence, Algorithm",
        "paid": "Yes",
        "answer": "Use dynamic programming to compute the length of the longest repeating subsequence. For example, in 'AABEBCDD', the longest repeating subsequence is 'ABD' with length 3."
    },
    {
        "title": "Find the Minimum Window Substring Containing All Patterns",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the smallest substring containing all characters of given patterns.",
        "tags": "String, Sliding Window, Algorithm",
        "paid": "Yes",
        "answer": "Use a sliding window approach with hash maps to track character counts. For example, for string 'ADOBECODEBANC' and patterns 'ABC', the minimum window substring is 'BANC'."
    },
    {
        "title": "Determine the Number of Connected Components in a Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Count the number of connected components in an undirected graph.",
        "tags": "Graph, Connected Components, Algorithm",
        "paid": "Yes",
        "answer": "Use DFS or BFS to explore each component and count the total. For example, a graph with several disconnected subgraphs has a count equal to the number of these subgraphs."
    },
    {
        "title": "Find the Maximum Sum of Non-Adjacent Elements",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the maximum sum of non-adjacent elements in an array.",
        "tags": "Array, Dynamic Programming, Algorithm",
        "paid": "Yes",
        "answer": "Use dynamic programming to decide whether to include each element in the sum or skip it. For example, for array [3, 2, 5, 10, 7], the maximum sum of non-adjacent elements is 15."
    },
    {
        "title": "Implement a Segment Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a segment tree for efficient range queries and updates.",
        "tags": "Segment Tree, Data Structure, Range Queries",
        "paid": "Yes",
        "answer": "A segment tree allows efficient range queries and updates. Build the tree with merge operations and query or update nodes as needed. For example, use it to find range sums or minimums in an array."
    },
    {
        "title": "Find the Maximum Subarray Sum with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the maximum sum of a contiguous subarray with additional constraints.",
        "tags": "Array, Subarray, Constraints",
        "paid": "Yes",
        "answer": "Modify Kadane's algorithm to handle constraints such as element limits or specific conditions. For example, if elements must be positive, adjust the algorithm accordingly."
    },
    {
        "title": "Solve the Longest Common Subsequence Problem in 3 Strings",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the longest common subsequence among three strings.",
        "tags": "String, LCS, Algorithm",
        "paid": "Yes",
        "answer": "Use a 3D dynamic programming table to compute the longest common subsequence. For example, for strings 'abc', 'abd', and 'aebd', the LCS is 'abd' with length 3."
    },
    {
        "title": "Determine the Shortest Path in a Grid with Obstacles",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the shortest path from start to end in a grid with obstacles.",
        "tags": "Grid, Pathfinding, Obstacles",
        "paid": "Yes",
        "answer": "Use BFS to explore paths while avoiding obstacles. For example, in a grid with blocked cells, BFS calculates the shortest path from the start to the end while avoiding obstacles."
    },
    {
        "title": "Find the Maximum Sum Path in a Binary Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the maximum sum of a path in a binary tree where the path can start and end at any nodes.",
        "tags": "Binary Tree, Maximum Path Sum, Algorithm",
        "paid": "Yes",
        "answer": "Use DFS to explore paths and compute the maximum path sum. Track the global maximum sum. For example, in a tree with nodes 10, 2, 10, 20, and 1, find the maximum sum path."
    },
    {
        "title": "Determine the Shortest Path in a Weighted Graph with Negative Cycles",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the shortest path in a graph with weights and potential negative cycles using Bellman-Ford.",
        "tags": "Graph, Bellman-Ford, Negative Cycles",
        "paid": "Yes",
        "answer": "Use Bellman-Ford to detect negative cycles and compute shortest paths. If negative cycles are reachable, they affect shortest paths. For example, Bellman-Ford identifies shortest paths and reports if negative cycles influence them."
    },
    {
        "title": "Implement a Trie (Prefix Tree)",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a Trie for efficient storage and retrieval of strings with common prefixes.",
        "tags": "Trie, Prefix Tree, Data Structure",
        "paid": "Yes",
        "answer": "A Trie stores strings in a tree-like structure where common prefixes are shared. Insert and search operations are efficient due to shared nodes. For example, insert 'cat' and 'car' into a Trie to share common prefix 'ca'."
    },
    {
        "title": "Find the Longest Common Prefix of Strings in an Array",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Identify the longest common prefix among an array of strings.",
        "tags": "String, Prefix, Algorithm",
        "paid": "Yes",
        "answer": "Compare characters of all strings from the beginning. Stop when characters differ. For example, in ['flower', 'flow', 'flight'], the longest common prefix is 'fl'."
    },
    {
        "title": "Solve the Maximum Product Subarray Problem with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the maximum product of a subarray with constraints on elements or subarray size.",
        "tags": "Array, Subarray, Product, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming or sliding window approach to handle constraints and compute the maximum product. For example, if elements must be positive, find the maximum product subarray under these conditions."
    },
    {
        "title": "Determine the Minimum Cost Path in a Weighted Grid",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the minimum cost path from the top-left to bottom-right of a weighted grid.",
        "tags": "Grid, Pathfinding, Weighted Grid",
        "paid": "Yes",
        "answer": "Use Dijkstraâ€™s algorithm or dynamic programming to compute minimum cost path. For example, given a grid with varying costs, calculate the minimum cost to traverse from start to end."
    },
    {
        "title": "Find the Kth Largest Element in an Unsorted Array",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Identify the Kth largest element in an unsorted array.",
        "tags": "Array, Kth Largest, Algorithm",
        "paid": "Yes",
        "answer": "Use Quickselect algorithm or a min-heap to find the Kth largest element efficiently. For example, in array [3, 2, 1, 5, 6, 4] with K=2, the 2nd largest element is 5."
    },
    {
        "title": "Implement a Skip List",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a skip list for efficient search, insertion, and deletion.",
        "tags": "Skip List, Data Structure, Algorithm",
        "paid": "Yes",
        "answer": "A skip list allows O(log N) operations for search, insertion, and deletion by maintaining multiple levels of linked lists. For example, a skip list with multiple levels speeds up search operations compared to a single linked list."
    },
    {
        "title": "Find the Maximum Flow with Multiple Sources and Sinks",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Calculate the maximum flow in a network with multiple sources and sinks.",
        "tags": "Flow Network, Maximum Flow, Algorithm",
        "paid": "Yes",
        "answer": "Transform the network into a single-source, single-sink problem by adding a super-source and super-sink. Apply the Ford-Fulkerson method to find the maximum flow. For example, connect sources and sinks to new nodes and compute flow."
    },
    {
        "title": "Find the Largest Sum of a Contiguous Subarray with Minimum Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the largest sum of a contiguous subarray while respecting minimum constraints on elements.",
        "tags": "Array, Subarray, Constraints",
        "paid": "Yes",
        "answer": "Modify Kadane's algorithm to include constraints, such as minimum or maximum element limits. For example, find the largest sum subarray where elements must be above a certain threshold."
    },
    {
        "title": "Solve the Longest Path Problem in a Directed Acyclic Graph (DAG) with Cyclic Dependencies",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the longest path in a DAG, considering nodes with cyclic dependencies.",
        "tags": "DAG, Longest Path, Cyclic Dependencies",
        "paid": "Yes",
        "answer": "Handle cyclic dependencies by ensuring the graph remains acyclic. Use topological sorting to compute the longest path. For example, in a modified DAG with additional constraints, find the longest path respecting dependencies."
    },
    {
        "title": "Find the Minimum Cost of Cutting a Rod into Pieces",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum cost to cut a rod into specified lengths.",
        "tags": "Rod Cutting, Minimum Cost, Algorithm",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the minimum cost for cutting a rod into required pieces. For example, given costs for each cut, calculate the least expensive way to achieve desired piece lengths."
    },
    {
        "title": "Solve the Longest Common Substring Problem with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the longest common substring among strings with additional constraints.",
        "tags": "String, Substring, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the longest common substring while respecting constraints such as substring length or character limits. For example, in strings with specific character requirements, find the longest common substring."
    },
    {
        "title": "Implement a B-Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Build and use a B-Tree for efficient insertion, deletion, and search operations.",
        "tags": "B-Tree, Data Structure, Algorithm",
        "paid": "Yes",
        "answer": "A B-Tree is a self-balancing tree that maintains sorted data and allows searches, sequential access, and insertions/deletions in logarithmic time. Implement node splitting and merging as needed. For example, manage large datasets with a B-Tree."
    },
    {
        "title": "Find the Maximum Sum Path in a Triangle",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the maximum sum of a path from the top to the base of a triangle.",
        "tags": "Triangle, Pathfinding, Dynamic Programming",
        "paid": "Yes",
        "answer": "Use dynamic programming to compute the maximum sum path by updating values from bottom to top. For example, in a triangle with values, compute the maximum sum path from top to base."
    },
    {
        "title": "Solve the Maximum Subarray Sum Problem with Minimum Length Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the maximum sum of a contiguous subarray with a minimum length constraint.",
        "tags": "Array, Subarray, Constraints",
        "paid": "Yes",
        "answer": "Modify Kadane's algorithm to ensure the subarray meets the minimum length requirement. For example, for array [1, 2, 3, 4] and minimum length 2, find the maximum sum subarray of at least length 2."
    },
    {
        "title": "Find the Minimum Number of Edges Required to Make a Graph Connected",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum number of edges needed to make an undirected graph connected.",
        "tags": "Graph, Connectivity, Algorithm",
        "paid": "Yes",
        "answer": "Identify disconnected components and compute the minimum number of edges required to connect them. For example, in a graph with multiple components, add edges to ensure all nodes are reachable."
    },
    {
        "title": "Implement a Suffix Array",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a suffix array to enable efficient substring searches and pattern matching.",
        "tags": "Suffix Array, String, Algorithm",
        "paid": "Yes",
        "answer": "Build a suffix array to represent all suffixes of a string in sorted order. Use this array for efficient string matching. For example, for string 'banana', create an array of suffixes sorted lexicographically."
    },
    {
        "title": "Find the Largest Palindromic Subsequence in a Matrix",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Identify the largest palindromic subsequence in a given matrix.",
        "tags": "Matrix, Palindromic Subsequence, Algorithm",
        "paid": "Yes",
        "answer": "Convert the matrix to a string or use dynamic programming to find the largest palindromic subsequence in rows, columns, or diagonals. For example, in a matrix, identify the longest palindromic sequence."
    },
    {
        "title": "Determine the Minimum Cost Path in a Grid with Different Costs",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the minimum cost path from the start to the end of a grid with varying costs.",
        "tags": "Grid, Pathfinding, Costs",
        "paid": "Yes",
        "answer": "Use Dijkstra's algorithm to account for different costs in each cell of the grid. For example, given a grid with different cell costs, find the path with the minimum total cost."
    },
    {
        "title": "Find the Largest Palindromic Substring in a Matrix",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the largest palindromic substring within a given matrix.",
        "tags": "Matrix, Palindromic Substring, Algorithm",
        "paid": "Yes",
        "answer": "Search for palindromic substrings in all directions (rows, columns, diagonals) within the matrix. Use string matching techniques to identify the longest palindrome. For example, find the largest palindrome in a 2D matrix of characters."
    },
    {
        "title": "Find the Maximum Product of k Non-Adjacent Elements in an Array",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum product of k non-adjacent elements in an array.",
        "tags": "Array, Product, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to track maximum product values while skipping adjacent elements. For example, in array [3, 2, 5, 10, 7] with k=2, the maximum product of non-adjacent elements is 35 (5 * 7)."
    },
    {
        "title": "Determine the Longest Path in a Weighted Directed Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the longest path in a weighted directed graph without cycles.",
        "tags": "Graph, Longest Path, Directed",
        "paid": "Yes",
        "answer": "Use topological sorting and dynamic programming to find the longest path. For example, in a directed acyclic graph (DAG), compute the maximum path lengths from each node."
    },
    {
        "title": "Implement a Fibonacci Heap",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a Fibonacci heap for efficient merge operations and priority queue functionalities.",
        "tags": "Heap, Fibonacci Heap, Data Structure",
        "paid": "Yes",
        "answer": "A Fibonacci heap supports efficient merge operations and priority queue functions. Implement the heap with a series of trees where each tree follows the min-heap property."
    },
    {
        "title": "Find the Kth Smallest Element in a Sorted Matrix",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Identify the Kth smallest element in a matrix where each row and column is sorted.",
        "tags": "Matrix, Kth Smallest, Algorithm",
        "paid": "Yes",
        "answer": "Use a min-heap to efficiently extract the Kth smallest element. For example, for a matrix sorted in ascending order, push elements into the heap and extract the smallest element K times."
    },
    {
        "title": "Solve the Word Break Problem with a Dictionary",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine if a given string can be segmented into words from a dictionary.",
        "tags": "String, Dynamic Programming, Algorithm",
        "paid": "Yes",
        "answer": "Use dynamic programming to check if the string can be segmented into words from the dictionary. For example, with string 'applepie' and dictionary ['apple', 'pie'], check if it can be segmented into 'apple pie'."
    },
    {
        "title": "Find the Largest Square Submatrix with All 1s",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the largest square submatrix with all elements equal to 1 in a binary matrix.",
        "tags": "Binary Matrix, Square Submatrix, Algorithm",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the largest square submatrix. For example, in a binary matrix, compute the largest square of 1s by updating values based on adjacent squares."
    },
    {
        "title": "Implement a Union-Find Data Structure",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a Union-Find data structure for efficient union and find operations.",
        "tags": "Union-Find, Disjoint Set, Data Structure",
        "paid": "Yes",
        "answer": "A Union-Find data structure supports union and find operations with path compression and union by rank. For example, use it to manage disjoint sets efficiently."
    },
    {
        "title": "Find the Maximum Sum Rectangle with Minimum Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Identify the maximum sum rectangle in a matrix with additional constraints.",
        "tags": "Matrix, Maximum Sum, Constraints",
        "paid": "Yes",
        "answer": "Modify the Kadaneâ€™s algorithm to handle constraints such as size or element limits. For example, find the maximum sum rectangle with specified size limits within a matrix."
    },
    {
        "title": "Solve the Longest Increasing Subsequence Problem in 2D",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the longest increasing subsequence in a 2D matrix.",
        "tags": "Matrix, Longest Increasing Subsequence, Algorithm",
        "paid": "Yes",
        "answer": "Use dynamic programming to compute the longest increasing subsequence by considering all directions in the matrix. For example, in a 2D matrix, find the longest path with increasing values."
    },
    {
        "title": "Implement a Skip List with Level Control",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Build a skip list with configurable levels for optimized search and insertion.",
        "tags": "Skip List, Data Structure, Level Control",
        "paid": "Yes",
        "answer": "A skip list with level control allows balancing and optimized operations. Implement nodes with multiple levels and adjust levels based on probabilistic methods to maintain balance."
    },
    {
        "title": "Find the Minimum Cost to Connect All Points in a Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum cost to connect all points in a graph using Kruskal's or Prim's algorithm.",
        "tags": "Graph, Minimum Spanning Tree, Algorithm",
        "paid": "Yes",
        "answer": "Use Kruskal's or Prim's algorithm to find the minimum spanning tree. For example, in a graph with weighted edges, compute the minimum cost to connect all vertices."
    },
    {
        "title": "Solve the Maximum Subarray Sum Problem with Additional Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the maximum sum of a contiguous subarray with additional constraints on elements or size.",
        "tags": "Array, Subarray, Constraints",
        "paid": "Yes",
        "answer": "Modify Kadaneâ€™s algorithm to handle constraints such as element range or subarray length. For example, find the maximum sum subarray where elements must fall within a specific range."
    },
    {
        "title": "Determine the Number of Distinct Substrings in a String",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Count the number of distinct substrings in a given string.",
        "tags": "String, Substrings, Algorithm",
        "paid": "Yes",
        "answer": "Use a suffix array or a suffix tree to count distinct substrings efficiently. For example, for string 'banana', compute the number of unique substrings using suffix tree structures."
    },
    {
        "title": "Find the Maximum Product Subarray with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum product of a contiguous subarray while respecting constraints.",
        "tags": "Array, Product, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming or sliding window approach with constraints on subarray size or element values. For example, find the maximum product of a subarray with elements above a threshold."
    },
    {
        "title": "Solve the Longest Common Subsequence Problem for Multiple Strings",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the longest common subsequence among multiple strings.",
        "tags": "String, LCS, Algorithm",
        "paid": "Yes",
        "answer": "Use a multidimensional dynamic programming table to compute the longest common subsequence. For example, for three strings, find the common subsequence present in all strings."
    },
    {
        "title": "Find the Minimum Path Sum in a Triangle with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the minimum path sum from top to bottom in a triangle with additional constraints.",
        "tags": "Triangle, Pathfinding, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to account for constraints like maximum allowed path length or element values. For example, find the minimum path sum in a triangle where certain paths are restricted."
    },
    {
        "title": "Implement an AVL Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create an AVL Tree with self-balancing properties for efficient operations.",
        "tags": "AVL Tree, Data Structure, Balancing",
        "paid": "Yes",
        "answer": "An AVL Tree is a self-balancing binary search tree. Implement rotations (left, right) to maintain balance after insertions and deletions. For example, balance the tree to keep operations in O(log N) time."
    },
    {
        "title": "Solve the Maximum Sum Path Problem in a Grid with Obstacles",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the maximum sum path in a grid with obstacles and varying costs.",
        "tags": "Grid, Pathfinding, Obstacles",
        "paid": "Yes",
        "answer": "Use dynamic programming to calculate the maximum sum path while avoiding obstacles. For example, in a grid with obstacles, compute the maximum sum path from top-left to bottom-right."
    },
    {
        "title": "Find the Longest Palindromic Substring with Minimum Length Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Identify the longest palindromic substring while respecting minimum length constraints.",
        "tags": "String, Palindromic Substring, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to find palindromic substrings that meet the length constraints. For example, in string 'babad' with a minimum length of 3, find the longest palindromic substring 'bab'."
    },
    {
        "title": "Implement a B+ Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a B+ Tree for efficient data storage and retrieval with all values in leaf nodes.",
        "tags": "B+ Tree, Data Structure, Algorithm",
        "paid": "Yes",
        "answer": "A B+ Tree is a self-balancing tree where all values are stored in leaf nodes, and internal nodes act as guides. Implement insertions, deletions, and searches efficiently."
    },
    {
        "title": "Find the Minimum Sum Subarray with Maximum Length Constraint",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum sum of a subarray with a constraint on its maximum length.",
        "tags": "Array, Subarray, Constraints",
        "paid": "Yes",
        "answer": "Use sliding window or dynamic programming to find the minimum sum subarray respecting the length constraint. For example, for array [1, 2, 3, 4] with max length 3, find the minimum sum subarray."
    },
    {
        "title": "Determine the Longest Common Substring of Multiple Strings with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the longest common substring among multiple strings with additional constraints.",
        "tags": "String, Longest Common Substring, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the longest common substring among multiple strings with constraints such as character limits. For example, in strings with specific requirements, find the longest substring."
    },
    {
        "title": "Find the Shortest Path with Exact Number of Edges",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the shortest path in a graph with an exact number of edges.",
        "tags": "Graph, Shortest Path, Constraints",
        "paid": "Yes",
        "answer": "Use a modified BFS or DP to find the shortest path with exactly k edges. For example, in a graph, find the shortest path from source to destination using exactly k edges."
    },
    {
        "title": "Solve the Minimum Cost to Convert a Binary Tree into a Binary Search Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum cost to convert a binary tree into a binary search tree.",
        "tags": "Binary Tree, Conversion, Cost",
        "paid": "Yes",
        "answer": "Use dynamic programming to compute the minimum cost for conversion. For example, calculate the cost of rearranging nodes to form a valid binary search tree from a given binary tree."
    },
    {
        "title": "Find the Maximum Sum Path in a Matrix with Limited Moves",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum sum path in a matrix with constraints on the number of moves.",
        "tags": "Matrix, Pathfinding, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the maximum sum path with move limits. For example, in a matrix with constraints on the number of moves, compute the maximum path sum."
    },
    {
        "title": "Implement a Suffix Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Build a suffix tree to enable efficient substring searches and pattern matching.",
        "tags": "Suffix Tree, String, Algorithm",
        "paid": "Yes",
        "answer": "A suffix tree represents all suffixes of a string for fast substring searches. Implement the tree with nodes representing suffixes and edges representing substrings."
    },
    {
        "title": "Find the Largest Rectangle Area in a Binary Matrix",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the largest rectangle area in a binary matrix where elements are either 0 or 1.",
        "tags": "Binary Matrix, Largest Rectangle, Algorithm",
        "paid": "Yes",
        "answer": "Use a histogram-based approach to compute the largest rectangle area. For example, convert each row to a histogram and find the largest rectangle area for each histogram."
    },
    {
        "title": "Solve the Matrix Chain Multiplication Problem with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the optimal order of matrix multiplications with additional constraints.",
        "tags": "Matrix Chain Multiplication, Constraints, Dynamic Programming",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the minimum cost of multiplying matrices with constraints such as dimension limits. For example, optimize the multiplication order of matrices to minimize the cost."
    },
    {
        "title": "Find the Maximum Value of a Contiguous Subarray with Specific Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Identify the maximum value of a contiguous subarray with constraints on elements or subarray size.",
        "tags": "Array, Subarray, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming or sliding window approach to compute the maximum value of a subarray while meeting constraints. For example, find the maximum value of subarrays with size or element limits."
    },
    {
        "title": "Determine the Minimum Number of Operations to Convert One String to Another",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the minimum number of operations needed to convert one string into another using insertion, deletion, or substitution.",
        "tags": "String, Edit Distance, Algorithm",
        "paid": "Yes",
        "answer": "Use dynamic programming to compute the minimum edit distance. For example, convert 'kitten' to 'sitting' with the least number of insertions, deletions, or substitutions."
    },
    {
        "title": "Solve the Maximum Sum Rectangle with Constraints in a Matrix",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the maximum sum rectangle in a matrix with constraints such as size or position.",
        "tags": "Matrix, Maximum Sum, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the maximum sum rectangle while respecting constraints. For example, compute the maximum sum of a rectangle within a matrix with specified size constraints."
    },
    {
        "title": "Implement a Segment Tree with Lazy Propagation",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Build a segment tree with lazy propagation for efficient range updates and queries.",
        "tags": "Segment Tree, Lazy Propagation, Data Structure",
        "paid": "Yes",
        "answer": "A segment tree with lazy propagation allows efficient range updates and queries. Implement operations with lazy values to delay updates and apply them when necessary."
    },
    {
        "title": "Find the Minimum Number of Moves to Solve a Sliding Puzzle",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the minimum number of moves to solve a sliding puzzle from a given starting state.",
        "tags": "Puzzle, Sliding Puzzle, Algorithm",
        "paid": "Yes",
        "answer": "Use BFS to explore all possible moves and find the shortest path to solve the puzzle. For example, in a 3x3 sliding puzzle, compute the minimum moves to reach the solved state."
    },
    {
        "title": "Solve the Maximum Rectangle Area Problem in a Binary Matrix with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum rectangle area in a binary matrix with additional constraints.",
        "tags": "Binary Matrix, Maximum Rectangle, Constraints",
        "paid": "Yes",
        "answer": "Use a histogram approach to find the maximum rectangle area while handling constraints. For example, in a binary matrix with row constraints, compute the largest rectangle area."
    },
    {
        "title": "Find the Largest Palindromic Subsequence with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Identify the largest palindromic subsequence with additional constraints on length or character limits.",
        "tags": "String, Palindromic Subsequence, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the largest palindromic subsequence while meeting constraints. For example, find the longest palindromic subsequence with specific length or character restrictions."
    },
    {
        "title": "Determine the Shortest Path with Exact Number of Stops",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the shortest path between two nodes with an exact number of stops in a graph.",
        "tags": "Graph, Shortest Path, Constraints",
        "paid": "Yes",
        "answer": "Use modified BFS or dynamic programming to find the shortest path with exactly k stops. For example, in a graph, find the shortest path from source to destination with exactly 3 stops."
    },
    {
        "title": "Find the Minimum Cost to Convert a Binary Tree to a Balanced Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum cost to convert a binary tree into a balanced binary tree.",
        "tags": "Binary Tree, Conversion, Cost",
        "paid": "Yes",
        "answer": "Use dynamic programming to compute the minimum cost of balancing the tree. For example, calculate the cost of rearranging nodes to achieve a balanced binary tree structure."
    },
    {
        "title": "Implement a Balanced Binary Search Tree (e.g., Red-Black Tree)",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Build a balanced binary search tree, such as a Red-Black Tree, for efficient operations.",
        "tags": "Binary Search Tree, Red-Black Tree, Data Structure",
        "paid": "Yes",
        "answer": "A Red-Black Tree is a self-balancing binary search tree with color-based balancing rules. Implement insertions, deletions, and rotations to maintain balance and search efficiency."
    },
    {
        "title": "Find the Maximum Subarray Sum with Minimum Length Constraint",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Identify the maximum sum of a contiguous subarray while respecting a minimum length constraint.",
        "tags": "Array, Subarray, Constraints",
        "paid": "Yes",
        "answer": "Use sliding window or dynamic programming to find the maximum sum of subarrays that meet the minimum length constraint. For example, find the maximum sum of subarrays of at least length 3."
    },
    {
        "title": "Determine the Minimum Cost to Transform One Matrix into Another",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the minimum cost to transform one matrix into another matrix with allowed operations.",
        "tags": "Matrix, Transformation, Cost",
        "paid": "Yes",
        "answer": "Use dynamic programming or graph-based methods to calculate the minimum cost of transforming one matrix into another. For example, compute the cost of converting matrix A into matrix B with specified operations."
    },
    {
        "title": "Find the Longest Palindromic Subsequence in a Binary Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Identify the longest palindromic subsequence in a binary tree's traversal.",
        "tags": "Binary Tree, Palindromic Subsequence, Traversal",
        "paid": "Yes",
        "answer": "Perform a tree traversal to collect nodes in sequence and then find the longest palindromic subsequence in this sequence. For example, traverse the tree in-order and find the longest palindrome."
    },
    {
        "title": "Solve the Maximum Sum Path Problem in a Grid with Obstacles",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum sum path in a grid with obstacles and varying costs.",
        "tags": "Grid, Pathfinding, Obstacles",
        "paid": "Yes",
        "answer": "Use dynamic programming to calculate the maximum sum path while avoiding obstacles. For example, find the maximum sum path from the top-left to bottom-right corner of a grid with obstacles."
    },
    {
        "title": "Find the Minimum Cost to Arrange a Matrix in Sorted Order",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum cost required to arrange a matrix in a sorted order using allowed operations.",
        "tags": "Matrix, Sorting, Cost",
        "paid": "Yes",
        "answer": "Use dynamic programming to calculate the minimum cost of arranging the matrix into sorted order. For example, find the cost of reordering elements to achieve a sorted matrix."
    },
    {
        "title": "Implement a Trie with Deletion Functionality",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a Trie data structure with support for inserting, searching, and deleting words.",
        "tags": "Trie, Data Structure, Deletion",
        "paid": "Yes",
        "answer": "A Trie is a tree-like data structure for storing words. Implement insert, search, and delete operations. For example, insert 'apple', search for 'app', and delete 'apple' from the Trie."
    },
    {
        "title": "Find the Maximum Sum of Non-Adjacent Elements in a Matrix",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum sum of non-adjacent elements in a matrix.",
        "tags": "Matrix, Non-Adjacent, Maximum Sum",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the maximum sum of non-adjacent elements in a matrix. For example, find the maximum sum of non-adjacent elements in a 2D matrix."
    },
    {
        "title": "Solve the Longest Common Subsequence Problem with Multiple Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the longest common subsequence with multiple constraints on elements or positions.",
        "tags": "String, LCS, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to compute the longest common subsequence while respecting constraints. For example, find the longest common subsequence with constraints on element positions or values."
    },
    {
        "title": "Find the Minimum Cost to Convert a Directed Acyclic Graph (DAG) to a Complete Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the minimum cost required to convert a DAG into a complete graph with weighted edges.",
        "tags": "Graph, DAG, Conversion, Cost",
        "paid": "Yes",
        "answer": "Use algorithms to find the minimum cost of adding edges to convert a DAG to a complete graph. For example, compute the cost of adding necessary edges to achieve connectivity."
    },
    {
        "title": "Implement a Binary Indexed Tree (Fenwick Tree)",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a Binary Indexed Tree for efficient range queries and updates.",
        "tags": "Binary Indexed Tree, Fenwick Tree, Data Structure",
        "paid": "Yes",
        "answer": "A Binary Indexed Tree supports efficient prefix sum queries and updates. Implement methods for querying and updating values in logarithmic time."
    },
    {
        "title": "Find the Largest Contiguous Subarray Sum with Variable Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the largest sum of a contiguous subarray with variable constraints.",
        "tags": "Array, Subarray, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming or sliding window approach to find the largest sum subarray with variable constraints. For example, find the maximum sum with constraints on length or value range."
    },
    {
        "title": "Solve the Minimum Cost Path Problem with Variable Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the minimum cost path in a grid with variable constraints on movement.",
        "tags": "Grid, Pathfinding, Constraints",
        "paid": "Yes",
        "answer": "Use modified Dijkstra's algorithm to find the minimum cost path with variable movement constraints. For example, account for variable costs or movement restrictions in the grid."
    },
    {
        "title": "Find the Minimum Number of Edges to Make a Graph Connected",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum number of edges required to make a disconnected graph connected.",
        "tags": "Graph, Connectivity, Edges",
        "paid": "Yes",
        "answer": "Use graph traversal methods to identify disconnected components and calculate the minimum number of edges needed to connect them. For example, add edges between components to achieve connectivity."
    },
    {
        "title": "Implement a Suffix Automaton",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Build a suffix automaton for efficient substring searches and pattern matching.",
        "tags": "Suffix Automaton, String, Algorithm",
        "paid": "Yes",
        "answer": "A suffix automaton represents all suffixes of a string in a state machine. Implement the automaton to support efficient substring searches and pattern matching."
    },
    {
        "title": "Find the Maximum Product of k Non-Adjacent Elements in a Matrix",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum product of k non-adjacent elements in a matrix.",
        "tags": "Matrix, Non-Adjacent, Maximum Product",
        "paid": "Yes",
        "answer": "Use dynamic programming or backtracking to find the maximum product of k non-adjacent elements. For example, compute the product while avoiding adjacent elements in a 2D matrix."
    },
    {
        "title": "Solve the Minimum Cost to Rearrange Elements in a Matrix to Achieve Sorted Order",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum cost to rearrange elements in a matrix to achieve a sorted order.",
        "tags": "Matrix, Rearrangement, Cost",
        "paid": "Yes",
        "answer": "Use algorithms to calculate the minimum cost of rearranging matrix elements into sorted order. For example, find the cost of moving elements to achieve ascending order."
    },
    {
        "title": "Find the Maximum Product Subarray with Variable Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Identify the maximum product of a contiguous subarray with variable constraints.",
        "tags": "Array, Product, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming or sliding window approach to compute the maximum product subarray with constraints. For example, find the maximum product with constraints on subarray length or value range."
    },
    {
        "title": "Implement a Treap (Randomized Binary Search Tree)",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a Treap, a randomized binary search tree with heap properties.",
        "tags": "Treap, Binary Search Tree, Randomized",
        "paid": "Yes",
        "answer": "A Treap combines binary search tree properties with heap properties. Implement insertions, deletions, and rotations to maintain both heap and BST properties."
    },
    {
        "title": "Find the Largest Rectangle in a Histogram with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the largest rectangle area in a histogram with additional constraints.",
        "tags": "Histogram, Largest Rectangle, Constraints",
        "paid": "Yes",
        "answer": "Use a stack-based approach to find the largest rectangle area in a histogram while handling constraints. For example, find the largest rectangle with height constraints in a histogram."
    },
    {
        "title": "Solve the Minimum Cost to Transform One Graph into Another",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum cost required to transform one graph into another using allowed operations.",
        "tags": "Graph, Transformation, Cost",
        "paid": "Yes",
        "answer": "Use graph algorithms to calculate the minimum cost of transforming one graph into another. For example, compute the cost of converting one graph's structure to another using specified operations."
    },
    {
        "title": "Find the Longest Increasing Subsequence with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the longest increasing subsequence in an array with additional constraints.",
        "tags": "Array, Longest Increasing Subsequence, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the longest increasing subsequence with constraints like specific element ranges. For example, find the longest subsequence where elements must be within a certain range."
    },
    {
        "title": "Implement a Suffix Array with LCP Array",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Build a suffix array and its Longest Common Prefix (LCP) array for efficient substring operations.",
        "tags": "Suffix Array, LCP Array, String",
        "paid": "Yes",
        "answer": "A suffix array sorts all suffixes of a string. Combine it with the LCP array to efficiently find common prefixes between sorted suffixes, aiding in substring searches and pattern matching."
    },
    {
        "title": "Find the Minimum Cost to Rearrange Elements in a Matrix with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum cost to rearrange elements in a matrix with constraints on the allowed moves.",
        "tags": "Matrix, Rearrangement, Cost, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to compute the minimum cost for rearranging matrix elements within constraints. For example, find the cost to sort a matrix where only specific types of swaps are allowed."
    },
    {
        "title": "Solve the Maximum Flow Problem with Multiple Sources and Sinks",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum flow in a network with multiple source and sink nodes.",
        "tags": "Graph, Maximum Flow, Network Flow",
        "paid": "Yes",
        "answer": "Extend the Ford-Fulkerson algorithm or Edmonds-Karp algorithm to handle multiple sources and sinks. Convert the problem to a single-source, single-sink flow network by introducing a super-source and super-sink."
    },
    {
        "title": "Implement a K-D Tree for Efficient k-Dimensional Queries",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a K-D Tree to efficiently handle k-dimensional queries such as range searches and nearest neighbor searches.",
        "tags": "K-D Tree, Data Structure, k-Dimensional Queries",
        "paid": "Yes",
        "answer": "A K-D Tree partitions k-dimensional space to facilitate efficient queries. Implement methods for insertion, deletion, and querying to handle k-dimensional points and perform range searches."
    },
    {
        "title": "Find the Longest Path in a Weighted Directed Acyclic Graph (DAG)",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the longest path in a weighted DAG.",
        "tags": "Graph, DAG, Longest Path",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the longest path in a DAG. Perform a topological sort and then compute the longest path using the sorted order, updating path lengths based on edge weights."
    },
    {
        "title": "Solve the Substring Search Problem with Multiple Patterns",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Search for multiple patterns within a text efficiently using advanced algorithms.",
        "tags": "String, Substring Search, Multiple Patterns",
        "paid": "Yes",
        "answer": "Use the Aho-Corasick algorithm to build an automaton for searching multiple patterns simultaneously. Construct a trie of patterns and create failure links to efficiently match patterns in the text."
    },
    {
        "title": "Implement an AVL Tree with Rotation Operations",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Build an AVL Tree with support for rotations to maintain balance.",
        "tags": "AVL Tree, Data Structure, Rotations",
        "paid": "Yes",
        "answer": "An AVL Tree is a self-balancing binary search tree. Implement rotations (left and right) to maintain balance during insertions and deletions, ensuring the tree remains balanced after operations."
    },
    {
        "title": "Find the Minimum Cost to Convert a Binary Tree into a Complete Binary Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the minimum cost required to convert a binary tree into a complete binary tree.",
        "tags": "Binary Tree, Conversion, Cost, Complete Tree",
        "paid": "Yes",
        "answer": "Use dynamic programming to determine the minimum cost for converting a binary tree into a complete binary tree by adding or removing nodes as needed."
    },
    {
        "title": "Solve the Maximum Subarray Product with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum product of a contiguous subarray with constraints.",
        "tags": "Array, Subarray, Maximum Product, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the maximum product subarray while adhering to constraints. For example, calculate the maximum product of contiguous elements within specific constraints."
    },
    {
        "title": "Implement a Dynamic Connectivity Data Structure",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a data structure to efficiently handle dynamic connectivity queries and updates.",
        "tags": "Dynamic Connectivity, Data Structure, Union-Find",
        "paid": "Yes",
        "answer": "Implement a Union-Find data structure with path compression and union by rank to efficiently handle dynamic connectivity queries and updates, such as checking and merging connected components."
    },
    {
        "title": "Find the Maximum Bipartite Matching with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum bipartite matching with additional constraints on the matchings.",
        "tags": "Graph, Bipartite Matching, Constraints",
        "paid": "Yes",
        "answer": "Use the Hopcroft-Karp algorithm to find the maximum bipartite matching while respecting constraints. For example, ensure matchings satisfy specific conditions or limits."
    },
    {
        "title": "Solve the Minimum Cost Path with Dynamic Obstacles",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the minimum cost path in a grid with dynamically changing obstacles.",
        "tags": "Grid, Pathfinding, Dynamic Obstacles, Cost",
        "paid": "Yes",
        "answer": "Use algorithms that handle dynamic changes, such as Dijkstraâ€™s with priority queues, to find the minimum cost path while adjusting for changing obstacles in the grid."
    },
    {
        "title": "Find the Largest Sum of Non-Adjacent Elements in a 2D Grid",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the largest sum of non-adjacent elements in a 2D grid.",
        "tags": "Grid, Non-Adjacent, Maximum Sum",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the largest sum of non-adjacent elements in a 2D grid. For example, select elements such that no two chosen elements are adjacent in any direction."
    },
    {
        "title": "Implement a Priority Queue with Decrease-Key Operation",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a priority queue that supports efficient decrease-key operations.",
        "tags": "Priority Queue, Decrease-Key, Data Structure",
        "paid": "Yes",
        "answer": "Implement a priority queue using a data structure like a binary heap or Fibonacci heap that supports efficient decrease-key operations for updating priorities and maintaining order."
    },
    {
        "title": "Solve the Minimum Cost to Arrange a Grid in Sorted Order with Restrictions",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum cost to arrange a grid in a sorted order with additional restrictions.",
        "tags": "Grid, Rearrangement, Cost, Restrictions",
        "paid": "Yes",
        "answer": "Use dynamic programming to compute the minimum cost for arranging a grid into sorted order with restrictions on allowed operations. For example, sort elements with specific movement constraints."
    },
    {
        "title": "Find the Maximum Weight Independent Set in a Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum weight independent set in a weighted graph.",
        "tags": "Graph, Independent Set, Maximum Weight",
        "paid": "Yes",
        "answer": "Use dynamic programming or approximation algorithms to find the maximum weight independent set. For example, select vertices such that no two are adjacent and the sum of weights is maximized."
    },
    {
        "title": "Implement a Mergeable Heap Data Structure",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a heap data structure that supports merging two heaps efficiently.",
        "tags": "Heap, Mergeable Heap, Data Structure",
        "paid": "Yes",
        "answer": "Implement a mergeable heap, such as a Fibonacci heap or binomial heap, that supports efficient merge operations while maintaining heap properties and supporting other operations."
    },
    {
        "title": "Find the Minimum Number of Moves to Solve a 2D Sliding Puzzle",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the minimum number of moves to solve a 2D sliding puzzle from a given starting configuration.",
        "tags": "Puzzle, Sliding Puzzle, Algorithm",
        "paid": "Yes",
        "answer": "Use BFS to explore all possible moves and find the shortest path to solve the 2D sliding puzzle. Each move involves sliding tiles to achieve the goal configuration."
    },
    {
        "title": "Implement a Dynamic Array with Support for Efficient Resizing",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a dynamic array that efficiently supports resizing operations.",
        "tags": "Dynamic Array, Resizing, Data Structure",
        "paid": "Yes",
        "answer": "Implement a dynamic array with amortized constant-time resizing operations. Use strategies like doubling the size when full to ensure efficient resizing while managing element storage."
    },
    {
        "title": "Solve the Maximum Submatrix Sum Problem with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum sum of a submatrix with additional constraints.",
        "tags": "Matrix, Maximum Submatrix Sum, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the maximum sum submatrix while respecting constraints like element values or submatrix size limits. For example, find the maximum sum submatrix with given constraints."
    },
    {
        "title": "Implement a Balanced Binary Search Tree with Range Queries",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a balanced binary search tree that supports range queries efficiently.",
        "tags": "Binary Search Tree, Range Queries, Data Structure",
        "paid": "Yes",
        "answer": "Implement a balanced binary search tree such as an AVL tree or Red-Black tree with additional methods for efficient range queries, like finding all elements within a specific range."
    },
    {
        "title": "Find the Minimum Number of Operations to Transform One Graph into Another",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum number of operations needed to convert one graph into another.",
        "tags": "Graph, Transformation, Minimum Operations",
        "paid": "Yes",
        "answer": "Use algorithms to calculate the minimum operations (such as adding or removing edges) required to transform one graph into another. For example, compute the cost to match graph structures."
    },
    {
        "title": "Solve the Maximum Flow Problem in a Network with Capacities",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum flow in a network with capacity constraints on edges.",
        "tags": "Network Flow, Maximum Flow, Capacities",
        "paid": "Yes",
        "answer": "Apply the Ford-Fulkerson method or its variant, Edmonds-Karp, to solve the maximum flow problem considering edge capacities. Find the maximum flow from a source to a sink in a network."
    },
    {
        "title": "Implement a Segment Tree with Lazy Propagation",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Build a segment tree that supports lazy propagation for efficient range updates and queries.",
        "tags": "Segment Tree, Lazy Propagation, Data Structure",
        "paid": "Yes",
        "answer": "A segment tree with lazy propagation efficiently handles range updates and queries. Implement methods to propagate updates lazily and maintain accurate segment values."
    },
    {
        "title": "Find the Minimum Number of Edges to Achieve Strong Connectivity in a Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum number of edges needed to make a directed graph strongly connected.",
        "tags": "Graph, Strong Connectivity, Minimum Edges",
        "paid": "Yes",
        "answer": "Use algorithms like Tarjan's or Kosaraju's to find strongly connected components and calculate the minimum number of edges required to make the graph strongly connected."
    },
    {
        "title": "Solve the Maximum Rectangle Area Problem in a Binary Matrix",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the maximum area of a rectangle in a binary matrix.",
        "tags": "Binary Matrix, Maximum Rectangle Area, Algorithm",
        "paid": "Yes",
        "answer": "Use a histogram-based approach where each row in the binary matrix is treated as a base for a histogram. Compute the maximum rectangle area using a stack-based histogram algorithm."
    },
    {
        "title": "Implement an AVL Tree with In-Order Traversal",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create an AVL Tree with support for in-order traversal.",
        "tags": "AVL Tree, In-Order Traversal, Data Structure",
        "paid": "Yes",
        "answer": "An AVL Tree is a self-balancing binary search tree. Implement in-order traversal to retrieve elements in sorted order while maintaining balance during insertions and deletions."
    },
    {
        "title": "Find the Shortest Path in a Graph with Non-Uniform Weights",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the shortest path in a graph where edge weights are non-uniform.",
        "tags": "Graph, Shortest Path, Non-Uniform Weights",
        "paid": "Yes",
        "answer": "Use Dijkstra's algorithm to find the shortest path in a graph with non-uniform weights. For graphs with negative weights, use the Bellman-Ford algorithm to handle potential negative cycles."
    },
    {
        "title": "Solve the Maximum Independent Set Problem in a Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum independent set in a graph, where no two vertices are adjacent.",
        "tags": "Graph, Independent Set, Maximum Size",
        "paid": "Yes",
        "answer": "Use approximation algorithms or dynamic programming to find the maximum independent set. For example, select the largest set of vertices with no two adjacent vertices in a graph."
    },
    {
        "title": "Implement a Skip List for Efficient Search Operations",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Build a skip list to perform search operations efficiently.",
        "tags": "Skip List, Data Structure, Search",
        "paid": "Yes",
        "answer": "A skip list is a probabilistic data structure that allows efficient search, insertion, and deletion operations. Implement skip lists with multiple levels of linked lists to facilitate fast searches."
    },
    {
        "title": "Find the Minimum Cost to Convert a Graph to a Tree Structure",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the minimum cost required to transform a graph into a tree structure.",
        "tags": "Graph, Tree Structure, Conversion, Cost",
        "paid": "Yes",
        "answer": "Use algorithms to find the minimum cost of converting a graph to a tree by removing edges while minimizing the cost. For example, find the minimum spanning tree or apply graph modification techniques."
    },
    {
        "title": "Solve the Longest Common Substring Problem with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the longest common substring with additional constraints on the strings.",
        "tags": "String, Longest Common Substring, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the longest common substring while respecting constraints such as specific character sets or lengths. Compute the longest substring that appears in both strings."
    },
    {
        "title": "Implement a Multi-Dimensional Range Query Data Structure",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a data structure to efficiently handle range queries in multiple dimensions.",
        "tags": "Range Query, Multi-Dimensional, Data Structure",
        "paid": "Yes",
        "answer": "Implement data structures like KD-Trees or Range Trees to handle multi-dimensional range queries. Support efficient queries and updates for k-dimensional points or ranges."
    },
    {
        "title": "Find the Maximum Flow in a Network with Capacities and Costs",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum flow in a network considering both capacities and costs on edges.",
        "tags": "Network Flow, Maximum Flow, Capacities, Costs",
        "paid": "Yes",
        "answer": "Use the Successive Shortest Path algorithm or Min-Cost Max-Flow algorithm to find the maximum flow with capacities and costs. Compute both maximum flow and minimum cost for flow."
    },
    {
        "title": "Solve the Minimum Distance to Cover All Nodes in a Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the minimum distance required to cover all nodes in a graph.",
        "tags": "Graph, Minimum Distance, Coverage",
        "paid": "Yes",
        "answer": "Use algorithms like the Travelling Salesman Problem (TSP) approximation or Minimum Steiner Tree to find the minimum distance required to visit or cover all nodes in a graph."
    },
    {
        "title": "Implement a Balanced B-Tree with Range Queries",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a B-Tree that supports efficient range queries.",
        "tags": "B-Tree, Balanced Tree, Range Queries",
        "paid": "Yes",
        "answer": "A B-Tree is a balanced tree data structure that supports efficient insertions, deletions, and range queries. Implement the B-Tree with methods for range queries and maintain balance during updates."
    },
    {
        "title": "Find the Minimum Cost to Build a Spanning Tree with Additional Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum cost to build a spanning tree with additional constraints on edge selection.",
        "tags": "Graph, Spanning Tree, Minimum Cost, Constraints",
        "paid": "Yes",
        "answer": "Use Kruskal's or Prim's algorithm to find the minimum cost spanning tree while respecting constraints such as specific edge requirements or node conditions."
    },
    {
        "title": "Solve the Maximum Weighted Bipartite Matching Problem",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum weighted bipartite matching in a weighted bipartite graph.",
        "tags": "Graph, Bipartite Matching, Weighted Matching",
        "paid": "Yes",
        "answer": "Use the Hungarian algorithm to find the maximum weighted bipartite matching. Compute the optimal matching that maximizes the sum of weights in a bipartite graph."
    },
    {
        "title": "Implement a Dynamic Connectivity Data Structure with Path Compression",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a data structure for dynamic connectivity with path compression optimization.",
        "tags": "Dynamic Connectivity, Path Compression, Union-Find",
        "paid": "Yes",
        "answer": "Implement a Union-Find data structure with path compression to efficiently handle dynamic connectivity queries and updates. Optimize connectivity checks and union operations with path compression."
    },
    {
        "title": "Find the Maximum Sum of Non-Adjacent Elements in a 1D Array",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum sum of non-adjacent elements in a 1D array.",
        "tags": "Array, Non-Adjacent, Maximum Sum",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the maximum sum of non-adjacent elements in a 1D array. For example, select elements such that no two chosen elements are adjacent, maximizing their sum."
    },
    {
        "title": "Solve the Longest Path Problem in a Directed Graph with Cycles",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the longest path in a directed graph that may contain cycles.",
        "tags": "Graph, Longest Path, Directed Graph, Cycles",
        "paid": "Yes",
        "answer": "Handle cycles by first detecting and removing them or using algorithms like the Floyd-Warshall algorithm to find longest paths considering all possible paths and cycles."
    },
    {
        "title": "Implement a Treap for Efficient Search and Updates",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a Treap (a randomized binary search tree) that supports efficient search, insertion, and deletion.",
        "tags": "Treap, Data Structure, Search, Updates",
        "paid": "Yes",
        "answer": "A Treap is a binary search tree with priority-based balancing. Implement it to support efficient search, insertion, and deletion operations by maintaining heap properties along with BST properties."
    },
    {
        "title": "Find the Minimum Cost to Cover All Nodes in a Weighted Graph",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the minimum cost to cover all nodes in a weighted graph.",
        "tags": "Graph, Minimum Cost, Coverage",
        "paid": "Yes",
        "answer": "Use algorithms like the Minimum Spanning Tree or Steiner Tree to cover all nodes with the minimum cost in a weighted graph. Compute the optimal covering based on edge weights and node requirements."
    },
    {
        "title": "Solve the Maximum Area of a Subrectangle with Constraints in a Grid",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the maximum area of a subrectangle in a grid with additional constraints.",
        "tags": "Grid, Subrectangle, Maximum Area, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the maximum area of a subrectangle within a grid while adhering to constraints. For example, maximize the area of a rectangle with specific value constraints."
    },
    {
        "title": "Implement a Data Structure for Efficient Range Updates and Queries",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a data structure that supports efficient range updates and queries.",
        "tags": "Range Updates, Range Queries, Data Structure",
        "paid": "Yes",
        "answer": "Implement a Segment Tree or Fenwick Tree (Binary Indexed Tree) to handle efficient range updates and queries. Support operations like adding a value to a range and querying sums over ranges."
    },
    {
        "title": "Find the Maximum Sum of Non-Adjacent Elements in a Circular Array",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum sum of non-adjacent elements in a circular array.",
        "tags": "Array, Circular Array, Non-Adjacent, Maximum Sum",
        "paid": "Yes",
        "answer": "Use dynamic programming with two scenarios: one considering the first element and one excluding it. Compute the maximum sum by evaluating both cases and choosing the better result."
    },
    {
        "title": "Solve the Maximum Product Subarray Problem with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the maximum product of a subarray with additional constraints.",
        "tags": "Array, Subarray, Maximum Product, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the maximum product subarray while adhering to constraints like element values or subarray length limits. Compute the maximum product based on constraints."
    },
    {
        "title": "Implement a Persistent Data Structure for Historical Queries",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a persistent data structure that supports queries on historical versions of the data.",
        "tags": "Persistent Data Structure, Historical Queries, Data Structure",
        "paid": "Yes",
        "answer": "Implement a data structure that maintains historical versions, such as a persistent segment tree, to efficiently support queries and modifications across different versions of the data."
    },
    {
        "title": "Find the Maximum Flow in a Network with Multiple Sources and Sinks",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum flow in a network with multiple sources and sinks.",
        "tags": "Network Flow, Maximum Flow, Multiple Sources, Multiple Sinks",
        "paid": "Yes",
        "answer": "Extend the Ford-Fulkerson or Edmonds-Karp algorithm to handle multiple sources and sinks by introducing a super-source and super-sink, then compute the maximum flow in this modified network."
    },
    {
        "title": "Solve the Longest Increasing Subsequence Problem in a Matrix",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the longest increasing subsequence in a 2D matrix.",
        "tags": "Matrix, Longest Increasing Subsequence, Algorithm",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the longest increasing subsequence in a 2D matrix. For each cell, compute the longest subsequence considering all previous cells that can form increasing sequences."
    },
    {
        "title": "Implement a Trie with Efficient Prefix Query Support",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Build a Trie that supports efficient prefix queries and insertions.",
        "tags": "Trie, Data Structure, Prefix Queries",
        "paid": "Yes",
        "answer": "Implement a Trie (prefix tree) to support efficient insertion and prefix queries. Use a tree-like structure where each node represents a character, allowing quick retrieval of words with common prefixes."
    },
    {
        "title": "Find the Minimum Cost to Convert a Tree into a Balanced Tree",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the minimum cost required to transform a tree into a balanced binary tree.",
        "tags": "Tree, Balanced Tree, Conversion, Cost",
        "paid": "Yes",
        "answer": "Use dynamic programming to determine the minimum cost of converting a tree into a balanced binary tree. Calculate the cost by adding or removing nodes to achieve balance and minimize costs."
    },
    {
        "title": "Solve the Maximum Sum Rectangle in a Binary Matrix with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Find the maximum sum rectangle in a binary matrix with additional constraints.",
        "tags": "Binary Matrix, Maximum Sum Rectangle, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming or prefix sum techniques to find the maximum sum rectangle in a binary matrix while adhering to constraints such as submatrix size or value limits."
    },
    {
        "title": "Implement a Binary Indexed Tree with Range Queries",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Create a Binary Indexed Tree (Fenwick Tree) to efficiently handle range queries and updates.",
        "tags": "Binary Indexed Tree, Range Queries, Data Structure",
        "paid": "Yes",
        "answer": "Implement a Binary Indexed Tree to support efficient range queries and updates. Use it to quickly calculate prefix sums and update values within an array or data structure."
    },
    {
        "title": "Find the Minimum Number of Edges to Make a Graph Strongly Connected",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the minimum number of edges required to make a directed graph strongly connected.",
        "tags": "Graph, Strong Connectivity, Minimum Edges",
        "paid": "Yes",
        "answer": "Use algorithms like Kosaraju's or Tarjan's to find strongly connected components and then calculate the minimum number of edges needed to connect all components to achieve strong connectivity."
    },
    {
        "title": "Solve the Maximum Subarray Sum Problem in a Circular Array with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Compute the maximum sum of a subarray in a circular array with additional constraints.",
        "tags": "Circular Array, Subarray Sum, Constraints",
        "paid": "Yes",
        "answer": "Use dynamic programming to find the maximum subarray sum in a circular array while respecting constraints. Handle circular wraparounds by combining the standard subarray sum and circular case."
    },
    {
        "title": "Implement a Suffix Array for Efficient String Matching",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Build a suffix array to perform efficient string matching and substring searches.",
        "tags": "Suffix Array, String Matching, Data Structure",
        "paid": "Yes",
        "answer": "Implement a suffix array to efficiently support string matching and substring searches. Use algorithms like SA-IS or prefix doubling to construct the suffix array and support fast queries."
    },
    {
        "title": "Find the Minimum Distance to Cover All Nodes in a Weighted Graph with Constraints",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Determine the minimum distance required to cover all nodes in a weighted graph with additional constraints.",
        "tags": "Graph, Minimum Distance, Coverage, Constraints",
        "paid": "Yes",
        "answer": "Use algorithms like the Minimum Spanning Tree or Steiner Tree with additional constraints to cover all nodes in a weighted graph. Optimize the covering distance considering the constraints."
    },
    {
        "title": "What is an Algorithm?",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Explain the concept of an algorithm in computing.",
        "tags": "algorithm,computer science,basic concepts",
        "paid": "Yes",
        "answer": "An algorithm is a step-by-step procedure or formula for solving a problem. Algorithms are essential in computer science for performing tasks efficiently and correctly. For example, a sorting algorithm like Merge Sort is used to arrange elements in a list in a specific order."
    },
    {
        "title": "Explain the Time Complexity of an Algorithm.",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Define time complexity and its significance in algorithm analysis.",
        "tags": "time complexity,algorithm analysis,computer science",
        "paid": "Yes",
        "answer": "Time complexity describes the computational time an algorithm takes to run, depending on the size of its input. It helps in evaluating the performance of algorithms. For example, the time complexity of Bubble Sort is O(n^2), where 'n' represents the number of elements to be sorted."
    },
    {
        "title": "What is a Binary Search Algorithm?",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Describe the binary search algorithm and its efficiency.",
        "tags": "binary search,search algorithms,computer science",
        "paid": "Yes",
        "answer": "Binary Search is an efficient algorithm that finds the position of a target value within a sorted array. It divides the search space in half with each step, giving it a time complexity of O(log n). For example, searching for a number in a sorted list of 10 elements takes at most 4 steps."
    },
    {
        "title": "What is a Data Structure?",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Define data structure and its types.",
        "tags": "data structure,types of data structure,computer science",
        "paid": "Yes",
        "answer": "A data structure is a way of organizing and storing data efficiently. Types include arrays, linked lists, stacks, queues, trees, and graphs. For example, a stack follows the Last In, First Out (LIFO) principle and is used in algorithms like depth-first search."
    },
    {
        "title": "Explain the concept of Recursion.",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Define recursion and its use in algorithms.",
        "tags": "recursion,algorithms,computer science",
        "paid": "Yes",
        "answer": "Recursion is when a function calls itself in order to solve smaller instances of the same problem. This approach is commonly used in divide and conquer algorithms. For example, calculating the factorial of a number (n!) can be done using recursion: n! = n * (n-1)!"
    },
    {
        "title": "What is a Linked List?",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Explain what a linked list is and how it differs from an array.",
        "tags": "linked list,data structures,computer science",
        "paid": "Yes",
        "answer": "A linked list is a linear data structure where elements, called nodes, are stored in different memory locations and linked using pointers. Unlike arrays, which store elements in contiguous memory locations, linked lists are more dynamic and flexible. For example, in a singly linked list, each node contains data and a reference to the next node."
    },
    {
        "title": "What is Bubble Sort?",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Explain the Bubble Sort algorithm and its time complexity.",
        "tags": "bubble sort,sorting algorithms,computer science",
        "paid": "Yes",
        "answer": "Bubble Sort is a simple comparison-based sorting algorithm where adjacent elements are swapped if they are in the wrong order. The process repeats until the list is sorted. Its time complexity is O(n^2) in the worst case. For example, sorting the list [5, 2, 9, 1] using Bubble Sort will result in [1, 2, 5, 9]."
    },
    {
        "title": "What is a Stack?",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Define stack data structure and its use cases.",
        "tags": "stack,data structures,computer science",
        "paid": "Yes",
        "answer": "A stack is a linear data structure that follows the Last In, First Out (LIFO) principle. It is used in many algorithms, including undo mechanisms, expression evaluation, and depth-first search (DFS). For example, a stack can store function calls in a recursive program, helping manage the sequence of execution."
    },
    {
        "title": "What is an Array?",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Define arrays and discuss their advantages and disadvantages.",
        "tags": "arrays,data structures,computer science",
        "paid": "Yes",
        "answer": "An array is a collection of elements stored in contiguous memory locations, where each element can be accessed by an index. Arrays offer fast access to elements but are of fixed size, which limits their flexibility. For example, an array [1, 2, 3, 4] has indices 0, 1, 2, and 3 respectively."
    },
    {
        "title": "Explain the concept of Hashing.",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Define hashing and its importance in data structures.",
        "tags": "hashing,hash table,data structures,computer science",
        "paid": "Yes",
        "answer": "Hashing is a technique used to map data of arbitrary size to fixed-size values, often used in hash tables. The hash function determines the index for data storage. Hashing allows for fast access to data. For example, in a hash table, 'John' might be stored at index 5 after hashing the name."
    },
    {
        "title": "What is a Queue?",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Describe a queue and its applications in computing.",
        "tags": "queue,data structures,computer science",
        "paid": "Yes",
        "answer": "A queue is a linear data structure that follows the First In, First Out (FIFO) principle. It is commonly used in scheduling algorithms, task management, and buffering in computer systems. For example, a print job queue allows documents to be printed in the order they were received."
    },
    {
        "title": "What is Merge Sort?",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Describe the Merge Sort algorithm and its efficiency.",
        "tags": "merge sort,sorting algorithms,computer science",
        "paid": "Yes",
        "answer": "Merge Sort is a divide-and-conquer sorting algorithm that recursively splits the array into halves until each sub-array contains a single element, then merges them in sorted order. It has a time complexity of O(n log n), making it more efficient than algorithms like Bubble Sort. For example, it can sort [5, 2, 9, 1] into [1, 2, 5, 9]."
    },
    {
        "title": "What is a Binary Tree?",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Define a binary tree and its types.",
        "tags": "binary tree,data structures,tree structures,computer science",
        "paid": "Yes",
        "answer": "A binary tree is a hierarchical data structure where each node has at most two children, referred to as the left child and the right child. Binary trees are used in search algorithms and expression evaluation. For example, in a binary search tree, the left child contains values smaller than the parent node, and the right child contains larger values."
    },
    {
        "title": "What is Dijkstra's Algorithm?",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Explain Dijkstra's algorithm and its use in finding the shortest path.",
        "tags": "dijkstra's algorithm,shortest path,graph algorithms,computer science",
        "paid": "Yes",
        "answer": "Dijkstra's algorithm finds the shortest path between two nodes in a graph. It works by visiting nodes in increasing order of distance from the start node, updating paths to each unvisited neighbor. The algorithm is commonly used in GPS navigation systems. For example, finding the shortest route between two cities in a road network."
    },
    {
        "title": "Explain Depth-First Search (DFS).",
        "category": "DSA",
        "sub_category": "Theory Round",
        "description": "Describe the DFS algorithm and its applications.",
        "tags": "depth-first search,dfs,graph algorithms,computer science",
        "paid": "Yes",
        "answer": "Depth-First Search (DFS) is a graph traversal algorithm that explores as far as possible along a branch before backtracking. It uses a stack, either explicitly or implicitly via recursion. DFS is used in pathfinding, solving mazes, and topological sorting. For example, DFS can traverse a graph to check connectivity between nodes."
    }
]